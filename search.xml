<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>近期碎碎念</title>
      <link href="/2025/07/05/new-work/"/>
      <url>/2025/07/05/new-work/</url>
      
        <content type="html"><![CDATA[<p>时间过得真快，还没来得及写2024年终总结，2025又已经过半了。好久没写博客了，某天心血来潮想要写点啥，打开记事本，又不知道从何说起。</p><h2 id="姥姥走了">姥姥走了</h2><p>去年12月，姥姥得了脑梗，慢慢地越来越严重，说不了话，吃不了饭，也不认得人了，只能靠流食维持生命。今年4月，姥姥走了。</p><p>去年10月，国庆放假回了一次家，那时姥姥还没生病。再回去就是12月，觉得好久没回去了，想要回去看看。回去后才知道姥姥已经住院一周了，家里一直没和我说，那时候还有些意识，慢慢听也知道再说些什么。慢慢地，越来越严重，也没了意识。看着姥姥的样子，很难受，后悔没能多陪陪姥姥。</p><p>上大学的时候，写了一篇博客，<a href="https://www.youngsay.cn/2021/06/17/grandma/">我与姥姥</a>，后来觉得太矫情，就删了，一直存在电脑本地。很多中国家庭，亲人间的感情都是很含蓄的，相互惦记却不懂得表达。我更是如此。长大后，和姥姥的见面次数越来越少。上高中后，一两周见一次，上大学后，几个月见一次。现在，再也见不到了。</p><p>姥姥操劳了一辈子，能帮子女做点什么就绝不闲着，有什么病能忍着就忍着，生怕自己给家人添麻烦。我的傻姥姥，为什么不多对自己好一点。</p><p>人都是会死的，生离死别都是人生的必经阶段，珍惜眼前人。没有什么东西是永恒的，如果有的话，应该就是“失去”吧。</p><h2 id="工作，工作">工作，工作</h2><p>去年7月，签了第一份正式合同。转眼间正式工作一年了，算上实习的话，已经工作两年了。今年3月，有一个更好的工作机会，所以提了离职。公司领导、导师都劝了我很久，但最终还是决定离职了。本以为交接一两周就可以走了，硬是拖了一个月。</p><p>我是去年4月在该公司实习，转正后就一直工作到了现在，后悔没有休息一段时间毕业旅行。当时需求比较多，排期都排满了，也就没有请假。还有就是觉得offer会不会毁约，也不是没有这种先例。现在觉得自己想太多了，我没有那么重要，工作没有那么重要。</p><p>在现在的公司也工作俩月了，感觉自己并不像刚工作时那么努力了，也可能是其他人要更努力。为啥会有这种感觉，我想有以下几个方面：</p><ol><li>公司离家有些远，现在的房子还是在原公司的时候租的，去现公司通勤要近一个小时。尤其是晚上下班，本来下班就晚，通勤时间再长，回到家后都十点、十一点了，会加剧疲惫感。</li><li>工作久了后心态的变化，刚开始工作时有求必应，更想证明、表现自己，现在有时候觉得没必要，难为自己干嘛。每天脑子里有两种声音，一种是要努力，要卷，工作前几年是职场红利期，要抓住机会。一种是差不多得了，何必呢，工作只是工作，做好本职工作，别出大问题就行了。</li><li>工作环境的变化，原公司更重视校招生，很多工作都是我来做的，对我也比较信任、重视，哪怕现在前同事还在经常问我一些问题。现公司人才更多，每个人都很卷，所以在这样一群人里就不会显得很特别，而且很多工作不会交给新人去做。</li></ol><p>我也经常在想，到底要怎么去工作，要努力工作，升职加薪？工作只是工作，不要太苛求自己？我也不知道要如何选择，想卷卷不动，想躺又躺不平，每天做仰卧起坐。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>打工人的一周</title>
      <link href="/2024/08/17/graduate/"/>
      <url>/2024/08/17/graduate/</url>
      
        <content type="html"><![CDATA[<p>不知不觉，正式工作一个半月了。</p><p>一开始工作，属于自己的时间更少了，一天平均十二多个小时呆在公司。晚上只有一点儿时间属于自己，沉浸在仅有的这点时间里，久久不肯入睡，真想静止在此刻。</p><p>很快，时间来到了凌晨一两点，真的要去睡觉了，因为明天还要工作。好像刚刚进入梦乡，窗外发出一声巨响，垃圾车在倾倒垃圾，那是在每天早晨七点。半睡半醒，八点多了，睁开了沉重的眼皮，迈着沉重的步伐，又要去上班了。上班，时间过得很慢，仿佛静止在此刻。</p><p>忙碌了五天，终于来到了周末。一周最开心的是周五晚上，它离周一那么远。短暂开心过后是无尽的空虚，周末无所事事，一觉睡到了中午，点个外卖，很快又到了晚上，再点个外卖。吃完这两顿外卖，一天就过去了，吃完这四顿外卖，周末就过去了，周一又来了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023年终总结</title>
      <link href="/2024/01/01/2023/"/>
      <url>/2024/01/01/2023/</url>
      
        <content type="html"><![CDATA[<p>一年又过去了，这是博客的第三个年终总结。</p><p>回看了前两年的年终总结，都是那样普通平常，而且前两年赶上了疫情，要么延期开学，要么封校，要么提前放假。与博友们的丰富多彩的生活相比，我就像白活了一样。</p><p>今年与往年有些不同，有了新的身份——实习生，活跃地点也由家和学校转移到了公司、出租屋。</p><p>1-4月，开启人生第一份实习，新鲜又陌生，期待又恐惧。</p><p>5月，担心挂科重回学校，4门必修课，大半学期没听课，最后考的还不错。所以说要活在当下，不要透支烦恼，你所想的种种麻烦大都不会发生，即便发生也都会顺利解决。</p><p>8-10月，秋招。秋招并不顺利，我想这是心态的问题，心态差，做什么都无济于事了。每天只是麻木的做着测评、笔试、面试，事后没有复盘、反思。看似很努力，其实只将一件事重复了一次又一次。</p><p>9月，大四开学，学校组织去外地实训，度过快乐、难忘的两周。一起去海边、聚餐、熬夜看鬼片，这才是大学生活。</p><p>11月，秋招不顺利，二次实习。</p><p>2024年了，虚岁24岁了，我不敢想。</p><p>还记得小学英语课上一个小插曲，老师问大家里的梦想是什么，我说想做policeman，老师听成了postman（其实postman还挺符合我的，现在听到postman，脑子里只有那个调试接口的软件），到现在还印象深刻。当时为什么说policeman，我好像没有过当警察的梦想，可能有过却被我忘了，可能是刚好想起这个单词。</p><p>上高中之后，我的目标渐渐清晰，我想做一个程序员，当时对码农概念还比较单一，只是想做出属于自己的网站，也不懂什么前端、后端，网上找到一些便宜甚至免费的虚拟主机，再找到一些现成的源码，上传上去，就能访问了。当时搭过各种博客（wordpress、emlog、typecho…）、影视网站、论坛（Flarunm、Discuz），甚至还有刷钻的网站。捣鼓这些玩意，就浪费了一天又一天的时间，一无所获却倾尽所有。</p><p>再后来才接触到前端，看到自己写的东西能展示在页面上，乐在其中。上了大学，又接触到了后端。从只会写一些简单的页面，到前后端交互，能写一些逻辑，不知道当时自己有多快乐。</p><p>到了大三、大四，有了就业的压力，好像已经忘了最初的目标。不再沉浸在编程的快乐，而是苦于八股文、算法、找工作…想想初学编程的时候，只是单纯喜欢，没有想过什么钱多钱少，什么大厂小厂，一个小功能实现了，我都能乐一天了。现在呢，想要更好的工作，想要更高的工资，永远不知足。</p><p>与过去的自己相比，我已经成长了。从搬源码，到写一些简单的静态页面，到能够前后端交互，虽然这些并不难，但对比以前的自己，已经进步了。从想做一个码农，到成为了一个码农，我的目标已经实现了。<strong>如果我是当初的我，我一定会非常高兴。即使我是现在的我，也没理由不高兴，对吗？</strong></p><p>2024，保持热爱，找寻自我。不再羡慕他人的精彩，为自己的成长喝彩。人生，才刚刚开始。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习时长1个月</title>
      <link href="/2023/12/17/shixi-again/"/>
      <url>/2023/12/17/shixi-again/</url>
      
        <content type="html"><![CDATA[<p>时间过得真快，上次发文说去实习了，转眼间实习一个多月了。</p><p>第一段实习是大三上学期学期末，疫情刚放开，进京不需要各种***了。趁着寒假，快乐地实习了一段时间。大三下学期开学后，实习就不那么快乐了。学校各种破事，还有四五门必修课和一堆水课，最后在学期末离职回学校了。现在想想其实应该再坚持一下，最坏不就是挂科嘛，工作都找不到，挂几科能怎样。</p><p>第一次找实习的过程还是挺顺利的，拿了两个offer，最后来了滴滴实习。当时在想，都说找工作难，这不也还行吗？现在看是运气好罢了。如果不是秋招，我还以为我前途一片光明呢。我的岗位是测开，但更多的是开发，接触到的测试很少。大多数公司测开还是以测试为主，所以秋招在面试时实习可能并没有带来多少加分。</p><p>秋招大寄，所以又来实习了。这次找实习也很顺利，为什么我的秋招不能这样顺利😭这次实习主要是测试，和第一段实习刚好互补了。希望能留下了或者春招能找到个满意的工作🙏。相比第一段实习，这次似乎从容了很多，一是心态上好了很多，因为除了实习，好像没有更好的选择了，不再care学校的一些破事了（最好别让我毕业，这样还能参加明年秋招🤬），二是对实习的环境也更熟悉，包括租房、出行之类的。第一次实习，对一切都很新鲜，周末经常和小伙伴们到处玩。现在小伙伴们都上岸了，只有我还在水里扑腾。周末没人一起玩，很多景点也都去过了，也就很少出去了，花更多时间好好学习吧，争取早日上岸。</p><p>现在想想，第一段实习还是有些遗憾的，有些事情本能做的更好一些。但没办法了，遗憾也是一种美，只能这样安慰自己了。希望这次实习不留遗憾。</p><img src="https://offer.youngsay.cn/blog/tigerBaby.jpg" style="height:350px" />]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在路上</title>
      <link href="/2023/11/05/ontheway/"/>
      <url>/2023/11/05/ontheway/</url>
      
        <content type="html"><![CDATA[<p>时隔一个月，又回家了。在家睡觉就是舒服、踏实，在学校每天入睡困难，一两点睡觉是常事，回到家躺上床没十分钟就睡着了，真是家到病除。</p><p>这次回家呆几天，收拾收拾东西，下周又要去实习了。之前博客说过，我今年年初去实习了。实习期间认识了不少小伙伴，这些小伙伴都拿到了大厂offer，有些还不止一个。只有我，整个秋招只拿到一个小厂offer。我也知道，不要只问收获，不问耕耘。我也知道，不要和他人比较，做好自己。我也知道，我不知道。</p><p>秋招可以说是结束了，金九银十过去了，目前只拿到一个小厂offer。我有不错的实习经历，有时也自认为有不错的能力（在面试顺利时），对这样的结果还是不甘心。所以我决定再去实习一段时间，期望能有更好的结果。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=5264287&auto=1&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>国庆节</title>
      <link href="/2023/10/03/national-day/"/>
      <url>/2023/10/03/national-day/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=2018577736&auto=1&height=66"></iframe><p>回家过节啦，学校离家近，不到3个小时就到家了。又是一年一度的中秋国庆节，不知道从什么时候开始，中秋和国庆凑到一起过了。在什么情况下3+7等于8？答：在完美的调休制度下3+7=8。3+7=调休？8：10。回家了，好好放松下，虽说在学校也没少放松。</p><p>姐姐也回家了，带着不到两岁的小神兽。神兽已经能走路、说话了，整天“妈妈”，“抱抱”，&amp;*%…，十分可爱。想起了我小时候，在我不到两岁的时候，我……我还没有记事😅。但我想应该也特别可爱，想哭就哭，想笑就笑，哭了有人哄，饿了有人喂。谁都有童年，谁都有过童年。就像歌词写道：“一代人终将老去 但总有人正年轻”。我今年22岁了，童年离我越来越远了。</p><p>上小学时，每个学期末都盼着拿到奖状，这样在拜年时特别有面，是亲戚口中的别人家的孩子。所以好好学习就是天大的事，期末考的好就开心，考的不好就难过。</p><p>上初中时，学习不如之前勤奋了，沉迷上了游戏，几乎所有腾讯的游戏都玩了个遍，成绩也不如之前好了。虽说成绩变差了，但也是中等偏上，因为小学成绩太好了，父母的期待变高了。所以得出一个完美的结论：小时候成绩不要太好😅！成绩忽高忽低，父母的批评、管束变多了，而且有了逆反心理，烦恼越来越多。有一次期末考的不好，印象特别深刻，大年三十，我还被教育去学习，不要玩手机，我委屈地哭了。</p><p>上高中时，烦恼也特别多，尤其是高三。高三年级主任模仿衡水高中作息，早上5点多就要起床跑圈、上早自习，晚上学到10点45才下晚自习。中间不允许回宿舍，只有晚上可以回去睡觉。就像一些企业要学习狼性文化，只模仿狼性文化的管理，薪资福利等却只字不提。真是取其糟粕，去其精华。还有好多烦恼，不想回忆了😒。</p><p>……</p><p>每个年龄段有每个年龄段的烦恼，且没有孰轻孰重，每个烦恼都很烦恼。现在我最大的烦恼就是找工作，希望毕业前能找到满意的工作。在我初中时，曾有过轻生的想法，现在想想可能不算什么，但当时对于一个十多岁的孩子就是天大的事。所以我特别讨厌某些盐吃多了的人，总是用自己的经历去否定他人。</p><p>活着就是要面临各种烦恼，烦恼多还是快乐多？我不知道。如果能自己选择是否来到这个世界，做何选择？我不知道。但我知道，我是最后一代。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>暑假第一天</title>
      <link href="/2023/06/30/relax-summer/"/>
      <url>/2023/06/30/relax-summer/</url>
      
        <content type="html"><![CDATA[<p>今天是放假第一天，刷刷短视频、看看综艺，一天就过去了。</p><p>这可能是比较放松的一个暑假，也是为数不多的一个暑假。考研er暑假得准备考研，甚至很多同学都没有回家，自然是没有暑假了。也有一些认识的、不打算就业的人正在大厂实习，自然也是没有暑假了。而我，这个时候再找份实习有点晚了，也快该秋招了，就呆家里刷刷算法、学学技术，过个舒服点的暑假吧。</p><p>昨天和两个高中同学一起回来的。一个是药学专业，打算考研，暑假在家备考；一个护理专业，过几天就去医院实习了，一实习就是8个月。和他们相比，似乎我是最轻松的。可眼看就要秋招了，什么都没准备好；就业压力这么大，失业人数那么多；互联网不景气，没有发展了……一大堆的问题接踵而至，我有啥可轻松的，我应该焦虑才对。</p><p>焦虑有用吗？因为焦虑，我能在秋招找到一份好工作吗？因为焦虑，互联网寒冬就能过去，就业岗位就能增加吗？显然不能，焦虑过度只能过度的焦虑。身边的人越来越焦虑，身边的人弦时刻紧绷着，我不要和他们一样。这个暑假，我要放轻松。轻松不是无所事事，虚度光阴，而是不焦虑，不强求。每天进步一点，哪怕只有一点，就很好。</p><p>九月份应该就要秋招了，可能会神仙打架，结果不尽人意，但秋招不行还有春招，春招不行还有春招补录。可能大厂已经人满为患，但大厂进不去还有中厂，中厂进不去还有小厂。最差也不过是没找到工作，这没什么大不了的。拿我的两个高中同学举例。一个药学专业，准备考研。考上了读研三年也不轻松，没考上就业或再战也不轻松。一个护理专业，每天早班晚班两班倒，放假少、睡不好，也不轻松。</p><p>资源有限，又有哪一行轻松呢？资质平平，又有哪个人轻松呢？这个暑假，我要放轻松。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的大三下学期</title>
      <link href="/2023/06/19/junior-year/"/>
      <url>/2023/06/19/junior-year/</url>
      
        <content type="html"><![CDATA[<p>又到毕业季，看着校园里学生们穿着毕业服到处拍着照片，各个学院举办着毕业典礼，随处都是离别的声音。时间很快，来年6月，就到我了。</p><p>2月27号，开学。这月底，大三下学期就结束了。这一学期，过得不太一样。</p><p>不一样的是，疫情走了，花开了，人多了。不再封校，不再做核酸，不再戴口罩……校园内外充满了朝气，图书馆不再隔位就坐，网课大学成为过去，商业街热闹了起来。劳动节和同学在学校附近玩了一天，很开心，三年了第一次去学校外面逛。好的大学，没有围墙。我们就这样被困了两年多。</p><p>不一样的是，这学期一半多时间都去实习了，体验了一把打工人的苦与乐。</p><p>通过实习，认识了一些同龄的实习生，每到周末可以一起出去玩。几个月内，去了天安门、故宫、八达岭长城等景点，度过了一个个难忘的周末。赶上了组里的团建，玩得也很开心。还恰逢公司周年庆，领了个周年文化衫，留作纪念……这些都很快乐，都是很难得的经历。</p><p>实习学业难平衡。一边要忙着实习的事，完成导师给的需求，一边要忙着学校的事，生怕考试挂科。每次学校有考试，都要早上五点起床，坐最早的高铁赶到学校，哪怕这样，还有一次晚点了。下班时间晚，没有个人生活。哪怕只是实习生，大部分时间也晚上9点走，感觉很少有天亮下班的时候。到家后也懒得学习，空虚地刷着手机，凌晨一两点渐渐入睡，一天就这样过去了……这些都是感到痛苦的事，也是离职的部分原因。</p><p>第一次离家这么久，1月多出来实习，过年回去了7天，然后直到6月才回去了一趟。在此之前，除了上学外，我几乎都是宅在家里。实习后才发现，以后能呆在家里的日子少之又少了。第一次租房，找房、搬家、交租退租，都是之前没经历过的。第一次上班，敲bug、摸鱼、与导师同事交往，由好奇到厌倦。最后，离职回学校了，体验为数不多的校园生活。</p><p>现在专业课都考完试了，本周再完成两个报告就没什么事了，真正的大学生活开始了。月底就放假回家了，一个学期又结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浑浑噩噩，一个月又过去了……</title>
      <link href="/2023/02/25/wake-up/"/>
      <url>/2023/02/25/wake-up/</url>
      
        <content type="html"><![CDATA[<p>浑浑噩噩，一个月又过去了……算上放假，已经实习50多天了。</p><p>工作日时间过的很快，8点多起床，刷牙洗脸挤公交，接近10点到公司，晚上早的话7点多下班，晚的话9点多下班，到家后刷刷手机，十二点、一点多入睡。一天就这样过去了。</p><p>周六日时间过得很慢，一天无所事事，刷刷手机，听听音乐，一遍又一遍地打开聊天软件，总在盼望，总在失望。一天就这样过去了。</p><p>实习就像一个分水岭。在实习前我虽然会放纵，但总的来说是处于学习的状态，并且有动力来学习充实自己。在实习后，我就彻底放飞自我，停止了学习。我会一遍一遍又一遍地自我安慰说上班时间少，工作很累了没时间学习，但我知道这是借口罢了。我知道这样下去很危险，但又懒惰地不想做出改变，我知道这样下去很危险……</p><p>下周一就要开学了，因为没有考研的准备，我选择继续实习。就在我整天浑浑噩噩的同时，醒着的人正在为实现自己的目标而努力。还有几个月就要秋招了，现在还不是做梦的时候。醒醒吧，别再沉浸在实习的美梦中了，也许，这本就是场噩梦。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2022年终总结</title>
      <link href="/2023/01/21/2022/"/>
      <url>/2023/01/21/2022/</url>
      
        <content type="html"><![CDATA[<p>时间过得真快啊，今天就是大年三十了，一年又这样过去了。</p><p>没什么可写的，但又想写点什么，毕竟好久没写记录自己的日常了，连”个站商店“也把我网站删除了。与其说是年终总结，不如说是流水账。</p><blockquote><p>《个站商店》给你发了单独的邮件，</p><p>hi 胖虎同学 ：</p><p>很抱歉，你的网站《胖虎同学》未能通过『个站商店』的审核，主要原因是内容非原创，多是技术类或者转载类，这类网站一般比较少人看。等你整改后，欢迎再来哦！</p><p>———— 祝生活愉快！ 邮件来自《个站商店》 2023-01-18 12:51:59</p></blockquote><p>今年也和往年一样，疫情，开学，放假……</p><p>2月28日，开学，开学没几天，疫情严重，在校上网课。5月25日，请假离校，提前过上暑假生活……</p><p>9月5号开始返校，已经是大三的老家伙了，因家里疫情被延期返校，13日回校。开学没几天，疫情严重，在校上网课。11月26日，请假离校，提前过上寒假生活……</p><p>除了开学放假外，今年有两件事可以说说。一件好事，一件坏事。</p><p>一件好事就是找到了实习。12月，我开始准备找实习的事，很幸运在12月30日拿到了实习offer。</p><p>1月5号，去公司报到，开始实习生活。1月21也就是今天，回家过年。这月只工作了11天，而这一周人都走的差不多了，基本上就是摸鱼，所以只工作了5天。</p><p>在这段时间里，感觉挺快乐，是我之前没有体会到的新生活。但也遇到些问题。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库：事务</title>
      <link href="/2022/11/29/MySQL-transaction/"/>
      <url>/2022/11/29/MySQL-transaction/</url>
      
        <content type="html"><![CDATA[<h3 id="事务的概念">事务的概念</h3><p><strong>事务</strong>是逻辑上的一组操作，能够将各SQL语句打包执行，<strong>要么全都执行，要么全都不执行</strong>。</p><p>想象我们在操作数据库时，数据库突然挂了，或者多个线程写入数据库时覆盖了彼此的更改……一系列操作都会导致数据库数据的不一致性，基于这些问题，数据库有了事务这一机制。</p><p>拿转账举例，A想要向B转账500元，该操作分为两步：</p><ul><li>A的账户减少500元</li><li>B的账户增加500元</li></ul><p>事务会将这两步打包在一起执行，要么全都执行，要么全都不执行。不会出现A的账户少了500，而B账户没有增加500的情况。</p><h3 id="如何使用事务">如何使用事务</h3><p>①开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br></pre></td></tr></table></figure><p>②执行多条SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- A账户减少500</span></span><br><span class="line">update accout <span class="keyword">set</span> money<span class="operator">=</span>money<span class="number">-500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="comment">-- B账户增加500</span></span><br><span class="line">update accout <span class="keyword">set</span> money<span class="operator">=</span>money<span class="operator">+</span><span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br></pre></td></tr></table></figure><p>③回滚或提交：rollback/commit;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>说明：rollback即是全部失败，commit即是全部成功。</p><h3 id="事务的特性">事务的特性</h3><p>关系型数据库（例如：<code>MySQL</code>、<code>SQL Server</code>、<code>Oracle</code> 等）事务都有四大特性：</p><p>原子性</p><p><strong>原子性</strong>：事务为执行的最小单元，不可再划分，要么全都执行，要么全都不执行。</p><p><strong>一致性</strong>：事务执行前后的数据要保持一致，结果不能出现异常。拿转账举例，转账前后两个账户的总额是不变的。</p><p><strong>持久性</strong>：事务带来的影响是持久的，不会因为数据库故障而产生任何影响。</p><p><strong>隔离性</strong>：并发访问数据库时，各事务之间的数据库是独立的，一个用户的事务不会被其他事务所干扰。</p><p>只有保证事务的原子性、持久性和隔离性，才能保证事务的一致性，所以说原子性、持久性和隔离性是事务的手段，一致性是目的。</p><h3 id="并发事务带来的问题">并发事务带来的问题</h3><p><strong>脏读</strong>：一个事务正在访问数据库并对数据进行修改，而该修改并未提交到数据库，另一个进行此时访问数据库读取数据。而这里访问的数据只是一个中间的数据，不一定是最终的结果，这里读到的数据就是一个“脏数据”，基于“脏数据”做出的操作可能是错误的。</p><p><strong>不可重复读</strong>：在一个事务内多次读取同一数据。在多次读取数据之间，另一个事务访问并修改了该数据，那么再次读取该数据时，发现与之前读取到的数据不一样。在一个事务内两次读取到的数据不一样，称为不可重复读。</p><p><strong>幻读</strong>:一个事务(T1)读取了几行数据，此时另一个事务(T2)插入了一些数据。事务T1再次读取该数据发现多了一些原本不存在的数据，这就是幻读。幻读是不可重复读的特殊情况，不可重复读强调的是数据的更改，幻读强调的是数据的增加。</p><h3 id="事务隔离级别">事务隔离级别</h3><p>SQL标准定义了四个隔离级别，隔离级别越高，并行化就越低。</p><ul><li>read-uncommitted：读取未提交。最低的隔离级别。允许读取未提交的数据，可能导致脏读、不可重复读、幻读。</li><li>read-committed：读取已提交。不能读取未提交的数据，即事务在修改数据时另一个事务不能执行读操作。可以防止脏读，不能避免不可重复读、幻读。</li><li>repeatable-read：可重复读。事务在读取数据时，其他事务不能修改正在读取的数据。因此对同一数据的多次修改结果都是一致的，可以防止脏读、不可重复读，不能避免幻读。</li><li>serializable：串行化。最高的隔离级别。各事务串行执行，相互之间不存在干扰，可以防止脏读、不可重复读和幻读。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库：索引</title>
      <link href="/2022/11/28/MySQL-index/"/>
      <url>/2022/11/28/MySQL-index/</url>
      
        <content type="html"><![CDATA[<p>索引是一种用于快速查找和检索数据的数据结构，类似于图书的目录，通过索引可以更快地找到对应的数据。</p><h3 id="索引的优缺点">索引的优缺点</h3><p>优点：</p><ul><li>提高了查找的效率</li><li>通过创建唯一性索引，确保了每一行数据的唯一性。</li></ul><p>缺点：</p><ul><li>索引使用物理文件存储，带来了空间的消耗。</li><li>创建和维护索引需要耗费时间。当数据发生更改时，索引也会动态修改，降低SQL执行效率。</li></ul><h3 id="索引SQL">索引SQL</h3><h4 id="查看索引">查看索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> 索引名 <span class="keyword">from</span> 表名(列名);</span><br></pre></td></tr></table></figure><p><img src="https://cos.youngsay.cn/blog/202211282118307.png" alt="image-20221128161811672"></p><h4 id="创建索引">创建索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名 <span class="keyword">on</span> 表名(列名);</span><br></pre></td></tr></table></figure><p><img src="https://cos.youngsay.cn/blog/202211282118347.png" alt="image-20221128162120786"></p><h4 id="删除索引">删除索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index 索引名 <span class="keyword">on</span> 表名</span><br></pre></td></tr></table></figure><p><img src="https://cos.youngsay.cn/blog/202211282118794.png" alt="image-20221128162440340"></p><h3 id="索引底层的数据结构">索引底层的数据结构</h3><p>索引是一种查找更快的数据结果。</p><p>数组和链表的查找都需要遍历，最先淘汰。</p><p>二叉搜索树最坏情况下会变成单支树，查找的时间复杂度变为O(N)，淘汰。</p><p>AVL树和红黑树使得左右子树高度相对平衡，但数据量太大时，树的高度过高，比较次数过多，即磁盘IO过多，淘汰。</p><p>哈希表查找的时间复杂度是O(1)，是不是可以作为索引的数据结构了呢？NO！哈希表不支持顺序和范围查找，而SQL要经常进行排序和</p><p>范围查询，淘汰。</p><p><strong>目前大多数数据库采用B树或B+树作为索引结构</strong>，在MySQL中，MyISAM 引擎和 InnoDB 引擎都是使用 B+树 作为索引结构。</p><p>B树称为多路平衡查找树，B+树是在B树基础上的变现，二者都是多叉平衡树。</p><h4 id="B树">B树</h4><p><img src="https://cos.youngsay.cn/blog/202211282118366.png" alt="image-20221128203706890"></p><h4 id="B-树">B+树</h4><p><img src="https://cos.youngsay.cn/blog/202211282118609.png" alt="image-20221128203611266"></p><h4 id="区别和联系">区别和联系</h4><ul><li><p>B树N个值，划分为N+1个结点；B+树N个值，划分为N个结点。</p></li><li><p>B树叶子结点相互独立;B+树叶子结点是链式结构，指向相邻结点。</p></li><li><p>B树每个结点既存放key，又存放data；B+树只有叶子结点既存放key，又存放data，其他结点只存key。</p></li><li><p>B树的查找过程是对每个关键字二分查找，可能没有到叶子结点就检索到了；B+树更加稳定，每次查找都是从根节点开始，到叶子结点结束。</p></li></ul><h4 id="索引为什么要用B-树">索引为什么要用B+树</h4><ul><li>每次都是从根节点到叶子结点，IO次数都差不多，查询效率稳定。</li><li>磁盘IO请求数少，查询速度快。</li><li>叶子结点采用链式存储结构，方便数据范围查询。</li><li>非叶子结点只存储key，占用空间小，甚至可以缓存到内存中。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket套接字网络编程</title>
      <link href="/2022/11/22/Java-Socket/"/>
      <url>/2022/11/22/Java-Socket/</url>
      
        <content type="html"><![CDATA[<p>网络编程使计算机不再是一个孤立的个体，而是一个互联的整体，通过网络编程，可实现主机各进程间的数据传输。网络编程的核心就是套接字socket。socket是由系统提供用于网络通信的技术，是基于TCP/IP协议的网络通信的基本操作单元。</p><p>socket主要分为三类：流套接字、数据报套接字、原始套接字。我们这里主要介绍前两种：</p><p><strong>流套接字</strong>：使用传输层TCP协议，提供面向连接、可靠的数据传输，面向字节流，有接收缓冲区和发送缓冲区，传输数据大小无限制。</p><p><strong>数据报套接字</strong>：使用传输层UDP协议，提供无连接、不可靠传输，面向数据报，只有接收缓冲区，传输大小受限，一次最多传输64K。</p><p>下面我们来看下Java中是如何使用socket来进行网络编程的。</p><h3 id="数据报套接字">数据报套接字</h3><p>Java数据报套接字编程有两个核心的类，<code>DatagramSocket</code>和<code>DatagramPacket</code>。</p><h4 id="两个核心类">两个核心类</h4><p><code>DatagramSocket</code>用于创建一个数据报套接字，用于发送和接收数据报。主要的构造方法如下：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>DatagramSocket()</td><td>创建一个UDP数据报套接字的Socket，绑定到本机任意一个随机端口 （一般用于客户端）</td></tr><tr><td>DatagramSocket(int port)</td><td>创建一个UDP数据报套接字的Socket，绑定到本机指定的端口（一般用 于服务端）</td></tr></tbody></table><p>常用方法如下：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void receive(DatagramPacket p)</td><td>从此套接字接收数据报（如果没有接收到数据报，会阻塞等待）</td></tr><tr><td>void send(DatagramPacket p)</td><td>从此套接字发送数据报包（不会阻塞等待，直接发送）</td></tr><tr><td>void close()</td><td>关闭此数据报套接字</td></tr></tbody></table><p>方法内的参数类型，就是我们要介绍的另一个核心类：<code>DatagramPacket</code>，该类表示数据报包，用于进程间的发送和接收。主要构造方法如下：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>DatagramPacket(byte[] buf, int length)</td><td>构造一个数据报包，<strong>用来接收</strong>，接收的数据保存在字节数组buf中，接收指定长度length</td></tr><tr><td>DatagramPacket(byte[] buf, int offset, int length, SocketAddress address)</td><td>构造一个数据报包，<strong>用来发送</strong>，发送的数据为字节数组buf，从offset到长度length，指明目标主机地址address，即IP和端口号</td></tr></tbody></table><p>常用方法如下：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>InetAddress getAddress()</td><td>获取该数据报发送或接收数据报的计算机的IP地址。</td></tr><tr><td>getSocketAddress()</td><td>获取该数据包发送到或正在从其发送的远程主机的SocketAddress（通常为IP地址+端口号）。</td></tr><tr><td>int getPort()</td><td>获取该数据报发送或接收数据报的端口号</td></tr><tr><td>byte[] getData()</td><td>获取数据报中的数据</td></tr><tr><td>int getLength()</td><td>返回要发送的数据的长度或接收到的数据的长度。</td></tr></tbody></table><h4 id="服务器端">服务器端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UdpServer</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个服务器端的数据报套接字，通常指明端口</span></span><br><span class="line">        socket = <span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;服务器已连接&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//1.接收请求</span></span><br><span class="line">                <span class="comment">//创建数据报包，用来接收客户端发来的请求</span></span><br><span class="line">                DatagramPacket reqPacket = <span class="keyword">new</span> DatagramPacket(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>],<span class="number">1024</span>);</span><br><span class="line">                <span class="comment">//接收数据报，没有数据传来时会阻塞等待</span></span><br><span class="line">                socket.receive(reqPacket);</span><br><span class="line">                <span class="comment">//★从接收的数据报中解析数据，构造成请求字符串</span></span><br><span class="line">                String req = <span class="keyword">new</span> String(reqPacket.getData(),<span class="number">0</span>,reqPacket.getLength(),<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">                <span class="comment">//2.构造响应</span></span><br><span class="line">                <span class="comment">//这里没有做处理，发来什么就返回什么。</span></span><br><span class="line">                String resp = process(req);</span><br><span class="line">                <span class="comment">//创建数据报包，用来发送响应</span></span><br><span class="line">                <span class="comment">//将响应字符串转换成字节数组，指明目的主机地址</span></span><br><span class="line">                DatagramPacket respPacket = <span class="keyword">new</span> DatagramPacket(resp.getBytes(),resp.getBytes().length,reqPacket.getSocketAddress());</span><br><span class="line">                <span class="comment">//3.发送响应</span></span><br><span class="line">                socket.send(respPacket);</span><br><span class="line">                <span class="comment">//4.打印日志</span></span><br><span class="line">                System.out.printf(<span class="string">&quot;[%s:%d] req: %s, resp: %s\n&quot;</span>,</span><br><span class="line">                        reqPacket.getAddress().toString(), reqPacket.getPort(), req, resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造响应</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">process</span><span class="params">(String req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> req;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">        UdpServer server = <span class="keyword">new</span> UdpServer(<span class="number">9090</span>);</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中★处要尤为注意：</p><p>构造请求字符串的第三个参数：请求字符串长度，是接收到的数据报的长度，reqPacket.getLength()。一定不要写成reqPacket.getData().length()，这个是字节数组的长度，该代码为1024。</p><h4 id="客户端">客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port; <span class="comment">//服务器端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ip; <span class="comment">//服务器ip地址</span></span><br><span class="line">    <span class="keyword">private</span> DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UdpClient</span><span class="params">(String ip,<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个客户端的数据报套接字，通常不指明端口</span></span><br><span class="line">        <span class="keyword">this</span>.socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//0.输入请求</span></span><br><span class="line">                System.out.println(<span class="string">&quot;请输入请求：&quot;</span>);</span><br><span class="line">                Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                String req = scanner.nextLine();</span><br><span class="line">                <span class="comment">//1.构造请求</span></span><br><span class="line">                <span class="comment">//创建一个数据报包，用来发送请求★</span></span><br><span class="line">                DatagramPacket reqPacket = <span class="keyword">new</span> DatagramPacket(req.getBytes(),req.getBytes().length,InetAddress.getByName(ip),port);</span><br><span class="line">                <span class="comment">//2.发送请求</span></span><br><span class="line">                socket.send(reqPacket);</span><br><span class="line">                <span class="comment">//创建接收数据包，用来接收服务器发来的响应</span></span><br><span class="line">                DatagramPacket respPacket = <span class="keyword">new</span> DatagramPacket(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>],<span class="number">1024</span>);</span><br><span class="line">                <span class="comment">//3.接收响应</span></span><br><span class="line">                socket.receive(respPacket);</span><br><span class="line">                String resp = <span class="keyword">new</span> String(respPacket.getData(),<span class="number">0</span>,respPacket.getLength());</span><br><span class="line">                System.out.println(<span class="string">&quot;resp：&quot;</span>+resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">        <span class="comment">//参数内为服务器的ip和端口号</span></span><br><span class="line">        UdpClient client = <span class="keyword">new</span> UdpClient(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9090</span>);</span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码中★处：</p><p>构造发送数据包时要传入目的主机的地址，InetAddress.getByName(ip),port分别为主机的ip地址和端口号，除了这样，还可以通过创建socketAddress类来指定主机地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SocketAddress socketAddress = <span class="keyword">new</span> InetSocketAddress(ip,port);</span><br><span class="line">DatagramPacket reqPacket = <span class="keyword">new</span> DatagramPacket(req.getBytes(),req.getBytes().length,socketAddress);</span><br></pre></td></tr></table></figure><h3 id="流套接字">流套接字</h3><p>Java流套接字编程也有两个核心的类，<code>ServerSocket</code>和<code>Socket</code>。</p><h4 id="两个核心类-2">两个核心类</h4><p>ServerSockert通常用于创建一个服务器端的流套接字，常用构造方法如下：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>ServerSocket(int port)</td><td>创建一个服务端流套接字Socket，并绑定到指定端口</td></tr></tbody></table><p>常用方法如下：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Socket accept()</td><td>监听要连接此客户端的套接字，有客户端连接后，返回一个服务端Socket对象，并基于该Socket建立与客户端的连接，否则阻塞等待</td></tr><tr><td>void close()</td><td>关闭此套接字</td></tr></tbody></table><p>Socket通常用于常见一个客户端的流套接字，常用构造方法如下：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Socket(String host, int port)</td><td>创建一个客户端流套接字Socket，并与对应IP的主机上，对应端口的进程建立连接</td></tr></tbody></table><p>常用方法如下：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>InetAddress getInetAddress()</td><td>返回套接字所连接的地址</td></tr><tr><td>InputStream getInputStream()</td><td>返回此套接字的输入流</td></tr><tr><td>OutputStream getOutputStream()</td><td>返回此套接字的输出流</td></tr></tbody></table><h4 id="服务器端-2">服务器端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TcpServer</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个服务器套接字，指定服务器端口号</span></span><br><span class="line">        server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//监听客户端并建立连接</span></span><br><span class="line">            Socket client = server.accept();</span><br><span class="line">            processConnection(client);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConnection</span><span class="params">(Socket client)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%s,%d]客户端建立连接\n&quot;</span>,client.getInetAddress(),client.getPort());</span><br><span class="line">        <span class="comment">//创建输入输出流，输入流用来接收客户端传来的数据，输出流用来将数据发给客户端</span></span><br><span class="line">        <span class="keyword">try</span>(InputStream inputStream = client.getInputStream())&#123;</span><br><span class="line">            <span class="keyword">try</span>(OutputStream outputStream = client.getOutputStream())&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    Scanner scanner = <span class="keyword">new</span> Scanner(inputStream);</span><br><span class="line">                    <span class="keyword">if</span>(!scanner.hasNext())&#123;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;[%s,%d]客户端断开连接&quot;</span>,client.getInetAddress(),client.getPort());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//1.接收请求</span></span><br><span class="line">                    String req = scanner.nextLine();</span><br><span class="line">                    <span class="comment">//2.构造响应</span></span><br><span class="line">                    String resp = process(req);</span><br><span class="line">                    <span class="comment">//3.返回响应</span></span><br><span class="line">                    PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(outputStream);</span><br><span class="line">                    <span class="comment">//★调用println方法，不能是print和write</span></span><br><span class="line">                    printWriter.println(resp);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                    System.out.printf(<span class="string">&quot;req:%s,resp:%s\n&quot;</span>,req,resp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//★关闭连接</span></span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">process</span><span class="params">(String req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> req;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        TcpServer server = <span class="keyword">new</span> TcpServer(<span class="number">9090</span>);</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>★处要尤为注意：</p><ol><li><p>调用的是println方法，不是print也不是write。println方法会为写入的数据后面添加上换行符，而print和write不会。客户端接收数据时是以换行符为结束来获取数据。如果找不到换行符，将一直不能接收响应，造成阻塞。同理，客户端发送请求时也要使用println方法，否则服务器也会接收不到请求而一直阻塞。</p></li><li><p>大家可能会想，为什么这里的client要关闭连接，而server和之前的数据报套接字都不需要关闭连接。关闭连接的前提是不再使用了，对于UDP和ServerSocket，它们是贯穿程序始终的，而这里的client，也就是Socket，每个连接都有一个Socket，断开连接也就不再需要这个Socket了，需要进行释放。</p></li></ol><h4 id="客户端-2">客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    Socket client = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TcpClient</span><span class="params">(String ip,<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">        <span class="comment">//★创建客户端套接字，并将其连接到指定IP地址的指定端口号。</span></span><br><span class="line">        <span class="keyword">this</span>.client = <span class="keyword">new</span> Socket(ip,port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(InputStream inputStream = client.getInputStream()) &#123;</span><br><span class="line">            <span class="keyword">try</span>(OutputStream outputStream = client.getOutputStream())&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//1.构造请求</span></span><br><span class="line">                    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                    String req = scanner.next();</span><br><span class="line">                    <span class="comment">//2.发送请求</span></span><br><span class="line">                    PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(outputStream);</span><br><span class="line">                    <span class="comment">//★调用println方法，不能是print和write</span></span><br><span class="line">                    printWriter.println(req);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                    <span class="comment">//3.接收响应</span></span><br><span class="line">                    Scanner respScan = <span class="keyword">new</span> Scanner(inputStream);</span><br><span class="line">                    String resp = respScan.next();</span><br><span class="line">                    System.out.println(<span class="string">&quot;resp:&quot;</span>+resp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        TcpClient client = <span class="keyword">new</span> TcpClient(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9090</span>);</span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题">问题</h4><p>流套接字的客户端服务器通信还存在一个问题，只能满足一个客户端的通信。其他客户端尝试与服务器连接时，会发生阻塞。观察服务器代码中下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//监听客户端并建立连接</span></span><br><span class="line">        Socket client = server.accept();</span><br><span class="line">        processConnection(client);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端1与服务器建立连接后，服务器线程执行processConnection代码中的操作，代码中存在while循环，不断地接收客户端1发来的请求，构造响应，返回响应……此时客户端2想要与服务器通信，而服务器线程正在processConnection的while循环中等待客户端1的请求，导致服务器不能与客户端2建立连接。</p><p>TCP每次都需要建立连接，只能支持一对一，也就是端到端的通信。就像打电话一样，同一时间只能接听一个电话，当正在通话时，别的电话是打不进来的。而UDP是无连接的，因此支持一对一、一对多、多对多交互通信。所以我们在数据报套接字时没有出现该问题。</p><p>解决办法也很简单，因为processConnection中的循环未结束导致服务器不能执行accept操作，所以单独创建一个新的线程来完成processConnection操作即可。我们可以用多线程或线程池来解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        Socket client = server.accept();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                processConnection(client);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其他代码不变，只需改动start方法内的代码，为processConnection操作创建新的线程。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java文件和IO流</title>
      <link href="/2022/11/17/Java-IO/"/>
      <url>/2022/11/17/Java-IO/</url>
      
        <content type="html"><![CDATA[<h3 id="文件基础操作">文件基础操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个hello的目录</span></span><br><span class="line">    File dir = <span class="keyword">new</span> File(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在hello目录下创建一个hello.txt文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(dir+<span class="string">&quot;/hello.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到文件名</span></span><br><span class="line">    System.out.println(file.getName());</span><br><span class="line">    <span class="comment">//得到文件的绝对路径</span></span><br><span class="line">    System.out.println(file.getAbsolutePath());</span><br><span class="line">    <span class="comment">//得到文件的规范路径，当路径不规范时，会进行优化(去掉.)</span></span><br><span class="line">    System.out.println(file.getCanonicalPath());</span><br><span class="line">    <span class="comment">//得到父目录名</span></span><br><span class="line">    System.out.println(file.getParent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体详见：<a href="https://docs.oracle.com/javase/8/docs/api/">File (Java Platform SE 8 ) (oracle.com)</a></p><h3 id="IO流">IO流</h3><p>IO即输入和输出（Input、Output），输入就是将数据读入到内存，输出就是将数据输出到外部存储（如文件、数据库）。数据的输入输出就像水流一样，因此成为IO流。</p><p>IO流的处理方式可分为两种：字节流和字符流。Java中针对IO流的处理有很多类，但最基本的只有4个抽象类。<code>InputStream</code>、<code>OutputStream</code>、<code>Reader</code>、<code>Writer</code>，前两个是对字节流的输入输出，后两个是对字符流的输入输出。下面我们拿普通文件的读写举例，介绍它们的基本操作。</p><h4 id="字节流">字节流</h4><h5 id="InputStream">InputStream</h5><p>用于对文件进行读操作，构造方法内可以是一个文件类型的参数，也可以是一个文件路径(字符串)的参数。</p><p>常用方法：</p><p><code>read()</code> ：一次读取一字节，返回输入流中下一个字节的数据。返回的值介于 0 到 255 之间。返回 <code>-1</code> ，表示读到文件的末尾，读取结束。</p><p><code>read(byte b[ ])</code> : 一次读取多个字节，将输入流字节存储到数组b，返回结果为读取字节长度。返回-1，表示读到文件的末尾，读取结束。</p><p><code>read(byte b[], int off, int len)</code> ：在<code>read(byte b[ ])</code> 方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code> 参数（要读取的最大字节数）。</p><p><code>close()</code> ：关闭输入流释放相关的系统资源。</p><ul><li>一次读取一字节</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readOne</span><span class="params">(File file,FileInputStream fileInputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> read = fileInputStream.read();</span><br><span class="line">            <span class="keyword">if</span>(read==-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一次读取多个字节</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readByte</span><span class="params">(File file,FileInputStream inputStream)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">            <span class="keyword">if</span>(read==-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; read; i++) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)bytes[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="OutputStream">OutputStream</h5><p>用于对文件进行写操作，构造方法内可以是一个文件类型的参数，也可以是一个文件路径(字符串)的参数，同时可以指定第二个参数表示是否追加写入(是否清空之前的内容)，true表示追加写入，默认为false。</p><p>在写操作时数据暂时放在缓存区，只有缓存区满后才会真正写入到设备，所以别忘了调用<code>fulsh()</code>，防止数据没有写入设备。</p><p>常用方法：</p><p><code>write(int b)</code> ：将特定字节写入输出流。</p><p><code>write(byte b[ ])</code> : 将数组<code>b</code> 写入到输出流，等价于 <code>write(b, 0, b.length)</code> 。</p><p><code>write(byte[] b, int off, int len)</code> : 在<code>write(byte b[ ])</code> 方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code> 参数（要读取的最大字节数）。</p><p><code>flush()</code> ：刷新此输出流并强制写出所有缓冲的输出字节。</p><p><code>close()</code> ：关闭输出流释放相关的系统资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeOne</span><span class="params">(File file, FileOutputStream outputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        outputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        outputStream.write(<span class="number">103</span>);</span><br><span class="line">        outputStream.write(<span class="number">104</span>);</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符流">字符流</h4><p>字节是电脑中存储信息的基本单位，那为什么还需要字符流呢？</p><p>当存储信息中有中文时，以字节流来读取会出现乱码。字节流更适用于音频、图片等类型文件，当文件中涉及字符类型时，使用字符流更好。字符流默认编码是<code>unicode</code>。</p><p>常见的字符编码：<code>utf8</code> :英文占 1 字节，中文占 3 字节，<code>unicode</code>：任何字符都占 2 个字节，<code>gbk</code>：英文占 1 字节，中文占 2 字节。</p><h5 id="Reader">Reader</h5><p>常用方法：</p><p><code>read()</code> : 从输入流读取一个字符。</p><p><code>read(char[] cbuf)</code> : 从输入流中读取一些字符，并将它们存储到字符数组 <code>cbuf</code>中，等价于 <code>read(cbuf, 0, cbuf.length)</code> 。</p><p><code>read(char[] cbuf, int off, int len)</code> ：在<code>read(char[] cbuf)</code> 方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code> 参数（要读取的最大字节数）。</p><p><code>close()</code> : 关闭输入流并释放相关的系统资源。</p><ul><li>一次读取一个字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readOne</span><span class="params">(File file,Reader reader)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        reader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> read = reader.read();</span><br><span class="line">            <span class="keyword">if</span>(read==-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一次读取多个字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readCharacter</span><span class="params">(File file,Reader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        reader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        <span class="keyword">char</span>[] buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> read = reader.read(buffer);</span><br><span class="line">            <span class="keyword">if</span> (read==-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String s = <span class="keyword">new</span> String(buffer,<span class="number">0</span>,read);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Writer">Writer</h5><p>常用方法：</p><p><code>write(int c)</code> : 写入单个字符。</p><p><code>write(char[] cbuf)</code> ：写入字符数组 <code>cbuf</code>，等价于<code>write(cbuf, 0, cbuf.length)</code>。</p><p><code>write(char[] cbuf, int off, int len)</code> ：在<code>write(char[] cbuf)</code> 方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code> 参数（要读取的最大字节数）。</p><p><code>write(String str)</code> ：写入字符串，等价于 <code>write(str, 0, str.length())</code> 。</p><p><code>write(String str, int off, int len)</code> ：在<code>write(String str)</code> 方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code> 参数（要读取的最大字节数）。</p><p><code>append(CharSequence csq)</code> ：将指定的字符序列附加到指定的 <code>Writer</code> 对象并返回该 <code>Writer</code> 对象。</p><p><code>append(char c)</code> ：将指定的字符附加到指定的 <code>Writer</code> 对象并返回该 <code>Writer</code> 对象。</p><p><code>flush()</code> ：刷新此输出流并强制写出所有缓冲的输出字符。</p><p><code>close()</code>:关闭输出流释放相关的系统资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeOne</span><span class="params">(File file,Writer writer)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        writer = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">        writer.write(<span class="string">&quot;我是panghutx&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程实例：线程池</title>
      <link href="/2022/11/14/Java-ThreadPool/"/>
      <url>/2022/11/14/Java-ThreadPool/</url>
      
        <content type="html"><![CDATA[<p>顾名思义，线程池就是存放线程的池子。直接用线程不就好了吗，为什么还需要线程池呢？</p><p>相比进程，线程已经轻量很多了，创建和销毁线程消耗的资源会少很多，但终究还是有消耗的。为了进一步降低消耗，我们需要用到线程池。需要用到线程时不用申请，直接从线程池中取，用完之后也不用销毁，再放进线程池。</p><p>标准库中的线程池（简化版本)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    pool.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟实现一个简化版本的线程池：</p><ol><li>描述任务：直接用Runnable接口即可</li><li>组织任务：用到阻塞队列</li><li>描述工作线程：创建Worker类继承Thread，重写run方法，从阻塞队列中取任务，然后执行任务</li><li>组织工作线程：实例化工作线程，加入到线程池，启动线程</li><li>提交任务：往线程池中添加任务（具体是将任务添加到阻塞队列）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreatPool</span> </span>&#123;</span><br><span class="line">    <span class="comment">//描述一个任务</span></span><br><span class="line">    <span class="comment">//组织一个任务</span></span><br><span class="line">    BlockingDeque&lt;Runnable&gt; queue = <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;();</span><br><span class="line">    <span class="comment">//描述一个线程</span></span><br><span class="line">    <span class="comment">//线程是用来执行任务的，而任务都存放在队列中</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="comment">//通过构造方法能够拿到外面的queue</span></span><br><span class="line">        <span class="keyword">private</span> BlockingDeque&lt;Runnable&gt; queue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(BlockingDeque&lt;Runnable&gt; queue)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.queue = queue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//从queue中取任务，然后执行任务</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runnable runnable = queue.take();</span><br><span class="line">                    runnable.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//组织线程,创建线程</span></span><br><span class="line">    List&lt;Worker&gt; workers = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreatPool</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//创建线程，存放到线程池,执行线程</span></span><br><span class="line">            Worker worker = <span class="keyword">new</span> Worker(queue);</span><br><span class="line">            workers.add(worker);</span><br><span class="line">            worker.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提交任务到线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sumbit</span><span class="params">(Runnable runnable)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        queue.put(runnable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ThreatPool pool = <span class="keyword">new</span> ThreatPool(<span class="number">10</span>);<span class="comment">//线程数10</span></span><br><span class="line">        <span class="comment">//执行1000个任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> workId = i;</span><br><span class="line">            pool.sumbit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;任务:&quot;</span>+workId+Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程实例：定时器</title>
      <link href="/2022/11/14/Java-Timer/"/>
      <url>/2022/11/14/Java-Timer/</url>
      
        <content type="html"><![CDATA[<p>定时器是实际开发中常用的组件，例如文章的定时发布，双11的准点抢购活动等。</p><p>下面我们来看一下Java标准库中的定时器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">    timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该定时器会在3秒之后输出“hello”。创建一个定时器需要用到Timer类中的核心方法schedule，该方法内有两个参数，一个表示要执行的任务，一个表示任务在多长时间后执行。</p><p>认识了标准库中的定时器后，我们可以自己来模拟实现一个定时器。</p><p>首先，描述一个任务。创建一个MyTask类，类中有两个属性：一个是执行的任务，一个是任务执行时间。这两个属性类似于标准库schedule方法内的两个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">MyTask</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//具体要干啥</span></span><br><span class="line">    <span class="keyword">private</span> Runnable runnable;</span><br><span class="line">    <span class="comment">//啥时候开始干</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(Runnable runnable,<span class="keyword">long</span> dalay)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runnable = runnable;</span><br><span class="line">        <span class="keyword">this</span>.time=System.currentTimeMillis()+dalay;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        runnable.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(MyTask o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//时间小的排在前面</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (<span class="keyword">this</span>.time-o.time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，组织一个任务类。如何组织任务类呢，我们这里用到<strong>优先级阻塞队列</strong>。每个任务的执行时间（指的是在多长时间后执行）不同，根据时间大小来排序，进而优先执行队头任务，因此需要优先级队列。</p><p>最后，我们还需要一个线程不断的去扫描到了时间的任务，然后执行这个任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTimer</span></span>&#123;</span><br><span class="line">    <span class="comment">//组织一个任务</span></span><br><span class="line">    <span class="keyword">private</span> PriorityBlockingQueue&lt;MyTask&gt; queue = <span class="keyword">new</span> PriorityBlockingQueue&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Object locker = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(Runnable runnable,<span class="keyword">long</span> delay)</span></span>&#123;</span><br><span class="line">        MyTask myTask = <span class="keyword">new</span> MyTask(runnable,delay);</span><br><span class="line">        queue.put(myTask);</span><br><span class="line">        <span class="keyword">synchronized</span> (locker)&#123;</span><br><span class="line">            locker.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行到时间的任务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTimer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//取队首元素</span></span><br><span class="line">                    MyTask task = queue.take();</span><br><span class="line">                    <span class="keyword">long</span> time=System.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">if</span>(time&lt;task.getTime())&#123;</span><br><span class="line">                        <span class="comment">//时间还没到</span></span><br><span class="line">                        queue.put(task);</span><br><span class="line">                        <span class="keyword">synchronized</span> (locker)&#123;</span><br><span class="line">                            locker.wait(task.getTime()-time);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//到时间了，执行这个任务</span></span><br><span class="line">                        task.run();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟一个定时器，总共分三步。第一步，<s>把冰箱打开</s>描述一个任务，即要执行的任务和任务多长时间后开始执行。第二步，组织一个任务，这里用到了优先级阻塞队列。第三步，利用一个线程扫描任务，执行到时间的任务。</p><p>下面有两个问题需要注意。</p><ol><li>任务类要放进优先级阻塞队列中，优先级阻塞队列根据时间先后进行排序。因此我们的任务类要实现<code>Comparable&lt;MyTask&gt;</code>接口，然后重写比较规则。</li><li>线程扫描任务，会从队头取元素，判断是否到时间了，如果没到，再放回队列。接着继续取元素……如果不加限制，它一直不停的扫描队首元素, 看看是否能执行这个任务，这样会大量消耗CPU。因此我们利用wait来使这个线程等待，时间到后再唤醒。此外当新加入一个任务后我们也需要用notify来唤醒扫描线程，因为可能该任务的时间更小，优先级更高，所以需要重新扫描任务队列。（这也就决定了必须用wait，而不能用sleep，因为sleep不能中途唤醒）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程实例：阻塞队列</title>
      <link href="/2022/11/14/Java-BlockingQueue/"/>
      <url>/2022/11/14/Java-BlockingQueue/</url>
      
        <content type="html"><![CDATA[<p>阻塞队列是一种具有阻塞功能的队列，满足队列“先进先出”的特点，是一种线性安全的数据结构。当队列为空时，执行出队操作会进行阻塞，直到队列中有元素为止；当队列已经满了，执行入堆操作会进行阻塞，知道队列有空间为止。</p><p>阻塞队列的一个典型应用常见就是“生产者消费者”模型。毫无疑问，该模型有两个主体：生产者和消费者。生产者线程负责生产产品，将生产好的产品放进阻塞队列。消费者线程负责消费产品，直接从阻塞队列取产品。</p><p>生产者消费者模型具有解耦、平衡速度差异的特点。</p><p>解耦：生产者无需关注是谁在消费产品，消费了多少产品，只需关注生产操作即可；消费者无需关注是谁在生产产品，生产了多少产品，只需关注消费操作即可。</p><p>平衡速度差异：设想11.11，大量用户向服务器发送了大量的支付请求，一次性将这些请求交给服务器处理，服务器可能会hole不住，因此将这些请求都放进阻塞队列，消费者线程从阻塞队列一个一个地来处理请求就好了。这样就起到了“削峰填谷”的作用，平衡了生产者和消费者之间的速度差异。</p><h3 id="标准库中的阻塞队列：">标准库中的阻塞队列：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    BlockingDeque&lt;String&gt; queue = <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;();</span><br><span class="line">    queue.put(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    String s = queue.take();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BlockingQueue 是一个接口. 真正实现的类是 LinkedBlockingQueue.</li><li>put 方法用于阻塞式的入队列, take 用于阻塞式的出队列.</li><li>BlockingQueue 也有 offer, poll, peek 等方法, 但是这些方法不带有阻塞特性</li></ul><h3 id="模拟实现阻塞队列：">模拟实现阻塞队列：</h3><ul><li>循环队列+阻塞等待</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] elem = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Object locker = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> val)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (locker)&#123;</span><br><span class="line">            <span class="comment">//队列满了，阻塞等待</span></span><br><span class="line">            <span class="keyword">if</span>(size==elem.length)&#123;</span><br><span class="line">                locker.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//一轮循环，让尾指针指向数组下标为0的位置</span></span><br><span class="line">            <span class="keyword">if</span>(tail==elem.length)&#123;</span><br><span class="line">                tail=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            elem[tail++]=val;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="comment">//唤醒消费者线程的堵塞等待</span></span><br><span class="line">            locker.notify();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (locker)&#123;</span><br><span class="line">            <span class="comment">//队列空了，阻塞等待</span></span><br><span class="line">            <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line">                locker.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(head==elem.length)&#123;</span><br><span class="line">                head=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ret = elem[head];</span><br><span class="line">            head++;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="comment">//唤醒生产者线程的堵塞等待</span></span><br><span class="line">            locker.notify();</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyQueue queue = <span class="keyword">new</span> MyQueue();</span><br><span class="line">        <span class="comment">//生产者线程</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    queue.put(i);</span><br><span class="line">                    System.out.println(<span class="string">&quot;生产了：&quot;</span>+i);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//消费者线程</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> take = queue.take();</span><br><span class="line">                    System.out.println(<span class="string">&quot;消费了：&quot;</span>+take);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程的创建及状态</title>
      <link href="/2022/10/12/Java-Thread/"/>
      <url>/2022/10/12/Java-Thread/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是线程">什么是线程</h2><p>在计算机中，一个任务就是一个进程。打开任务管理器，我们可以看见多个进程。如浏览器，QQ。线程是进程的再划分，是进程的一部分。一个进程可以只有一个线程（主线程），也可以有多个线程。拿浏览器举例，打开浏览器的多个网页，一个网页在播放音乐，一个网页在播放视频，一个网页在浏览博客。每个网页有不同的分工，这些浏览器的每个子任务就是一个线程。</p><p>线程是更轻量的进程，创建一个线程的消耗要低于创建一个进程，且同一进程的不同线程之间可以共享资源，效率更高。通过多线程可以更好地实现并发编程。</p><p><strong>进程vs线程</strong></p><ul><li>进程包含线程，进程是线程的一部分，一个进程中至少包含一个线程。</li><li>进程与进程之间不能共享资源，同一个进程的线程之间可以共享资源。</li><li>进程是系统分配资源的最小单位，线程是系统调度执行的最小单位。</li><li>多进程稳定性高于多线程，一个进程的崩溃不会影响其他线程；多线程下一个线程的崩溃可能影响该进程。</li></ul><h2 id="创建线程">创建线程</h2><p>一个线程至少包含一个进程，<code>main()</code>就是一个线程，我们还可以在里面创建多个线程。</p><p><strong>1.继承<code>Thread</code>类,重写<code>run()</code>方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start new thread!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.创建<code>Thread</code>实例，实现<code>Runnable</code>接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start new thread!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.其他变形</strong></p><ul><li>匿名内部类创建Thread子类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;使用匿名类创建 Thread 子类对象&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>匿名内部类创建Runnable子类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;使用匿名类创建 Runnable 子类对象&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>lambda表达式创建Thread子类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread t4 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;使用匿名类创建 Thread 子类对象&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Thread方法"><code>Thread</code>方法</h2><p><strong>常见构造方法</strong></p><table><thead><tr><th>构造方法</th></tr></thead><tbody><tr><td><code>Thread()</code>  分配一个新的 <code>Thread</code>对象。</td></tr><tr><td><code>Thread(Runnable target)</code>  分配一个新的 <code>Thread</code>对象。</td></tr><tr><td><code>Thread(Runnable target, String name)</code>  分配一个新的 <code>Thread</code>对象，name为新线程的名字。</td></tr><tr><td><code>Thread(String name)</code>  分配一个新的 <code>Thread</code>对象，name为新线程的名字。</td></tr></tbody></table><p><strong>启动一个线程.start()</strong></p><p>Thread对象对创建后，并没有启动线程，执行该指令后才会真正创建一个线程。即内核中创建了一个内存控制块PCB。</p><p><strong>中断一个线程</strong></p><p>方法1：自定义变量作为标志位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义变量flag作为标志位</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(!flag)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程正在运行&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    t.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>); <span class="comment">//使线程进入休眠状态</span></span><br><span class="line">    flag = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：<code>interrupted()</code>方法中断线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程运行中&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Thread.currentThread().isInterrupted()</code>获取当前线程是否被中断；<code>interrupted()</code>向线程发出中断请求。</p><p>Thread收到通知方式有两种：①当线程因wait/sleep/join等方法处于堵塞状态时，以 <code>InterruptedException </code>异常的形式通知。②<code>isInterrupted()</code>标志位置为true.</p><p><strong>等待一个线程.join()</strong></p><p>执行该指令，会使该线程执行结束后再执行下一线程，即将并发编程变成了串行。比如用某软件下载一部电影，可以边下载边观看，当执行该指令后，就要等下载完后再看了~</p><p><strong>休眠一个线程sleep()</strong></p><p>让线程进入休眠状态，进入休眠状态的指令，他的属性<code>isAlive()</code>为Timed Waiting。线程状态会稍后介绍到。</p><h2 id="线程状态">线程状态</h2><p>注意，这里我们说的是java线程的六种状态。利用<code>isAlive</code>属性可以观察线程的状态，线程有以下6种状态：</p><ul><li>New：新创建的线程，但未执行<code>start()</code>，线程没有存活；</li><li>Runnable：运行中的线程，正在执行<code>run()</code>方法的Java代码；</li><li>Blocked：运行中的线程，因为某些操作被阻塞而挂起；</li><li>Waiting：运行中的线程，因为某些操作在等待中，如执行<code>wait()</code>方法；</li><li>Timed Waiting：运行中的线程，因为执行<code>sleep()</code>方法正在计时等待；</li><li>Terminated：线程结束，线程没有存活。</li></ul><h2 id="线程状态转换">线程状态转换</h2><p>线程被创建出来，处于New状态。调用start方法后，处于Runnable状态。当线程获取不到锁时，处于Blocked状态，直到获取到锁后进入Runnable状态。运行的线程调用wait或join方法后会进入Waiting状态，直到唤醒通知后进入Runnable状态。调用带有超时参数的方法后会进入Timed Waiting状态，直到时间到后进入Runnable状态。运行的线程执行完run方法或出现异常后进入Terminated状态。</p><p>与操作系统中的进程状态不同，java没有就绪态。操作系统中，一个进程调用start后并没有直接运行，而是进入就绪态，当获取到cpu时间片后进入运行态。我们可以认为在java中，就绪态和运行态同属于Runnable。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全及解决方案</title>
      <link href="/2022/09/26/Thread-safe/"/>
      <url>/2022/09/26/Thread-safe/</url>
      
        <content type="html"><![CDATA[<p>安全，已经成为非常重要的社会话题。所谓“安全第一”，“安全无小事”（手动滑稽），同样，多线程中，线程安全也是非常重要的话题。那么是什么原因造成了线程不安全，又如何解决线程不安全呢？</p><h3 id="造成线程不安全的原因">造成线程不安全的原因</h3><ol><li><p>线程的调度</p><p>各线程之间是抢占式执行的，线程的执行顺序是随机的，因此可能会产生各种问题。现在最流行什么？做核酸！如果做核酸是抢占式的，做核酸没有一个顺序，做核酸顺序完全靠运气，这能安全吗！</p></li><li><p>多线程同时修改同一变量</p><p>如果是多线程同时读取同一变量，不涉及修改的操作，是线程安全的。但如果多线程同时修改同一变量，这能不乱吗？想当年家里买了一台电脑，我姐姐要用电脑玩QQ炫舞，我要用电脑玩穿越火线，你争我抢，打的是不可开交。</p></li><li><p>操作指令不是原子的</p><p>例如一条加法指令，其实要执行三条指令，load、add、save，先将内存中的变量加载到寄存器，在寄存器中完成加法操作，再将结果写会内存中。假设线程1完成了load、add操作，线程2完成了load、add、save操作，当线程1再去执行save操作，便将线程2的操作覆盖了，线程2说：线程1真是一个猪队友。</p></li><li><p>内存可见性</p><p>线程1循环进行读操作，线程2看心情进行修改操作。我们知道，读操作是将内存变量加载到寄存器，然后读取寄存器。而线程1循环加载内存中的值到寄存器，线程2又迟迟不修改，线程1说：你当我傻吗？于是线程1干脆去读取寄存器了，这就是编译器的优化。拿做核酸举例，最初是刮嗓子，但日复一日，现在有些已经是刮舌头了，这难道是疫情的优化？大部分情况下是安全的，但也可能会翻车。线程1循环读操作，线程2突然心情不好，很快啊，修改了内存中的值。而线程1却绕过了内存，从寄存器读值，这能安全吗！</p></li></ol><h3 id="解决方案">解决方案</h3><p>针对原因1，线程的调度就是抢占式执行的，我们无能为力。针对原因2，我们可以通过调整代码结构，使不同线程操作不同变量，但我这菜鸡技术，既然能写出一个bug，就能写出无数个bug，一顿调整猛如虎，结果bug乘以5.</p><p>所以我们解决方案寄托在原因3、4上。</p><p>Java中提供了<code>synchronized</code>关键字来对操作上锁。拿上面的加法操作举例，为加法这一方法加上synchronized后，就为该操作上锁了。想象要在卫生间完成加法操作，（不敢想象），小县城来的孩子线程1来执行加法操作，发现卫生间没人，他进来后把门锁上，进行加法操作。又一个小县城的孩子线程2来到卫生间前，也想要做加法操作，发现门锁了，只好等到线程1出来后才能进去，他是等也得等，不等也得等，这样就保证了操作的原子性。</p><p>Java还提供了<code>volatile</code>关键字来解决内存可见性问题，synchronized也可以解决该问题，只不过开销更大。为代码加上volatile后，就能禁止编译器进行优化，线程1无论做多少次循环读操作，都要耐心地从内存中读值，不能直接去读取寄存器中的值。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java单例模式：懒汉模式和饿汉模式</title>
      <link href="/2022/09/21/Java-Singleton/"/>
      <url>/2022/09/21/Java-Singleton/</url>
      
        <content type="html"><![CDATA[<p>单例模式，就是一个类中只有一个实例。主要有懒汉模式和饿汉模式。</p><p>饿汉模式是在类加载的同时就创建实例，而懒汉模式是使用时才创建实例。</p><h3 id="饿汉模式">饿汉模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.使用static创建一个实例，并且立即实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//2.为了防止在其他地方不小心new这个Singleton，把方法构造为private</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3.提供一个方法，让外面能够拿到唯一实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在多线程中，多个线程对同一数据进行读操作，线程安全。</p><h3 id="懒汉模式">懒汉模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.不立即初始化实例，使用时再初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//2.将构造方法设为private</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3.提供方法获取实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多线程中，多个线程对同一对象进行读、写操作，线程不安全。线程不安全出现在首次创建实例时，多个线程同时调用getInstance方法，可能创造出多个实例。</p><p>改进1：</p><p>对getInstance方法加锁，保证操作的原子性，实现线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.不立即初始化实例，使用时再初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//2.将构造方法设为private</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3.提供方法获取实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这种方法性能较差，毕竟线程不安全只出现在首次创建实例时，为getInstance方法加锁后每次都要加锁解锁，所以做如下改进。</p><p>改进2：</p><p>进入getInstance方法后首先判断instance是否为空，即是否为第一次创建实例，是才需要加锁，否则不需要加锁。同时为了避免 “内存可见性” 导致读取的 instance 出现偏差, 因此为instance加上volatile。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.不立即初始化实例，使用时再初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton1 instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//2.将构造方法设为private</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//3.提供方法获取实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaWeb】Thymeleaf模板引擎</title>
      <link href="/2022/06/09/Java-Thymeleaf/"/>
      <url>/2022/06/09/Java-Thymeleaf/</url>
      
        <content type="html"><![CDATA[<p>上篇博客中，我们了解了服务器渲染，并用Thymeleaf模板引擎写了一个简单的猜数字小游戏。</p><p>下面我们简单了解一下Thymeleaf的语法。</p><h4 id="Thymeleaf常见命令">Thymeleaf常见命令</h4><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>th:text</td><td>在标签体中展示表达式求值结果的文本内容</td></tr><tr><td>th:[HTML标签属性]</td><td>设置任意的 HTML 标签属性的值</td></tr><tr><td>th:if</td><td>当表达式的结果为真时则显示内容，否则不显示</td></tr><tr><td>th:each</td><td>循环访问元素</td></tr></tbody></table><p>Thymeleaf语法有很多，我们这里先简单介绍这四个。th:text和th:if在猜数字小游戏案例已经使用过，这里不再介绍。</p><h5 id="th-属性">th:[属性]</h5><ul><li>HTML模板代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;$&#123;url1&#125;&quot;</span>&gt;</span>胖虎同学<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;$&#123;url2&#125;&quot;</span>&gt;</span>胖虎同学1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Servlet代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/thymeleafUrl.html&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafUrlServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建核心类,用于完成页面渲染</span></span><br><span class="line">    <span class="keyword">public</span> TemplateEngine engine = <span class="keyword">new</span> TemplateEngine();</span><br><span class="line">    <span class="comment">//2.初始化模板引擎,创建解析器，加载文件，关联</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        ServletContextTemplateResolver resolver = <span class="keyword">new</span> ServletContextTemplateResolver(context);</span><br><span class="line">        resolver.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        resolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        engine.setTemplateResolver(resolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//3.实例化WebContext，关联变量</span></span><br><span class="line">        WebContext webContext = <span class="keyword">new</span> WebContext(req,resp,context);</span><br><span class="line">        webContext.setVariable(<span class="string">&quot;url1&quot;</span>,<span class="string">&quot;https://youngsay.cn&quot;</span>);</span><br><span class="line">        webContext.setVariable(<span class="string">&quot;url2&quot;</span>,<span class="string">&quot;http://blog.youngsay.cn&quot;</span>);</span><br><span class="line">        <span class="comment">//4.渲染</span></span><br><span class="line">        engine.process(<span class="string">&quot;thymeleafUrl&quot;</span>,webContext,resp.getWriter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="th-each">th:each</h5><p>列举游戏战绩：昵称、击杀、死亡、得分</p><ul><li>HTML模板代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;person : $&#123;persons&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.kill&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.dead&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;person.score&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Servlet代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> kill;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> dead;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> kill, <span class="keyword">int</span> dead, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.kill = kill;</span><br><span class="line">        <span class="keyword">this</span>.dead = dead;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/thymeleafEach&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafEach</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建TemplateEngine对象</span></span><br><span class="line">    <span class="keyword">public</span> TemplateEngine engine = <span class="keyword">new</span> TemplateEngine();</span><br><span class="line">    <span class="comment">//初始化模板引擎</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        ServletContextTemplateResolver resolver = <span class="keyword">new</span> ServletContextTemplateResolver(context);</span><br><span class="line">        resolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        resolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        resolver.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        engine.setTemplateResolver(resolver);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        persons.add(<span class="keyword">new</span> Person(<span class="string">&quot;損友比过狗友i&quot;</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">80</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> Person(<span class="string">&quot;马棚管理员&quot;</span>,<span class="number">21</span>,<span class="number">8</span>,<span class="number">130</span>));</span><br><span class="line">        persons.add(<span class="keyword">new</span> Person(<span class="string">&quot;吃枣药丸&quot;</span>,<span class="number">16</span>,<span class="number">5</span>,<span class="number">110</span>));</span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        WebContext webContext = <span class="keyword">new</span> WebContext(req,resp,context);</span><br><span class="line">        webContext.setVariable(<span class="string">&quot;persons&quot;</span>,persons);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        engine.process(<span class="string">&quot;thymeleafEach&quot;</span>,webContext, resp.getWriter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ServletContext">ServletContext</h4><p>观察上篇博客猜数字游戏代码和上面的两段代码，我们发现，每个Servlet都创建了一个TemplateEngine对象并进行初始化，其实这完全没必要，一个webapp中，只创建一个TemplateEngine对象即可。</p><p>这就需要用到ServletContext，它是Servlet程序全局存储信息的空间，每个webapp中只有一个ServlectContext，多个Servlet之间共享一个ServlectContext。通过 HttpServlet.getServletContext() 方法获取到当前webapp 的ServletContext对象。</p><p>下面是ServletContext常见方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void setAttribute(String name, Object obj)</td><td>设置属性(键值对)</td></tr><tr><td>Object getAttribute(String name)</td><td>根据属性名获取属性值, 如果 name 不存在, 返 回 null</td></tr><tr><td>void removeAttribute(String name)</td><td>删除对应的属性</td></tr></tbody></table><p>我们用代码来证明多个一个webapp中多个Servlet类共用一个ServletContext。</p><ul><li>创建一个WriterServlet类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/writer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取message参数</span></span><br><span class="line">        String message = req.getParameter(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        <span class="comment">//2.将message设置到ServletContext</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;message&quot;</span>,message);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//3.返回结果</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;设置成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建一个ReaderServlet类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/reader&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取ServletContext中的message值</span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        String message = (String) context.getAttribute(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//2.返回读到的值</span></span><br><span class="line">        resp.getWriter().write(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cos.youngsay.cn/blog/202206101502724.gif" alt="展示结果"></p><h4 id="监听器">监听器</h4><p>要想做到一个webapp中只创建一个TemplateEngine对象，除了认识ServletContext，还需要了解监听器。</p><p>使用监听器监听ServletContext的创建，创建好后在ServletContext完成初始化操作，后续的 Servlet 直接从 ServletContext 中获取到engine实例即可，不必每创建一个Servlet都初始化一次。</p><p>首先创建一个监听器类Mylistener，实现ServletContextListener接口，重写contextInitialized方法。在contextInitialized方法内完成初始化等一系列操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.通过方法的参数可以获取到ServletContext</span></span><br><span class="line">        ServletContext context = sce.getServletContext();</span><br><span class="line">        <span class="comment">//2.创建TemplateEngine类对象engine</span></span><br><span class="line">        TemplateEngine engine = <span class="keyword">new</span> TemplateEngine();</span><br><span class="line">        <span class="comment">//3.创建解析器</span></span><br><span class="line">        ServletContextTemplateResolver resolver = <span class="keyword">new</span> ServletContextTemplateResolver(context);</span><br><span class="line">        <span class="comment">//4.加载文件</span></span><br><span class="line">        resolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        resolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        resolver.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//5.关联engine和解析器</span></span><br><span class="line">        engine.setTemplateResolver(resolver);</span><br><span class="line">        <span class="comment">//6.将engine放到ServletContext中,后续直接调用getAttribute获取engine</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;engine&quot;</span>,engine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了MyListener类，之前代码中engine对象的创建和init方法内的初始化操作都可以删掉了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaWeb】服务器渲染</title>
      <link href="/2022/06/09/Java-templateEngine/"/>
      <url>/2022/06/09/Java-templateEngine/</url>
      
        <content type="html"><![CDATA[<p>页面渲染，所谓渲染就是将数据和页面相结合，根据用户传送的数据不同，页面渲染后的内容也不同。页面渲染可以在服务器端完成，也可以在客户端完成。<strong>服务器渲染</strong>是将用户传来的数据在服务器端拼接成HTML后传给客户端，而<strong>客户端渲染</strong>是在客户端将服务器传来的数据拼接成HTML。</p><p><img src="https://cos.youngsay.cn/blog/202206091642034.png" alt="页面渲染"></p><h4 id="服务器渲染">服务器渲染</h4><p>这篇博客主要介绍一下服务器渲染。</p><p>我们可以用字符串拼接的方式，将数据拼接成HTML页面。下面我们用字符串拼接的方式完成一个猜数字web版的小游戏。</p><p>首先约定好交互方式。</p><ul><li>GET /guess</li></ul><p>通过get请求，从服务器得到一个页面响应，同时在服务器生成一个1-100的随机数。</p><ul><li>POST /guess</li></ul><p>通过post请求，将用户输入的数提交到服务器，在服务器比较用户输入的数和随机数的大小，将比较结果和次数返回。</p><p>约定好交互方式后，我们创建一个GuessNumServlet类，关联到/guess路径，用doGet方法实现第一个交互接口，doPost方法实现第二个交互接口。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/guess&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuessNumServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//生成一个随机数</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//随机数范围在[1,100]</span></span><br><span class="line">        num = random.nextInt(<span class="number">100</span>)+<span class="number">1</span>; <span class="comment">//得到一个1-100之间的随机数</span></span><br><span class="line">        <span class="comment">//设置响应的类型格式</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//字符串拼接响应页面</span></span><br><span class="line">        StringBuilder html = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        html.append(<span class="string">&quot;&lt;form action=\&quot;guess\&quot; method=\&quot;post\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;input type=\&quot;text\&quot; name=\&quot;guessNum\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;input type=\&quot;submit\&quot; value=\&quot;确认输入\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/form&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//返回响应</span></span><br><span class="line">        resp.getWriter().write(html.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置响应格式</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//得到用户猜的数字</span></span><br><span class="line">        <span class="keyword">int</span> guessNum = Integer.parseInt(req.getParameter(<span class="string">&quot;guessNum&quot;</span>));</span><br><span class="line">        String result =<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//比较用户输入的数字和生成的随机数</span></span><br><span class="line">        <span class="keyword">if</span>(guessNum&lt;num)&#123;</span><br><span class="line">            result=<span class="string">&quot;猜小了&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessNum&gt;num)&#123;</span><br><span class="line">            result=<span class="string">&quot;猜大了&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            result=<span class="string">&quot;猜对了&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//字符串拼接响应界面</span></span><br><span class="line">        StringBuilder html = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        html.append(<span class="string">&quot;&lt;form action=\&quot;guess\&quot; method=\&quot;post\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;input type=\&quot;text\&quot; name=\&quot;guessNum\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;input type=\&quot;submit\&quot; value=\&quot;确认输入\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/form&gt;&quot;</span>);</span><br><span class="line">        html.append(<span class="string">&quot;&lt;div&gt;&quot;</span>+result+<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">        html.append(<span class="string">&quot;&lt;div&gt;&quot;</span>+<span class="string">&quot;猜的次数：&quot;</span>+count+<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//返回响应界面</span></span><br><span class="line">        resp.getWriter().write(html.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上段代码，我们发现十分简单的页面拼接起来却如此复杂，代码可读性不高。其实我们有一种更好的方式来完成服务器渲染，那就是<strong>模板引擎</strong>。</p><h4 id="模板引擎">模板引擎</h4><p>上面的代码Java和HTML代码都混在了一起，模板引擎可以将JAVA和HTML代码分离，将HTML放到单独的文件。HTML中需要变动的部分用占位符占位，当服务器计算响应完毕后，将HTML模板中的占位符替换成计算后的内容，返回给客户端。</p><p>Java中有很多模板引擎，这里用的是Thymeleaf 。</p><p>如何使用Thymeleaf，我们上面的猜数字小游戏为例，将上段代码改成模板引擎版本。</p><p><strong>首先需要引入依赖。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.thymeleaf/thymeleaf --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">3.0</span><span class="number">.12</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>接着创建一个HTML模板</strong>，创建路径是<code>webapps/WEB-INF/templates  </code>,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;GuessNum&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;guessNum&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;确认输入&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;div th:<span class="keyword">if</span>=<span class="string">&quot;$&#123;!first&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;div th:text=<span class="string">&quot;$&#123;result&#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div th:text=<span class="string">&quot;$&#123;count&#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>有$符号的地方就是一个占位符，最终会被替换成计算好的结果。</p><p><strong>最后创建Servlet类</strong>：<code>GuessNumTemplateEngine</code>。</p><ul><li>创建一个TemplateEngine的类，这个类是服务器渲染的核心类。</li><li>初始化模板引擎：创建一个ServletContextTemplateResolver类的解析器，结合ServletContext使用，用来加载要渲染的文件，然后与TemplateEngine相关联。</li><li>通过WebContext类将模板文件的变量与Java中的变量相关联。</li><li>通过TemplateEngine的process方法完成渲染。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/GuessNum&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuessNumTemplateEngine</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//核心，用于完成页面的渲染</span></span><br><span class="line">    <span class="keyword">public</span> TemplateEngine engine = <span class="keyword">new</span> TemplateEngine();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> randomNum;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对模板引擎初始化</span></span><br><span class="line">        ServletContextTemplateResolver resolver = <span class="keyword">new</span> ServletContextTemplateResolver(<span class="keyword">this</span>.getServletContext());</span><br><span class="line">        resolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        resolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        resolver.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        engine.setTemplateResolver(resolver);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        randomNum = random.nextInt(<span class="number">100</span>)+<span class="number">1</span>;</span><br><span class="line">        WebContext webContext = <span class="keyword">new</span> WebContext(req,resp,getServletContext());</span><br><span class="line">        webContext.setVariable(<span class="string">&quot;first&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        engine.process(<span class="string">&quot;guessNum&quot;</span>,webContext,resp.getWriter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html; charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//1.获取用户输入的数字</span></span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(req.getParameter(<span class="string">&quot;guessNum&quot;</span>));</span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 2. 和 随机数 进行比较</span></span><br><span class="line">        <span class="keyword">if</span> (num &lt; randomNum) &#123;</span><br><span class="line">            result = <span class="string">&quot;猜低了&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; randomNum) &#123;</span><br><span class="line">            result = <span class="string">&quot;猜高了&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="string">&quot;猜对了&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 自增猜的次数</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//4.返回响应界面</span></span><br><span class="line">        WebContext context = <span class="keyword">new</span> WebContext(req,resp,getServletContext());</span><br><span class="line">        context.setVariable(<span class="string">&quot;first&quot;</span>,<span class="keyword">false</span>);</span><br><span class="line">        context.setVariable(<span class="string">&quot;result&quot;</span>,result);</span><br><span class="line">        context.setVariable(<span class="string">&quot;count&quot;</span>,count);</span><br><span class="line">        engine.process(<span class="string">&quot;guessNum&quot;</span>,context,resp.getWriter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaWeb】Servlet上传文件</title>
      <link href="/2022/06/08/Java-uploadFile/"/>
      <url>/2022/06/08/Java-uploadFile/</url>
      
        <content type="html"><![CDATA[<p>Servlet支持上传文件操作，在HttpServletRequest类中，通过Part对象的getPart方法便可以获取请求中指定name的文件。</p><p>上传文件分为两个部分，前端部分和后端部分，关于文件操作，这两个部分都很简单，代码量很少。</p><p>各文件路径如下：</p><p><img src="https://cos.youngsay.cn/blog/202206082140961.png" alt="maven各文件路径"></p><p><strong>前端页面</strong>：创建一个html文件，通过form表单的action属性，与后端Servlet相关联，method属性指定方法，上传文件通常为post，通过enctype属性指定编码方式，上传文件为multipart/form-data。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;file&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;myFile&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>后端部分</strong>：创建一个上传文件的类Upload，继承HttpServlet，@WebServlet()注解内容与前端页面form表单的action路径相同(此处有<code>/</code>)，此外还需要<code>@MultipartConfig</code>注解,缺少该注解将无法正确读取文件。 通过Part对象的getPart()方法获取文件，方法内参数为前端界面input中类型为file格式的name属性值。通过write方法可以将文件写入磁盘，方法内参数为磁盘路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Upload</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        Part part = req.getPart(<span class="string">&quot;myFile&quot;</span>);</span><br><span class="line">        System.out.println(part.getContentType());</span><br><span class="line">        System.out.println(part.getName());</span><br><span class="line">        System.out.println(part.getSize());</span><br><span class="line">        part.write(<span class="string">&quot;d:/myFile.png&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度和空间复杂度</title>
      <link href="/2022/06/04/algorithm-complexity/"/>
      <url>/2022/06/04/algorithm-complexity/</url>
      
        <content type="html"><![CDATA[<p>如何衡量一个算法的好坏？我们可以从时间和空间两个方面入手，也就是时间复杂度和空间复杂度。</p><p>无论是时间复杂度还是空间复杂度，都采用<strong>大O的渐进表示法</strong>。只保留最高阶项，且最高阶项的系数为1.例如一个算法的执行次数是2N^2+M+3,那么该算法的时间复杂度是O（N^2)。</p><h3 id="时间复杂度">时间复杂度</h3><p>时间复杂度的衡量标准也就是算法的执行次数。我们下面用几段代码来练习一下算法时间复杂度的计算。</p><ul><li>冒泡排序的时间复杂度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> end = array.length; end &gt; <span class="number">0</span>; end--) &#123;</span><br><span class="line"><span class="keyword">boolean</span> sorted = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; end; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (array[i - <span class="number">1</span>] &gt; array[i]) &#123;</span><br><span class="line">Swap(array, i - <span class="number">1</span>, i);</span><br><span class="line">sorted = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sorted == <span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设有N个元素，最坏的情况下需要走N-1趟，每趟排序end-1次。例如有5个元素，N-5，那么需要走4趟，每趟排列次数分别为4,3,2,1。刚好构成等差数列，可以用等差数列求和公式计算执行次数,也就是<code>[(N*（N-1))]/2</code>。</p><p>按照大O的渐进表示法，时间复杂度是O（N^2)。</p><ul><li>二分查找的时间复杂度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (begin &lt;= end) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = begin + ((end-begin) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (array[mid] &lt; value)</span><br><span class="line">    begin = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &gt; value)</span><br><span class="line">    end = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二份查找的好处是每次能去掉一半，第一次是去掉一半还剩一半，第二次去掉一半还剩1/4，第三次去掉一半还剩1/8……如下图所示：</p><p><img src="https://cos.youngsay.cn/blog/202206042220754.png" alt="image-20220604213754161"></p><p>所以二分查找的时间复杂度是O（logN）</p><ul><li>递归求阶乘的时间复杂度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> N &lt; <span class="number">2</span> ? N : factorial(N-<span class="number">1</span>) * N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归算法的时间复杂度 = 递归的次数 * 每次递归执行的次数</p><p>递归求阶乘算法递归次数为N，每次递归执行1次，所以时间复杂度是O（N）。</p><ul><li>递归求斐波那契数列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> N &lt; <span class="number">2</span> ? N : fibonacci(N-<span class="number">1</span>)+fibonacci(N-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归次数，也就是层数为N的二叉树最多的结点个数，(2^N) - 1。</p><p>所以时间复杂度是O（2^N)。</p><h3 id="空间复杂度">空间复杂度</h3><p>空间复杂度的衡量标准是临时占用的存储空间大小。随着计算机的发展，存储空间越来越大，空间复杂度也就不必太过关注。</p><ul><li>递归求阶乘的空间复杂度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> N &lt; <span class="number">2</span> ? N : factorial(N-<span class="number">1</span>)*N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归了N次，开辟了N个栈帧，每个栈帧占用常数的存储空间，所以该算法的空间复杂度是O（N）。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】认识String类</title>
      <link href="/2022/06/03/Java-String/"/>
      <url>/2022/06/03/Java-String/</url>
      
        <content type="html"><![CDATA[<h3 id="创建一个Sting">创建一个Sting</h3><p>String有三种构造方法，分别为直接赋值、new String方法构造和字符串数组构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line">String str1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">String str2=<span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//方法3</span></span><br><span class="line"><span class="keyword">char</span>[] arr=&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">String str3=<span class="keyword">new</span> String(arr);</span><br></pre></td></tr></table></figure><p>String是一种引用类型，内部并不存储字符串本身。</p><h3 id="Sting的存储结构">Sting的存储结构</h3><p>观察下段代码，输出结果是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String str11=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String str2=<span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">String str22=<span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">String str3=<span class="string">&quot;world&quot;</span>;</span><br><span class="line">System.out.println(str1==str11); <span class="comment">//true</span></span><br><span class="line">System.out.println(str2==str22); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>输出结果分别为true、false。</p><p>之所以出现这样的结果，是字符串的存储方式不同。字符串str1和str11这样的创建方式是将数据存放在字符串常量池，在常量池中，同一个数只有一份。字符串常量池在JVM中是StringTable类，实际是一个固定大小的HashTable。str2和str22是将数据存放在堆上，每new一次就会在堆上开辟一块空间。</p><p>下面这幅图是String内部存储结构的简单示意图。</p><p><img src="https://cos.youngsay.cn/blog/202206031208205.png" alt="Sting内部存储结构"></p><p>总结：String类中两种对象实例化的区别：</p><ul><li>直接赋值：只会开辟一块堆内存空间，并且该字符串对象可以自动保存在对象池中以供下次使用。</li><li>构造方法：会开辟两块堆内存空间，不会自动保存在对象池中，<strong>可以使用intern()方法手工入池</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str2=<span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>).intern();</span><br></pre></td></tr></table></figure><h3 id="Sting的不可变性">Sting的不可变性</h3><p>字符串Sting是不可变的，所以每次字符串“+”加号拼接时都会产生一个新的对象，并不是在原对象的基础上拼接。</p><p>JDK中，String类由final修饰，value字符数组也由final修饰。</p><ul><li>String类被final修饰，表明该类不能被继承。</li><li>value被修饰被final修饰，只是表明不能再引用其他数组，但是引用空间中的值仍能被修改。</li></ul><p>所以，final并不是String对象不可变的原因。</p><p>如何理解 String 类型值的不可变？</p><p><a href="https://www.zhihu.com/question/20618891/answer/114125846">https://www.zhihu.com/question/20618891/answer/114125846</a></p><p>String对象不可变，使用加号进行字符串拼接效率是很低的，每次都会创建一个新对象，中间还会有很多临时变量。可以使用StringBuffer和StingBuilder来进行字符串的修改。</p><h3 id="StringBuffer和StringBuilder"><code>StringBuffer</code>和<code>StringBuilder</code></h3><p>String、StringBuffer、StringBuilder的区别:</p><ul><li>String的内容不可修改，StringBuffer与StringBuilder的内容可以修改.</li><li>StringBuffer与StringBuilder大部分功能是相似的。StringBuffer采用同步处理，属于线程安全操作；而StringBuilder未采用同步处理，属于线程不安全操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line">String str=<span class="string">&quot;panghu&quot;</span>;</span><br><span class="line">String str1 = str + <span class="string">&quot;tx&quot;</span>;</span><br><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;panghu&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;tx&quot;</span>);</span><br><span class="line"><span class="comment">//转化</span></span><br><span class="line"><span class="comment">//String----&gt;StringBuffer</span></span><br><span class="line">StringBuffer sb1=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">System.out.println(sb1.append(str));</span><br><span class="line"><span class="comment">//StringBuffer---&gt;String</span></span><br><span class="line">String ss= sb.toString();</span><br><span class="line">System.out.println(ss);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】抽象类和接口</title>
      <link href="/2022/05/24/Java-abstractClass-interface/"/>
      <url>/2022/05/24/Java-abstractClass-interface/</url>
      
        <content type="html"><![CDATA[<h3 id="抽象类">抽象类</h3><h4 id="什么是抽象类">什么是抽象类</h4><p>被abstract修饰的类就是抽象类。抽象类是类的进一步抽象，抽象类中的方法可以不做具体的实现（抽象方法，由abstract修饰）。抽象类中也可以有普通方法。</p><p>抽象方法不能由static和final修饰，因为抽象方法要被子类重写。</p><p>抽象类中不一定要有抽象方法，但是有抽象方法的类一定是抽象类。</p><p>抽象类不能实例化，但可以引用其子类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//抽象类中也可以有构造方法，也可以有普通方法、属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象方法，不做具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;正在吃狗粮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//抽象类不能实例化，但可以引用其子类对象。</span></span><br><span class="line">        Animal animal = <span class="keyword">new</span> Dog(<span class="string">&quot;旺旺&quot;</span>);</span><br><span class="line">        <span class="comment">//子类重写eat方法</span></span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：旺旺正在吃狗粮</p><h4 id="为什么需要抽象类">为什么需要抽象类</h4><p>抽象类中的方法可以不做具体实现，为了子类能够继承该抽象类。使用抽象类能够多一层编译器校验，增加了安全性。就像常量用final修饰，不小心修改时编译器会报错提醒。</p><p>像上面的代码main方法中new Dog改成new Animal，编译器就会报错：‘Animal’ is abstract; cannot be instantiated。</p><h3 id="接口">接口</h3><h4 id="什么是接口">什么是接口</h4><p>接口是多个类的公共规范，是一种引用数据类型。接口可以理解为一种功能、特性，类实现某个接口，便可以具备某种功能。</p><p>接口中的方法默认是由public abstract修饰，接口中的属性默认是public final static。建议接口中的方法和属性不加任何修饰符号, 保持代码的简洁性.</p><p>接口不能实例化。</p><p>接口中不能有静态代码块和构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Running</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>; <span class="comment">//方法不加修饰符，默认为public abstract void run()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flying</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//抽象类中也可以有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象方法，不做具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Running</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;正在吃狗粮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实现接口中的run方法，必须为public，因为接口中的run方法是public，重写时要分配更高的访问权限</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;正在扑向他的主人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Flying</span></span>&#123;</span><br><span class="line">    <span class="comment">//继承父类，需要重写父类的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写父类的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;正在觅食&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现接口，必须实现接口的抽象方法，否则类需设置为抽象类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;正在天空中自由地翱翔&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog(<span class="string">&quot;旺旺&quot;</span>);</span><br><span class="line">        dog.eat();</span><br><span class="line">        dog.run();</span><br><span class="line">        Bird bird  = <span class="keyword">new</span> Bird(<span class="string">&quot;飞儿&quot;</span>);</span><br><span class="line">        bird.eat();</span><br><span class="line">        bird.fly();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>旺旺正在吃狗粮<br>旺旺正在扑向他的主人<br>飞儿正在觅食<br>飞儿正在天空中自由地翱翔</p><h4 id="为什么需要接口">为什么需要接口</h4><p>Java不允许多重继承，通过接口可以提供多重继承的大部分好处，同时还能避免多重继承的复杂性和低效性。</p><h4 id="接口的使用实例">接口的使用实例</h4><h5 id="Comparable接口">Comparable接口</h5><p>对数组元素按年龄排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写compareTo方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        if(this.age&gt;o.age)&#123;</span></span><br><span class="line"><span class="comment">//            return 1;</span></span><br><span class="line"><span class="comment">//        &#125;else if(this.age&lt;o.age)&#123;</span></span><br><span class="line"><span class="comment">//            return -1;</span></span><br><span class="line"><span class="comment">//        &#125;else &#123;</span></span><br><span class="line"><span class="comment">//            return 0;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age-o.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Compare</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student[] students = <span class="keyword">new</span> Student[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">&quot;panghu&quot;</span>,<span class="number">20</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">&quot;xiaofu&quot;</span>,<span class="number">18</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">&quot;daxiong&quot;</span>,<span class="number">19</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">&quot;jingxiang&quot;</span>,<span class="number">16</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(students);</span><br><span class="line">        System.out.println(Arrays.toString(students));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>[Student{name=‘jingxiang’, age=16}, Student{name=‘xiaofu’, age=18}, Student{name=‘daxiong’, age=19}, Student{name=‘panghu’, age=20}]</p><p>上面代码有一个问题，只能按年龄排序，如果想按姓名排序就要修改compareTo方法，修改后又只能按姓名排序。有没有一种办法，可以实现按不同的属性进行排序。利用比较器可以实现该要求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student1</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student1 o1, Student1 o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.age-o2.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student1</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student1 o1, Student1 o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.name.compareTo(o2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Compare1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student1[] students = <span class="keyword">new</span> Student1[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Student1(<span class="string">&quot;panghu&quot;</span>,<span class="number">20</span>),</span><br><span class="line">                <span class="keyword">new</span> Student1(<span class="string">&quot;xiaofu&quot;</span>,<span class="number">18</span>),</span><br><span class="line">                <span class="keyword">new</span> Student1(<span class="string">&quot;daxiong&quot;</span>,<span class="number">19</span>),</span><br><span class="line">                <span class="keyword">new</span> Student1(<span class="string">&quot;jingxiang&quot;</span>,<span class="number">16</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        AgeComparator ageComparator = <span class="keyword">new</span> AgeComparator();</span><br><span class="line">        NameComparator nameComparator = <span class="keyword">new</span> NameComparator();</span><br><span class="line">        <span class="comment">//按年龄排序</span></span><br><span class="line">        Arrays.sort(students,ageComparator);</span><br><span class="line">        System.out.println(<span class="string">&quot;按年龄&quot;</span>+Arrays.toString(students));</span><br><span class="line">        <span class="comment">//按姓名排序</span></span><br><span class="line">        Arrays.sort(students,nameComparator);</span><br><span class="line">        System.out.println(<span class="string">&quot;按姓名&quot;</span>+Arrays.toString(students));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>按年龄[Student{name=‘jingxiang’, age=16}, Student{name=‘xiaofu’, age=18}, Student{name=‘daxiong’, age=19}, Student{name=‘panghu’, age=20}]<br>按姓名[Student{name=‘daxiong’, age=19}, Student{name=‘jingxiang’, age=16}, Student{name=‘panghu’, age=20}, Student{name=‘xiaofu’, age=18}]</p><h5 id="Clonable接口">Clonable接口</h5><p>实现Clonable接口需要重写Object类的clone()方法，在方法中使用super关键字调用Object类的clone()方法，然后调用该方法即可实现克隆。</p><ul><li>浅拷贝：仅仅拷贝当前对象本身，不拷贝引用类型。<br><img src="https://cos.youngsay.cn/blog/202206030851091.png" alt="浅拷贝"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String phone;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, p.phone=&quot;</span> + p.phone +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.age=<span class="number">20</span>;</span><br><span class="line">        person.p.phone=<span class="string">&quot;xiaomi&quot;</span>;</span><br><span class="line">        Person person2 = (Person)person.clone();</span><br><span class="line">        person2.age=<span class="number">10</span>;</span><br><span class="line">        person2.p.phone=<span class="string">&quot;iphone&quot;</span>;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line"><span class="comment">//Person&#123;age=20, p.phone=iphone&#125;</span></span><br><span class="line"><span class="comment">//Person&#123;age=10, p.phone=iphone&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>深拷贝：不仅拷贝当前对象，还拷贝其引用类型。</p><p><img src="https://cos.youngsay.cn/blog/202206030852161.png" alt="深拷贝"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person tmp = (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">        tmp.p= (Phone) <span class="keyword">this</span>.p.clone();</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, p.phone=&quot;</span> + p.phone +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.age=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        person.p.phone=<span class="string">&quot;xiaomi&quot;</span>;</span><br><span class="line">        Person person2 = (Person)person.clone();</span><br><span class="line">        person2.age=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        person2.p.phone=<span class="string">&quot;iphone&quot;</span>;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line"><span class="comment">//Person&#123;age=20, p.phone=xiaomi&#125;</span></span><br><span class="line"><span class="comment">//Person&#123;age=10, p.phone=iphone&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态内存分配基本使用及常见问题</title>
      <link href="/2022/04/09/C-malloc/"/>
      <url>/2022/04/09/C-malloc/</url>
      
        <content type="html"><![CDATA[<p>为什么需要动态内存管理？创建一个数组，我们要为数组指定大小，<code>int arr[10];</code>，这属于静态创建一个数组，数组arr存放在栈上。这样的创建方式有一些局限性，小了呢不够用，大了呢又浪费空间，因此要引入动态内存管理。</p><p>动态创建一个数组，不再受元素个数的限制，当元素个数与容量相等时，可以很方便地扩容。</p><p>如何动态内存管理，我们来介绍几个函数。</p><p><strong><code>malloc</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void* malloc (size_t size);</span><br></pre></td></tr></table></figure><p>参数size为要为空间开辟的字节数，开辟成功后返回值为该空间的首地址，失败则返回<code>NULL</code>.<strong>当size为0时，要看编译器如何处理，具体返回什么不确定</strong>。</p><p>动态开辟内存后，不需要再使用这块空间时，要使用<code>free</code>函数释放内存。，否则会内存泄漏。free释放后这块内存可以再次被分配，但被释放的空间的值没有被改变，它仍然指向相同（无效）的位置。</p><p><code>free</code>专门用来释放动态分配的空间，如果空间为空，不执行任何操作。切记不可以用free来释放静态分配的内存空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* p =(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">40</span>); <span class="comment">//动态开辟10字节的空间</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123; <span class="comment">//判断是否开辟成功</span></span><br><span class="line">perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">*(p + i) = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p); <span class="comment">//释放p空间</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>calloc</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void* calloc (size_t num, size_t size);</span><br></pre></td></tr></table></figure><p>与<code>malloc</code>相似，但是会在开辟后为空间初始化为0.参数num为要分配的元素数，size为每个元素的大小，总的内存空间为num*size个字节。</p><p>与malloc用法一致，不在举例。</p><p><strong><code>realloc</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void* realloc (void* ptr, size_t size);</span><br></pre></td></tr></table></figure><p>该函数可以为动态空间扩容，参数ptr为要扩容的空间，size为扩容后的内存大小。</p><p>扩容成功返回该空间的首地址，失败返回空，所以为空间扩容时先创建一块临时变量指向该空间，为临时变量扩容，扩容成功再让要扩容的空间等于临时变量，以防扩容失败内容丢失。</p><p>扩容会遇到两种情况，1种是该块空间后没有额外的空间来扩容，这时会分配一块新空间，将旧空间的内容移到新空间，返回值自然也是新空间的首地址，2是该块空间空间充足，这就可以在该空间后连续扩容，无需再寻找新的空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">40</span>); <span class="comment">//动态开辟10字节的空间</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123; <span class="comment">//判断是否开辟成功</span></span><br><span class="line">perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">*(p + i) = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扩容</span></span><br><span class="line"><span class="keyword">int</span>* tmp=(<span class="keyword">int</span>*)<span class="built_in">realloc</span>(p, <span class="number">80</span>);</span><br><span class="line"><span class="keyword">if</span> (tmp != <span class="literal">NULL</span>) &#123; <span class="comment">//判断是否扩容成功</span></span><br><span class="line">p = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">*(p + i) = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为0~19，扩容成功。</p><p><strong>问题</strong></p><p>了解了动态内存分配函数的一些基础使用后，我们来看一些常见的问题。</p><p>代码1:这段代码有什么问题？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMemory</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">GetMemory(str);</span><br><span class="line"><span class="built_in">strcpy</span>(str, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p是一个局部变量，是实参的一份临时拷贝，出了GetMemory函数会自动销毁。我们为p开辟了100个字节的空间，出了函数后p销毁，找不到这块空间的首地址，却没对该空间进行内存释放，会造成内存泄漏。</p><p>此外str仍是空指针，将“hello world”拷贝到一块空指针，会造成非法访问，程序崩溃。</p><p>我们可以试着修改，将传值调用改成传址调用，这样p和str指向了同一块空间，最后别忘了free释放内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMemory</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">GetMemory(&amp;str); <span class="comment">//传地址</span></span><br><span class="line"><span class="built_in">strcpy</span>(str, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(str);</span><br><span class="line"><span class="built_in">free</span>(str); <span class="comment">//别忘了释放哦~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">GetMemory</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> p[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">str = GetMemory();</span><br><span class="line"><span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p是一个局部变量，是实参的一份临时拷贝，<code>return p</code>返回的是局部变量p的首地址，str收到了这个地址。不巧的是出了GetMemory函数p这块地址就还给了操作系统，所以str找不到这块地址，造成了野指针。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言的结构体及内存对齐</title>
      <link href="/2022/03/31/C-struct/"/>
      <url>/2022/03/31/C-struct/</url>
      
        <content type="html"><![CDATA[<h4 id="结构体基础">结构体基础</h4><p>结构体就是一些成员的集合，结构体的每一个成员可以是整型、数组、指针、结构体等不同的类型。</p><p>下面是一个简单的结构体结构，包含了类型声明<code>struct Stu</code>、成员、结构体变量<code>s1</code>的声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> &#123;</span>  <span class="comment">//类型</span></span><br><span class="line"><span class="comment">//成员</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> sex[<span class="number">10</span>];</span><br><span class="line">&#125;s1; <span class="comment">//结构体变量</span></span><br></pre></td></tr></table></figure><p>我们可以像上面那样声明一个结构体变量，也可以像下面这样单独声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s2</span>;</span></span><br></pre></td></tr></table></figure><p><code>struct</code>是结构体关键字，<code>Stu</code>是结构体标志，两者构成了结构体类型。上面的语句表示为<code>struct Stu</code>类型的结构体声明了一个变量<code>s1</code>。下面是对s1的赋值操作，可以在声明结构体变量的时候直接赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s1</span> =</span> &#123; <span class="string">&quot;panghutx&quot;</span>,<span class="number">20</span>,<span class="string">&quot;male&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>在声明结构体时，我们可以对结构体不完全声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c; </span><br><span class="line">&#125; a;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c; </span><br><span class="line">&#125; *P;</span><br></pre></td></tr></table></figure><p>以上就不完全声明了两个结构体，我们称之为匿名结构体类型。结构体变量a和*p具有相同的成员，但它们是两个完全不同的类型。当我们尝试如下代码时，会出现警告。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*p = &amp;a;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b7bee360471b4eafa7f55e39e249a0f2.png#pic_center" alt="警告信息"></p><p>说到结构体，我们难免提到一个关键字<code>typedef</code>,用于定义新的类型（或类型重命名）。我们在学习链表时可能会看到这样的结构，下面这段代码是对<code>struct Node</code>重命名为<code>Node</code>.而且还在结构体中引用了自己。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;Node;</span><br></pre></td></tr></table></figure><p>切记在结构体自引用时不要使用匿名结构体，否则就是在定义新类型的时候引用了新类型，这是错误的。</p><p>再看下面的写法，定义了两个新类型，<code>Node</code>和<code>*pNode</code>，Node我们已经知道是对<code>struct Node</code>进行重命名，而<code>*pNode</code>是对<code>struct Node*</code>的重命名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;Node,*pNode;</span><br></pre></td></tr></table></figure><h4 id="结构体内存对齐">结构体内存对齐</h4><p>结构体的大小不是单纯的各元素相加，因为主流计算机使用的是32bit字长的CPU，那么取4个字节数要比1个高效，所以结构体存在内存对齐。每个编译器都有自己的对齐系数，程序员也可以通过预编译命令来改变默认对齐数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(n) <span class="comment">//n为修改的对齐系数</span></span></span><br></pre></td></tr></table></figure><p>对齐规则：</p><p>①首个成员放在0ffset（偏移量）为0的位置，其他成员变量要对齐到某个数字（对齐数）的整数倍的地址处。</p><p><code>对齐数</code> = 编译器默认的一个对齐数 与 该成员大小的较小值。</p><p>②结构体总大小为各元素最大对齐数的整数倍。</p><p>举个例子，计算下面结构体的大小是多少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> c1;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> c2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设编译环境默认4字节对齐。</p><p>c1是结构体首个元素，直接放到偏移量为0的位置，占1个字节；i自身大小为4字节，默认对齐4字节，因此对齐数就是四字节，将其放到对齐数整数倍的位置，也就是4偏移量的位置。c2自身大小1字节，默认对齐数4，因此对齐数是1，将其放到对齐数整数倍的位置，也就是int的后面。</p><p>0~8偏移量，那么该结构体为9个字节，对吗？别忘了规则②，结构体总大小是各元素最大对齐数的整数倍。结构体内最大对齐数的元素是int，对齐数是4，9不是4的整数倍，再开辟3个字节。</p><p>综上该结构体大小为12字节。</p><p><img src="https://img-blog.csdnimg.cn/21c2a08f1fb84c2f9084b2342fd99e9f.png#pic_center" alt="结构体内存对齐"></p><h4 id="结构体位段">结构体位段</h4><p>c语言允许在一个结构体中以位为单位来指定成员长度，利用位段能够节约空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> _a:<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> _b:<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> _c:<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> _d:<span class="number">30</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>A就是1个位段，它的大小为8个字节，想知道为什么是8个字节，要知道它的内存分配。</p><ul><li>位段的成员可以是 <code>int</code> <code>unsigned int</code> <code>signed int </code>或者是<code> char</code> （属于整形家族）类型</li><li>位段的空间上是按照需要以4个字节（ int ）或者1个字节（ char ）的方式来开辟的。</li><li>位段涉及很多不确定因素，位段是不跨平台的，注重可移植的程序应该避免使用位段</li></ul><p>调试下面代码，我们可以看一下空间是如何开辟的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> a:<span class="number">3</span>;</span><br><span class="line"><span class="keyword">char</span> b:<span class="number">4</span>;</span><br><span class="line"><span class="keyword">char</span> c:<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> d:<span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">s.a = <span class="number">10</span>;</span><br><span class="line">s.b = <span class="number">12</span>;</span><br><span class="line">s.c = <span class="number">3</span>;</span><br><span class="line">s.d = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/63a14cb112be407c8b35ecec11f5fc5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6I-c6bif5bCP6IOWcA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="位段内存分配"></p><p>我在vs2019环境下调试，和vs2013结果一样。先开辟一字节，从低位开始存数据，存不下时舍弃剩余位，再开辟一字节空间。</p><p>以上存储方式只能代表vs环境下，其他环境不确定。要知道，位段的内存分配与内存对齐的实现方式依赖于具体的机器和系统，在不同的平台可能有不同的结果，这导致了位段在本质上是不可移植的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客一周年啦</title>
      <link href="/2022/03/29/anniversary1/"/>
      <url>/2022/03/29/anniversary1/</url>
      
        <content type="html"><![CDATA[<p>今天是3月29日，博客第一篇博文是在去年3月29日，不知不觉博客已经一年了。</p><p>一年前的今天，是大一下返校的前一天，今天，是大二下开学的第五周，一年后的今天，是大三下，不知道是在准备考研还是忙着就业。</p><p>一年后的事，一年后再说，活在当下，珍惜现在。突如其来的疫情已经持续三年了，都忘了没有疫情的生活是啥样了，三年多少人因为疫情失去了生命。上周让人悲痛的客机坠毁事件，航班人员全部遇难，向遇难者默哀。真是不知道明天和意外哪个会先来，生命无常，活着就好。</p><p>今天早上腾讯云连发了多条消息，原来是学生机和域名都快过期了。学生机是1核2G，每年108，我也不打算续费了。昨天看了橙梓的服务器迁移计划，我又心动了，今天买了五年2核2G4M的服务器，330元，我用处不大，只是觉得挺便宜的，下次续费就是2027年了，这下不用担心到期了。</p><p>下午忙活半天把hexo部署到了服务器，这下速度应该快了些，博客至少还能再活五年。五年后，我要发篇博客:博客五周年啦!</p><p>五年后的事，五年后再说吧。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用的字符串处理函数</title>
      <link href="/2022/03/28/C-string/"/>
      <url>/2022/03/28/C-string/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串处理类">字符串处理类</h2><h3 id="strlen"><code>strlen</code></h3><h4 id="简单介绍">简单介绍</h4><p><code>size_t strlen ( const char * str );</code></p><p>Geting string length.</p><p>参数：str，返回值：字符串长度</p><p>字符串以<code>\0</code>作为结束标志，返回<code>\0</code>之前的字符个数。返回值是<code>size_t</code>（无符号）。</p><h4 id="模拟实现">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1：计时器</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">My_strlen1</span><span class="params">(<span class="keyword">char</span>* ps)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*ps) &#123;</span><br><span class="line">count++;</span><br><span class="line">ps++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法2：指针相减</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">My_strlen2</span><span class="params">(<span class="keyword">char</span>* ps)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>* start = ps;</span><br><span class="line"><span class="keyword">while</span> (*ps) &#123;</span><br><span class="line">ps++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ps - start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法3：递归</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">My_strlen3</span><span class="params">(<span class="keyword">char</span>* ps)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (*ps == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+My_strlen3(ps+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcpy"><code>strcpy</code></h3><h4 id="简单介绍-2">简单介绍</h4><p><code>char * strcpy ( char * destination, const char * source );</code></p><p>Copies the C string pointed by <em>source</em> into the array pointed by <em>destination</em>, including the terminating null character (and stopping at that point).</p><p>以<code>\0</code>结束，且将<code>\0</code>拷贝到目标空间</p><h4 id="模拟实现-2">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">My_strcpy</span><span class="params">(<span class="keyword">char</span>* des, <span class="keyword">char</span>* src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>* rst = des;</span><br><span class="line"><span class="keyword">while</span> (*src) &#123;</span><br><span class="line">*des = *src;</span><br><span class="line">des++;</span><br><span class="line">src++;</span><br><span class="line">&#125;</span><br><span class="line">*des = *src;</span><br><span class="line"><span class="keyword">return</span> rst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改进</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">My_strcpy1</span><span class="params">(<span class="keyword">char</span>* des, <span class="keyword">char</span>* src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>* rst = des;</span><br><span class="line"><span class="keyword">while</span> (*des++ = *src++) &#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcat"><code>strcat</code></h3><h4 id="简单介绍-3">简单介绍</h4><p><code>char * strcat ( char * destination, const char * source );</code></p><p>Concatenate strings.</p><h4 id="模拟实现-3">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">My_strcat</span><span class="params">(<span class="keyword">char</span>* des, <span class="keyword">char</span>* src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>* ret = des;</span><br><span class="line"><span class="comment">//找到des的&#x27;\0&#x27;</span></span><br><span class="line"><span class="keyword">while</span> (*des) &#123;</span><br><span class="line">des++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串拷贝</span></span><br><span class="line"><span class="keyword">while</span> (*des++ = *src++) &#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcmp-2"><code>strcmp</code></h3><h4 id="简单介绍-4">简单介绍</h4><p><code>int strcmp ( const char * str1, const char * str2 );</code></p><p>Compare two strings.</p><h4 id="模拟实现-4">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">My_strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (*str1 == *str2) &#123;</span><br><span class="line"><span class="keyword">if</span> (*str1 == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">str1++;</span><br><span class="line">str2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*str1 &gt; *str2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strstr"><code>strstr</code></h3><h4 id="简单介绍-5">简单介绍</h4><p><code>const char * strstr ( const char * str1, const char * str2 );</code></p><h4 id="模拟实现-5">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">My_strstr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ps1 = str1;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ps2 = str2;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cur = str1;</span><br><span class="line"><span class="keyword">while</span> (*ps1) &#123;</span><br><span class="line">ps1 = cur;</span><br><span class="line"><span class="keyword">while</span> (*ps1 == *ps2 &amp;&amp; *ps1 &amp;&amp; *ps2) &#123;</span><br><span class="line">ps1++;</span><br><span class="line">ps2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*ps2 == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">cur++;</span><br><span class="line">ps2 = str2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*ps1和*ps2不相等时，要重新找ps2在ps1中的位置，ps2复原，ps1继续找下一位（也就是cur的下一位）。</span></span><br></pre></td></tr></table></figure><h2 id="内存操作类">内存操作类</h2><h3 id="memcpy"><code>memcpy</code></h3><h4 id="简单介绍-6">简单介绍</h4><p><code>void * memcpy ( void * destination, const void * source, size_t num );</code></p><p>Copy block of memory.</p><h4 id="模拟实现-6">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">My_memcpy</span><span class="params">(<span class="keyword">void</span>* des, <span class="keyword">void</span>* src, <span class="keyword">size_t</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span>* ret = des;</span><br><span class="line"><span class="keyword">while</span> (count--) &#123;</span><br><span class="line">*(<span class="keyword">char</span>*)des = *(<span class="keyword">char</span>*)src;</span><br><span class="line">des = (<span class="keyword">char</span>*)des + <span class="number">1</span>;</span><br><span class="line">src = (<span class="keyword">char</span>*)src + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="memmove"><code>memmove</code></h3><h4 id="简单介绍-7">简单介绍</h4><p><code>void * memmove ( void * destination, const void * source, size_t num );  </code></p><p>Move block of memory,allowing the <em>destination</em> and <em>source</em> to overlap.</p><h4 id="模拟实现-7">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">My_memmove</span><span class="params">(<span class="keyword">void</span>* des, <span class="keyword">void</span>* src, <span class="keyword">size_t</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (des &lt; src) &#123;</span><br><span class="line"><span class="comment">//从前向后拷贝</span></span><br><span class="line"><span class="keyword">while</span> (count--) &#123;</span><br><span class="line">*(<span class="keyword">char</span>*)des = *(<span class="keyword">char</span>*)src;</span><br><span class="line">des = (<span class="keyword">char</span>*)des + <span class="number">1</span>;</span><br><span class="line">src = (<span class="keyword">char</span>*)src + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//从后向前拷贝</span></span><br><span class="line">des = (<span class="keyword">char</span>*)des + count - <span class="number">1</span>;</span><br><span class="line">src = (<span class="keyword">char</span>*)src + count - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (count--) &#123;</span><br><span class="line">*(<span class="keyword">char</span>*)des = *(<span class="keyword">char</span>*)src;</span><br><span class="line">des = (<span class="keyword">char</span>*)des - <span class="number">1</span>;</span><br><span class="line">src = (<span class="keyword">char</span>*)src - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言操作符练习总结</title>
      <link href="/2022/03/07/C-operator2/"/>
      <url>/2022/03/07/C-operator2/</url>
      
        <content type="html"><![CDATA[<h3 id="sizeof-的坑🕳">sizeof()的坑🕳</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    i--;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="keyword">sizeof</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&lt;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察上端代码，思考一下输出结果是什么？</p><p>首先定义了一个全局变量，全局变量没有赋值，默认值为0；然后i–；i变成了-1.你也许会说sizeof(-1),-1是int类型的，占4个字节，-1&lt;4,结果不就是<code>&lt;</code>吗！其实不然，结果是<code>&gt;</code>,-1大于4？数学是体育老师教的！</p><p>原因在于sizeof()的返回值是无符号整型，也就是unsigned int，两数比较时，编译器会将左侧的值也转换成无符号整数，-1在内存中存储的是全1，即11111111111111111111111111111111，无符号嘛，会认为这是一个很大的数，所以最后输出了<code>&gt;</code>.</p><p>所以当一个数与sizeof()直接比较时，就要小心咯，可能会有意想不到的结果。</p><h3 id="运算符优先级">运算符优先级</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">a = <span class="number">5</span>;</span><br><span class="line">c = ++a;</span><br><span class="line">b = ++c, c++, ++a, a++;</span><br><span class="line">b += a++ + c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d c = %d\n:&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察上段代码，输出结果是什么?很烦这种代码，虽然没什么意义，但既然错了，还是记录下吧。主要考察操作符的优先级和结合性。主要说两点，一是逗号表达式的优先级最低，所以<code>b= ++c , c++ , ++a , a++;</code>先算b=++a，然后再算逗号后面的操作。二是<code>+=</code>操作符的优先级也很低，所以在<code>b += a++ + c</code>中先计算<code>a++ +c</code>,再将结果加上b后赋值给b。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220314195744.png" alt="image-20220306211323371"></p><h3 id="二进制中1的个数">二进制中1的个数</h3><p>求二进制中1的个数，有很多方法。</p><p><strong>方法一</strong>：利用按位与<code>&amp;</code>和移位<code>&gt;&gt;</code>运算符。一个数按位与&amp;1，可以求得这个数二进制的最低位。只求最低位哪行啊，我要的是所有位上1的个数，结合移位运算符，(n&gt;&gt;1)&amp;1,得到的就是第二位，(n&gt;&gt;2)&amp;1,得到的就是第三位，一直到31，得到一次加一次，就得到了二进制中所有的1.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((n &gt;&gt; i) &amp; <span class="number">1</span>) count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：利用%和/运算符，比如1987，1987%10，得到了后一位7，1987/10%10，得到了8，1987/100%10，得到了9，1987%1000/10，得到了1。十进制/10%10，二进制自然就/2%2。值得注意的是数的类型要定义为<code>unsigned int</code>，否则该方法只适用于正整数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> tmp = n;</span><br><span class="line"><span class="keyword">while</span> (tmp) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tmp % <span class="number">2</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">tmp = tmp / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法三</strong>：利用表达式<code>n=n&amp;(n-1)</code>,计算表达式执行的次数，n为0时结束循环。如下图所示：</p><p><img src="C:%5CUsers%5Cpanghu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220307103014897.png" alt="image-20220307103014897"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line">n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两个数二进制不同位的个数">两个数二进制不同位的个数</h3><p>有了上道题的基础，这道题就迎刃而解了。</p><p>思路一：默认最低位是第0位，n&gt;&gt;i&amp;1可以求得第i位的二进制数，如果两数不等，计数器加一即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((a &gt;&gt; i &amp; <span class="number">1</span>) != (b &gt;&gt; i &amp; <span class="number">1</span>)) count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路二：利用异或<code>^</code>运算符，两数异或，相同位为0，不同位为1。对异或后的数求二进制中1的个数，便得到了二进制中不同位的个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="comment">//1.两数异或</span></span><br><span class="line"><span class="keyword">int</span> c = a ^ b;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//2.求二进制中1d</span></span><br><span class="line"><span class="keyword">while</span> (c) &#123;</span><br><span class="line">c = c &amp; (c - <span class="number">1</span>);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浮点数在内存中的存储</title>
      <link href="/2022/03/04/C-IEEE754/"/>
      <url>/2022/03/04/C-IEEE754/</url>
      
        <content type="html"><![CDATA[<p>观察下面的代码，输出结果是什么呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">float</span> *pFloat = (<span class="keyword">float</span> *)&amp;n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n的值为：%d\n&quot;</span>,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>,*pFloat);</span><br><span class="line">*pFloat = <span class="number">9.0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num的值为：%d\n&quot;</span>,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>,*pFloat);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://panghu-1256092140.cos.ap-beijing.myqcloud.com/%20tuchuang-master/20220331140728.png" alt="打印结果"></p><p>以整数存储，以整数取出，结果相同；以浮点数存储，以浮点数取出，结果也相同。</p><p>以整数存储，以浮点数取出，结果不同；以浮点数存储，以整数取出，结果也不同。</p><p>由此可见，<strong>整数和浮点数在内存中的存储是不同的</strong>。</p><p>下面我们看一下浮点数的存储规则，浮点数在内存中的表示是由IEEE（电气与电子工程协会）规定好的。</p><p>任何一个二进制浮点数，可以表示成</p><p><img src="https://panghu-1256092140.cos.ap-beijing.myqcloud.com/%20tuchuang-master/20220331141200.png" alt="image-20220304192024795"></p><p>(-1)^S表示符号位，s为0浮点数是正数，s为-1浮点数是负数；M表示有效数字，范围在[1,2);2^E表示指数位。</p><p>这样看很难理解，我们举例说明。</p><p><code>float a = -5.0f</code>，浮点数-5.0，用二进制表示为-101.0，写成科学计数法的形式：-1.010*2^2，s=1，M=1.010，E=2</p><p>表示好之后，我们将它存入内存。IEEE 754规定，对于32位的单精度浮点数，最高位是符号位S，占1位，然后是指数位E，占8位，最后是有效数字M，占23位；对于双精度浮点数，占位分别为1，11，52，我们这里主要介绍float的存储。</p><p>![单精度浮点数在内存中的存储](<img src="!%5B%5D(https://panghu-1256092140.cos.ap-beijing.myqcloud.com/%20tuchuang-master/20220331141200.png)20220304184553.png" alt=""></p><p>关于存储，E和M有一些特殊规定：</p><p>M范围是[1，2），所以保存时干脆省略1，比如-5.0的M是1.010，保存时直接写成010，后面再加20个0，凑够23位。即01000000000000000000.</p><p>E是无符号整数，但科学计数法E可能有负数，所以存入内存时，8位E加上127，11位E加上1023加以修正，比如-5.0的E是2，保存时加上127就是129，即10000001.</p><p>所以浮点数-5.0在内存中的存储是11000000101000000000000000000，用16进制表示就是0xc0a00000</p><p><img src="https://panghu-1256092140.cos.ap-beijing.myqcloud.com/tuchuang-master/20220304184600.png" alt="-5.0的地址"></p><p>以上是关于浮点数存储的规则，下面是从内存中取出的规则。如何取出，分3种情况，全看E。</p><p>①E不全为0或不全为1时，怎样存储的，就怎样取出。存储时M省略了1，取出是再加上1，存储时E加了127修正，取出时再减去127。</p><p>②E全为0，E=1-127=-126，M不再加上1，而是还原成0.xxxxx；</p><p>③E全为1，这时，如果有效数字M全为0，表示±无穷大（正负取决于符号位s）</p><p>关于E取出的规则，简单了解下就好。</p><p>我们了解了IEEE标准之后，知道了浮点数在内存中的存储规则，下面来看一下上面那段代码。</p><p>第一个printf语句打印的是整数，整数存储，整数打印，结果当然是9；</p><p>第二个printf语句是以浮点数打印，结果是0.000000，以整数存储，以浮点数取出，结果必然不同。9以整数存储，二进制就是00000000000000000000000000001001，S=0，E=00000000，M=00000000000000000001001，以浮点数取出，因为E全为0，所以取出时E=1-127=-126，M忽略1，还原成0.00000000000000000001001，所以结果就是(-1)^0 * 0.00000000000000000001001 * 2^-126,也就是0.000000.</p><p>第三个printf语句是以整数打印，以浮点数存储，以整数取出，结果必然不同。9.0以浮点数存储，二进制就是1001.0，科学计数法表示为1.0010*2^3,其中S=1，E=3，M=1.0010，根据存储规则，存入内存中时，E=3+127=130，即10000010，M忽略1，结果为0010，凑够23位，即00100000000000000000000，占位比S:E:M=1:8:23,最终结果是01000001000100000000000000000000。以浮点数存储后，以整型打印，会将其视为整数，最高位是符号位0，正数原码反码补码一样，最终结果是1,091,567,616</p><p>第四个printf语句打印的是浮点数，以浮点数存储，以浮点数打印，结果是9.0；</p><p>好了，说了这么多，一言以蔽之：整数和浮点数在内存中的存储规则不同，导致输出结果不同。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>倒置字符串，我爱中国，中国爱我。</title>
      <link href="/2022/02/28/C-reverse/"/>
      <url>/2022/02/28/C-reverse/</url>
      
        <content type="html"><![CDATA[<p>描述：将一句话的单词进行倒置，标点不倒置。比如 I like China. 经过函数后变为：China. like I</p><p>有些时候，主语和宾语位置互换词义不会改变。比如，一件衣服穿两天，两天穿一件衣服。北京是首都，首都是北京。如果你已经读完了这段话，恭喜你已经浪费了几秒钟，这和这道编程题没什么关系……</p><p>思路：我们可以<strong>两次使用字符串逆序</strong>，第一次先将字符串整体逆序，第二次将单个单词再逆序。逆序字符串，无非是找到字符串的起始位置和结束位置，也就是左下标和右下标，当左下标地址小于右下标地址时，互换两个下标位置的字符串。<strong>关键在于寻找起始位置和结束位置</strong>，例如字符串arr，第一次字符串整体逆序，起始位置就是字符串的首地址arr，结束位置就是<code>起始位置+字符串长度-1</code>.第二次逆序每个单词，起始位置就是每个单词的起始位置，结束位置是空格或字符串0的前一位置。逆序每个单词要注意何时进行逆序，遍历整个字符串，当arr[i]的元素为空格或字符串0时，进行单词的逆序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>* start, <span class="keyword">char</span>* end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = *start;</span><br><span class="line">        *start = *end;</span><br><span class="line">        *end = tmp;</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    gets(arr);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(arr);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//先将字符串整体翻转</span></span><br><span class="line">    reverse(arr, arr + len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">char</span>* a = arr;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;=len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == <span class="string">&#x27; &#x27;</span> || arr[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            reverse(a, arr + i<span class="number">-1</span>);<span class="comment">//空格之前的再一次翻转，两次翻转正好</span></span><br><span class="line">            a = (arr + i + <span class="number">1</span>);     </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220228175122.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多种方法求两个正整数的最大公约数和最小公倍数</title>
      <link href="/2022/02/27/C-LCM/"/>
      <url>/2022/02/27/C-LCM/</url>
      
        <content type="html"><![CDATA[<p>鲁迅说过：“求解最大公约数和最小公倍数有很多方法”，公约数，就是几个数共有的约数，最大公约数，就是公约数中最大的那个数，公倍数，就是几个数共有的倍数，最小公倍数，就是公倍数中最小的那个数。虽然看起来是句废话，其实它就是废话……下面我们看一下求解最大公约数和最小公倍数的几种方法。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220227183031.png" alt=""></p><h3 id="求任意两个正整数的最大公约数">求任意两个正整数的最大公约数</h3><p>最大公约数（Greatest Common Divisor，GCD），先说约数，a能被b整除，b就是a的约数，几个数共有的约数就是这几个数的公约数，公约数中最大的那个数就是最大公约数。举个例子，4和20的公约数有1，2，4，最大公约数是4。可见两个数的最大公约数必不大于两数中最小的那个。</p><p>思路一：如果求出最大公约数，穷举法从小到大（从1到两数中较小的一个）遍历，然后输出最大的那个，这样做比较麻烦，不妨我们从大到小（从两数中较小的一个到1）遍历，第一个能同时整除两个数的那个即为所求。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="comment">//a中存储较大的那个数，b存储小数，当a&lt;b时交换两数</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从b到1遍历，找最大公约数</span></span><br><span class="line"><span class="keyword">for</span> (i = b; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="comment">//同时整除两个数的那个数即为所求，找到后break结束遍历</span></span><br><span class="line"><span class="keyword">if</span> (a % i == <span class="number">0</span> &amp;&amp; b % i == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路二：我们可以用辗转相除法求最大公约数，例如15和20两个数，15%20=15，20%15=5，15%5=0，两数相除，将除数当作下个算式的被除数，余数当作除数，如此往复，当余数为0时，最后一个算式的除数5就是15和20的最大公约数。我可能说的有些复杂了，看代码就懂了，还有这一思路的妙处是不用判断两数的大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c = b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="comment">//辗转相除，余数为0跳出循环</span></span><br><span class="line"><span class="keyword">while</span> (a % b != <span class="number">0</span>) &#123;</span><br><span class="line">c = a % b;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求任意两个正整数的最小公倍数">求任意两个正整数的最小公倍数</h3><p>最小公倍数（Least Common Multiple，LCM），若a能被b整除，a就是b的倍数，对于两个整数来说，两数共有倍数中最小的一个便是最小公倍数。</p><p>思路一：我们可以借助最大公约数求最小公倍数。<strong>两数乘积除以最大公约数便是最小公倍数</strong>。若a和b的最大公约数是c，那么最小公倍数便是<strong>a*b/c</strong>，最大公约数的求法如上，这一思路这里不再列出代码。</p><p>思路二：两个数的最小公倍数就是能被两数整除的那个最小的数（废话文学），如果较大的数能被较小的数整除，那么较大的数就是两数的最小公倍数，否则要从较大的数开始，一次向上遍历，知道找出能同时被两数整除的那个数。举个例子，5和25，25能被5整除，25就是5和25的最小公倍数；5和7，较大的数7不能被5整除，7一直加1，变成8，9，10……，35，知道35，35能被5和7整除，35便是5和7的最小公倍数。废话有点多了，上代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="comment">//a存放两数中较大的那个，b存放小数</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从最大数开始向上计数</span></span><br><span class="line"><span class="keyword">for</span> (i = a; i &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line"><span class="comment">//找出最小公倍数，退出循环</span></span><br><span class="line"><span class="keyword">if</span> (i % a == <span class="number">0</span> &amp;&amp; i % b == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路三：众所周知，5和7的最小公倍数是35，35能被5和7同时整除（又是一句废话），看下面这个算式：<strong>5*i%7=0</strong>，<code>5*i</code>的结果既能被5整除，也能被7整除，所以<code>5*i</code>便是5和7的最小公倍数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">while</span> (a * i % b) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a * i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio环境下一段有趣的代码</title>
      <link href="/2022/02/26/C-Traps-Pitfalls/"/>
      <url>/2022/02/26/C-Traps-Pitfalls/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;youngsay.cn\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察这段代码，运行会有何效果？</p><p>你可能会说，既然越界访问了，那不就报错了？其实不然，运行发现，程序没有报错，一直死循环。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220226211523.png" alt="运行效果"></p><p><strong>注意：该段代码依赖环境，vs编译器，debug模式，x86平台下才有这样的效果。</strong></p><p>为什么陷入了死循环，这要从栈区的使用习惯开始说起。静态变量，函数形参都存放到栈中，而栈是从高地址开始存放。**栈区的使用习惯是先使用高地址处的空间。**我们还知道，**数组随着下标变大，地址是由低到高变化的。**所以上段代码在栈中的内存布局，如下图所示。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220226211531.png" alt="栈内存布局"></p><p>vs编译器，debug模式，x86平台下，i和数组arr间刚好空了2个下标的空间。所以i和arr[12]指向了同一块地址，不信我们可以调试看一下i和arr[12]的地址。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220226211914.png" alt="地址比较"></p><p>当i自增到12，执行<code>arr[12]=0</code>时，因为共用同一块空间，i也变成了0，0&lt;12,再一次进入了循环，如此往复便陷入了死循环。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现简单的扫雷游戏</title>
      <link href="/2022/02/09/sweep-mine/"/>
      <url>/2022/02/09/sweep-mine/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《扫雷》是一款大众类的益智小游戏，游戏目标是在最短的时间内根据点击格子出现的数字找出所有非雷格子，同时避免踩雷，踩到一个雷即全盘皆输。</p></blockquote><p>这篇博客教大家用C语言制作一个简易版扫雷游戏，和之前的井字棋大同小异。</p><p>我们准备三个文件,分别为<code>game.c</code>,<code>test.c</code>,<code>game.h</code></p><p><code>game.c</code>文件用来写实现游戏功能的各个函数代码,<code>test.c</code>文件写游戏的总流程,<code>game.h</code>文件用来声明函数和初始值.</p><p>先看<code>test.c</code>，由<code>menu()``game()``main()</code>三个函数组成。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;game.h&quot;</span></span></span><br><span class="line">menu()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----1.开始游戏-----\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----2.退出游戏-----\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">game()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//棋盘——后台</span></span><br><span class="line"><span class="keyword">char</span> mine[ROWS][COLS] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//棋盘——玩家</span></span><br><span class="line"><span class="keyword">char</span> show[ROWS][COLS] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//初始化棋盘</span></span><br><span class="line">init_arr(mine, ROWS, COLS,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">init_arr(show, ROWS, COLS, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line">display_arr(show, ROW, COL);</span><br><span class="line"><span class="comment">//display_arr(mine, ROW, COL);</span></span><br><span class="line"><span class="comment">//放炸弹</span></span><br><span class="line">set_mine(mine, ROW, COL);</span><br><span class="line"><span class="comment">//排雷</span></span><br><span class="line">set_coordinate(mine, show, ROW, COL);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入选项&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">game();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;退出游戏\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误，请重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是<code>game.h</code>头文件,文件内是头文件的引用,数据的初始化,游戏函数的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROWS 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLS 11</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINE 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化棋盘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> rows, <span class="keyword">int</span> cols,<span class="keyword">char</span> <span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_arr</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//放炸弹</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_mine</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//排雷</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_coordinate</span><span class="params">(<span class="keyword">char</span> mine[ROWS][COLS], <span class="keyword">char</span> show[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br></pre></td></tr></table></figure><p>我们定义了两个棋盘，一个用来放雷（玩家看不到），一个用来展示玩家选定的位置四周的地雷数。如果是9x9的棋盘，当玩家选择边界位置（如1 1），程序检索其四周的地雷会造成越界访问，所以将棋盘做成11x11，但只打印9x9给玩家。</p><p>下面是<code>game.c</code>文件，我们来看下各个函数是如何实现的。</p><p>首先是初始化棋盘<code>init_arr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> rows, <span class="keyword">int</span> cols,<span class="keyword">char</span> <span class="built_in">set</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">arr[i][j] = <span class="built_in">set</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形参有4个，分别是棋盘，行数，列数，放置的元素。便利整个棋盘，将棋盘初始化。mine棋盘初始化为0，表示不是地雷，1表示地雷；show棋盘初始化为*，展示给玩家。</p><p>接着是打印棋盘<code>display_arr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_arr</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//打印一个列号【列号就是单独的一行】</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= row; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= row; i++) &#123;</span><br><span class="line"><span class="comment">//打印一个行号【行号就是单独的一列】</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的参数的棋盘，行数，列数，注意这里的行数列数都是9，与初始化不同。为了方便玩家操作，我们在棋盘上标上对应的行数和列数，如下图所示。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220209181958.png" alt="image-20220209171309296"></p><p>接下来布置地雷<code>set_mine</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_mine</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( count &lt; MINE)</span><br><span class="line">&#123;</span><br><span class="line">x = rand() % row + <span class="number">1</span>;</span><br><span class="line">y = rand() % col + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[x][y] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">arr[x][y] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MINE</code>是10，当count&lt;10,生成1-9的随机数，如果坐标位置是0，将该位置置为地雷，count++，直到地雷数为10。</p><p>最后是排雷<code>set_coordinate</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howmuch_mine</span><span class="params">(<span class="keyword">char</span> mine[ROWS][COLS],<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> mine[x][y + <span class="number">1</span>] + mine[x - <span class="number">1</span>][y + <span class="number">1</span>] + mine[x - <span class="number">1</span>][y] + mine[x - <span class="number">1</span>][y - <span class="number">1</span>] + mine[x][y - <span class="number">1</span>] + mine[x + <span class="number">1</span>][y - <span class="number">1</span>] + mine[x + <span class="number">1</span>][y] + mine[x + <span class="number">1</span>][y + <span class="number">1</span>] - <span class="number">8</span> * <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排雷</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_coordinate</span><span class="params">(<span class="keyword">char</span> mine[ROWS][COLS], <span class="keyword">char</span> show[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (counts&lt;(ROW*COL-MINE))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入坐标&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (x &gt;=<span class="number">1</span> || x&lt;=col &amp;&amp; y &gt;&gt;<span class="number">1</span> || y&lt;=col)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (show[x][y] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (mine[x][y] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;很遗憾，你被炸了！\n&quot;</span>);</span><br><span class="line">display_arr(mine, ROW, COL);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//计算炸弹数</span></span><br><span class="line"><span class="keyword">int</span> count = howmuch_mine(mine, x, y);</span><br><span class="line">show[x][y] = count + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">display_arr(show, ROW, COL);</span><br><span class="line">counts++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标已被占用，请重新输入\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标非法，请重新输入&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (counts == (ROW * COL - MINE)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恭喜你，排雷成功\n&quot;</span>);</span><br><span class="line">display_arr(mine, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入坐标，判断坐标的合法性，当坐标合法时，如果坐标处是地雷，结束游戏。如果坐标处不是地雷，将show棋盘坐标处的*改成炸弹数，这里需要计算炸弹数，单独写成<code>howmuch_mine</code>函数。函数逻辑是将<code>mine</code>棋盘坐标处四周的元素（8个）相加，无外乎就是字符0或1，再减去8x字符‘0’，这样结果就是地雷个数。</p><p>游戏怎样终止呢，排雷成功的条件是什么？9x9的棋盘，10个地雷，理应排71次，将排雷流程写入while语句，定义次数counts，当counts小于71，进入循环，成功排雷1次counts+1，如此往复。跳出while循环后，如果counts为71，排雷成功，打印地雷棋盘<code>mine</code>。</p><p>大概思路就是这样，一个简单的扫雷游戏就做好了，哪里有错误欢迎评论区指出。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现简单的井字棋游戏</title>
      <link href="/2022/01/25/Tic-Tac-Toe/"/>
      <url>/2022/01/25/Tic-Tac-Toe/</url>
      
        <content type="html"><![CDATA[<blockquote><p>井字棋，英文名叫Tic-Tac-Toe，是一种在3*3格子上进行的连珠游戏，和五子棋类似，由于棋盘一般不画边框，格线排成井字故得名。</p></blockquote><p>想必大家小时候都玩过井字棋,今天分享大家一个用C语言做简单的井字棋游戏的教程,通过井字棋游戏,既能回忆起童年的美好,也能熟悉简单的C语言语法.</p><p>游戏演示：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220125231500.gif" alt="动画"></p><p>我们准备三个文件,分别为<code>game.c</code>,<code>test.c</code>,<code>game.h</code></p><p><code>game.c</code>文件用来写实现游戏功能的各个函数代码,<code>test.c</code>文件写游戏的总流程,<code>game.h</code>文件用来声明函数和初始值.</p><p>先来看<code>test.c</code>文件</p><p>文件内有三个函数,分别为菜单,游戏,主函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------1.开始游戏-----\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------2.退出游戏-----\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单很简单,就是开始游戏和退出游戏.我们可以在主函数中switch-case语句实现,输入1开始游戏,输入2退出游戏,其他输入均提示重新输入.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">menu();</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入选项\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">game();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>玩家输入1后进入游戏函数,游戏函数内对函数进行调用,函数的声明放在game.h头文件,定义放在game.c源文件.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">game</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> rst = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> board[ROW][COL] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//初始化棋盘</span></span><br><span class="line">InitBoard(board,ROW,COL);</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line">player_move(board, ROW, COL);</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line"><span class="comment">//判断输赢</span></span><br><span class="line">rst = isWinner(board,ROW,COL);</span><br><span class="line"><span class="keyword">if</span> (rst != <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line">computer_move(board, ROW, COL);</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line">rst = isWinner(board, ROW, COL);</span><br><span class="line"><span class="keyword">if</span> (rst != <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rst == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恭喜你，赢得了胜利！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (rst == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;很遗憾，你输了！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;平局了\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来简单说一下我们要实现的功能.首先,要初始化一个棋盘,我们可以用用三行三列的数组.玩家开始游戏,要将空棋盘显示给玩家,这时我们要打印棋盘.接着玩家下棋,输入坐标,将坐标处放上棋子,我们用*代表玩家的棋子,玩家下好后电脑下棋,用#代表电脑.当玩家或电脑先实现三个棋子连在一起,游戏结束.</p><p>下面是game.h头文件,文件内时头文件的引用,数据的初始化,游戏函数的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化棋盘的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">player_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">computer_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//判断输赢</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">isWinner</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br></pre></td></tr></table></figure><p>下面是game.c文件的各个函数的定义</p><p>首先是初始化棋盘,便利3x3的数组,将数组内的元素置为空格字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化棋盘的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">board[i][j] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是打印棋盘,打印棋盘很简单,但为了美观要将棋盘打印为井字,所以要花一些巧思</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %c &quot;</span>, board[i][j]);</span><br><span class="line"><span class="keyword">if</span> (j &lt; col - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (i &lt; row - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (j &lt; col - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是玩家下棋,当玩家输入的坐标小于1或大于3的,提示坐标非法,当坐标合法且该位置没有棋子将该坐标放上棋子*</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">player_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;玩家下棋&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">1</span> || x&gt;row || y&lt;<span class="number">1</span> || y&gt;col) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标非法\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (board[x - <span class="number">1</span>][y - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">board[x - <span class="number">1</span>][y - <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是电脑下棋,使用rand()和srand()生成随机值,rand()%row生成的值是0-2,+1后就是1-3,纵坐标同理,如果坐标处没有棋子放上棋子#</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">computer_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑下棋\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = rand() % row;</span><br><span class="line">y = rand() % col;</span><br><span class="line"><span class="keyword">if</span>(board[x][y] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最关键一步就是判断输赢,判断输赢无非就是行,列和对角线.除了输赢,还有平局,isPeace函数是用来判断平局,遍历棋盘,如果有至少一处为空,继续游戏,如果棋盘满了则为平局.返回*  玩家赢,返回#  电脑赢,返回Q  平局,返回C  继续.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPeace</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断输赢</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">isWinner</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断行</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][<span class="number">0</span>] == board[i][<span class="number">1</span>] &amp;&amp; board[i][<span class="number">1</span>] == board[i][<span class="number">2</span>] &amp;&amp; board[i][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[i][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断列</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][j] == board[<span class="number">1</span>][j] &amp;&amp; board[<span class="number">1</span>][j] == board[<span class="number">2</span>][j] &amp;&amp; board[<span class="number">1</span>][j] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断对角线</span></span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">2</span>][<span class="number">2</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">2</span>][<span class="number">0</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">2</span>] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断平局</span></span><br><span class="line"><span class="keyword">if</span> (isPeace(board, row, col) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是一个用c语言制作简单的井字棋的介绍.代码和逻辑都很简单,只需要一些基础的c语言知识便可实现.技术有限,哪里有请指正,任何问题欢迎评论区留言交流.</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】分支和循环语句常见问题</title>
      <link href="/2022/01/16/C-branch-loop/"/>
      <url>/2022/01/16/C-branch-loop/</url>
      
        <content type="html"><![CDATA[<h1>分支语句</h1><h2 id="if-else语句">if-else语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;panghu\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;胖虎\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;panghu\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：panghu</span></span><br></pre></td></tr></table></figure><p>观察上面两段代码，输出结果分别是什么？</p><p>由此可知：else的匹配规则：else总是与<strong>离它最近的未匹配的</strong>if匹配，与缩进无关。</p><h2 id="switch-case语句">switch-case语句</h2><p>switch()括号内是整形表达式。</p><p>case后接整型常量表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span> , &amp;i);</span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;工作日\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;休息日\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>思考下面代码，输出结果是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">switch</span> (n)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            m++;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            n++;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">switch</span> (n)</span><br><span class="line">           &#123;<span class="comment">//switch允许嵌套使用</span></span><br><span class="line">             <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    n++;</span><br><span class="line">             <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    m++;</span><br><span class="line">                    n++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            m++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;m = %d, n = %d\n&quot;</span>, m, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5 3</span></span><br></pre></td></tr></table></figure><h1>循环语句</h1><h2 id="continue比较">continue比较</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i); </span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察上端代码，打印结果是什么？</p><p>结果为1234，然后死循环。</p><p><code>continue</code>是结束本次循环，进入下次循环。当i=5时进入if语句，然后跳出，然后再进入，以此往复。</p><p>再看下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是12346789，与while循环相比，这次遇到continue跳出本次循环后能够让<code>i</code>自增，不会进入死循环。</p><h2 id="getchar-和putchar"><code>getchar()</code>和<code>putchar()</code></h2><p>缓存区问题：</p><pre><code>char arr[20] = &#123; 0 &#125;;printf(&quot;请输入密码\n&quot;);scanf(&quot;%s&quot; , arr);printf(&quot;请确认密码 Y/N\n&quot;);int ch = getchar();if ('Y' == ch) &#123;    printf(&quot;确认成功\n&quot;);&#125;else &#123;    printf(&quot;确认失败\n&quot;);&#125;</code></pre><p>当我输入1234时，还没等确认，直接提示确认失败。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117092528.png" alt="image-20220115154137025"></p><p>原因是当我输入1234后会按回车换行，也就是<code>\n</code>，此时缓存区会存在<code>\n</code>，<code>getchar()</code>会从缓存区取出<code>\n</code>，ch=<code>\n</code>，不等于Y，弹出确认失败。</p><p>如何解决这种问题？</p><p>**方法1：**在<code>scanf</code>语句后面加上<code>getchar()</code>来取出<code>\n</code>，这样ch再访问缓存区就为空了。但这样也有弊端，例如当我输入1234 abcd时又出现错误了。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117092537.png" alt="image-20220115154856069"></p><p>原因是输入格式%s只读取空格之前的内容，而<code>getchar()</code>只能读取一个字符，所以ch再次读取时发现缓存区还有其他字符且不是Y，提示确认失败·。</p><p><strong>方法2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> arr[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span> , arr);</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((tmp = getchar()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认密码 Y/N\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> ch = getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;Y&#x27;</span> == ch) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;确认失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用while循环，多次读取，直到缓存区为空，跳出循环。</p><h2 id="赋值和判断">赋值和判断</h2><p>观察下面代码，该代码循环几次？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, k = <span class="number">0</span>; k = <span class="number">0</span>; i++, k++)</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>循环0次。为什么呢？原因是判断部分写成了k=0，<code>=</code>为赋值，使得条件为假，不进入for循环，代码执行0次。</p><h2 id="循环的应用：">循环的应用：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归求5的阶乘</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rst = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">rst = rst * i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, rst);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求1!+2!+……+5！之和</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rst = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">rst = rst * i;</span><br><span class="line">sum += rst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br></pre></td></tr></table></figure><h2 id="strcmp"><code>strcmp()</code></h2><p>C 库函数 <strong>int strcmp(const char *str1, const char *str2)</strong> 把 <strong>str1</strong> 所指向的字符串和 <strong>str2</strong> 所指向的字符串进行比较。</p><p>该函数返回值如下：</p><ul><li>如果返回值小于 0，则表示 str1 小于 str2。</li><li>如果返回值大于 0，则表示 str1 大于 str2。</li><li>如果返回值等于 0，则表示 str1 等于 str2。</li></ul><p>因此比较两个字符串值是否相同时，不能用<code>==</code>，应该用<code>strcmp()</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str1[<span class="number">15</span>];</span><br><span class="line">   <span class="keyword">char</span> str2[<span class="number">15</span>];</span><br><span class="line">   <span class="keyword">int</span> ret;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>(str1, <span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>(str2, <span class="string">&quot;ABCDEF&quot;</span>);</span><br><span class="line"> </span><br><span class="line">   ret = <span class="built_in">strcmp</span>(str1, str2);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;str1 小于 str2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(ret &gt; <span class="number">0</span>) </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;str1 大于 str2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;str1 等于 str2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rand-和srand"><code>rand()</code>和<code>srand()</code></h2><p><code>rand()</code>:Generates a pseudorandom number. 生成一个伪随机值</p><p><strong>int</strong> <strong>rand(</strong> <strong>void</strong> <strong>);</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,rand());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand());</span><br></pre></td></tr></table></figure><p>运行上段代码，会发现每次运行结果都一样，这不是我们理想中的随机值。</p><p>Use the <a href="_crt_srand.htm">srand</a> function to seed the  pseudorandom-number generator before calling <strong>rand</strong>.</p><p>我们可以用<code>srand()</code>来使伪随机值变化。Sets a random starting point.</p><p><strong>void</strong> <strong>srand(</strong> <strong>unsigned</strong> <strong>int</strong> <em>seed</em>  <strong>);</strong></p><p>我们可以用时间作为参数，只要每次播种的时间不同，那么生成的种子就不同，最终的随机数也就不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    a = rand();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/2043.html">C语言随机数生成教程，C语言rand和srand用法详解 (biancheng.net)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】类和对象</title>
      <link href="/2022/01/14/Java-class-object/"/>
      <url>/2022/01/14/Java-class-object/</url>
      
        <content type="html"><![CDATA[<p>类的成员：字段、方法、代码块、内部类和接口等</p><h3 id="字段">字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br></pre></td></tr></table></figure><p>age，name，sex这些类中方法外的变量，是字段、属性、成员变量（3种称呼均可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类的实例化</span></span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(person.name);<span class="comment">//null</span></span><br><span class="line">        System.out.println(person.age);<span class="comment">//0</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的字段如果没有初始化，访问时会被设置成默认值。</p><blockquote><p>默认值规则</p><ul><li><p>对于各种数字类型, 默认值为 0.</p></li><li><p>对于 boolean 类型,默认值为 false.</p></li><li><p>对于引用类型(String, Array, 以及自定制类), 默认值为 null</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">at TestDemo.main(TestDemo.java:15)</span><br></pre></td></tr></table></figure><p>对null进行访问，会出现空指针异常。</p><h3 id="方法">方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//字段、成员变量、属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;正在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类的实例化</span></span><br><span class="line">        Person person=<span class="keyword">new</span> Person(<span class="string">&quot;panghutx&quot;</span>);</span><br><span class="line">        person.study();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中的study()就是一个方法，和之前学到的方法（c语言为函数没什么区别）</p><pre><code>public Person(String name) &#123;    this.name = name;&#125;</code></pre><p>上段代码是一个构造方法</p><p>构造方法是一种特殊方法, 使用关键字new实例化新对象时会被自动调用, 用于完成初始化操作。局部变量必须初始化，否则会编译失败，而成员变量无需初始化，原因在于构造方法为各成员进行了初始化。</p><p>语法规则：<strong>方法名与类名一致，没有返回值，支持重载</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//不带参数的构造方法</span><br><span class="line">public Person()&#123;</span><br><span class="line">    System.out.println(&quot;I am the constructor method of zero Parameter  &quot;);</span><br><span class="line">&#125;</span><br><span class="line">//带有3个参数的构造方法</span><br><span class="line">public Person(String name,int age,String sex)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.age=age;</span><br><span class="line">    this.sex=sex;</span><br><span class="line">    System.out.println(&quot;I am the constructor method of three Parameters  &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//类的实例化</span><br><span class="line">Person person1=new Person();</span><br><span class="line">Person person2=new Person(&quot;panghutx&quot;,12,&quot;male&quot;);</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am the constructor method of zero Parameter  </span><br><span class="line"></span><br><span class="line">I am the constructor method of three Parameters</span><br></pre></td></tr></table></figure><h3 id="代码块">代码块</h3><p>使用<code>&#123;&#125;</code>定义的一段代码.分为本地代码块、实例代码块和静态代码块，定义在方法中的代码块是本地代码块，定义在类中的代码块是实例代码块（也叫构造代码块），由static修饰的是静态代码块。</p><h4 id="构造代码块">构造代码块</h4><p>构造代码块(实例代码块)：定义在类中的代码块(不加修饰符)。构造代码块一般用于初始化实例成员变量。</p><p>实例代码块优先于构造函数执行。</p><h4 id="静态代码块">静态代码块</h4><p>使用static定义的代码块。一般用于初始化静态成员属性。</p><p>静态代码块不管生成多少个对象，<strong>其只会执行一次，且是最先执行的</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">private</span> String name;<span class="comment">//实例成员变量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line"> <span class="keyword">private</span> String sex; </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//静态成员变量 由类共享数据 方法区</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123; </span><br><span class="line"> System.out.println(<span class="string">&quot;I am Person init()!&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//实例代码块</span></span><br><span class="line"> &#123; </span><br><span class="line"> <span class="keyword">this</span>.name = <span class="string">&quot;bit&quot;</span>; </span><br><span class="line"> <span class="keyword">this</span>.age = <span class="number">12</span>; </span><br><span class="line"> <span class="keyword">this</span>.sex = <span class="string">&quot;man&quot;</span>; </span><br><span class="line"> System.out.println(<span class="string">&quot;I am instance init()!&quot;</span>); </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//静态代码块</span></span><br><span class="line"> <span class="keyword">static</span> &#123; </span><br><span class="line"> count = <span class="number">10</span>;<span class="comment">//只能访问静态数据成员 </span></span><br><span class="line"> System.out.println(<span class="string">&quot;I am static init()!&quot;</span>); </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; </span><br><span class="line"> System.out.println(<span class="string">&quot;name: &quot;</span>+name+<span class="string">&quot; age: &quot;</span>+age+<span class="string">&quot; sex: &quot;</span>+sex); </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"> Person p1 = <span class="keyword">new</span> Person(); </span><br><span class="line"> Person p2 = <span class="keyword">new</span> Person();<span class="comment">//静态代码块是否还会被执行？</span></span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am static init()!</span><br><span class="line">I am instance init()!</span><br><span class="line">I am Person init()!</span><br><span class="line">I am instance init()!</span><br><span class="line">I am Person init()!</span><br></pre></td></tr></table></figure><h3 id="static关键字">static关键字</h3><p>static修饰属性、方法、类、代码块</p><h4 id="static修饰属性">static修饰属性</h4><p>static修饰的属性不与对象绑定，所有类共享，只有一份，存在于方法区。</p><p>访问方法：类名<code>.</code>static属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestDemo t1 = <span class="keyword">new</span> TestDemo();</span><br><span class="line">        t1.a++;</span><br><span class="line">        TestDemo.count++;</span><br><span class="line">        System.out.println(t1.a);</span><br><span class="line">        System.out.println(TestDemo.count);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        TestDemo t2 = <span class="keyword">new</span> TestDemo();</span><br><span class="line">        t2.a++;</span><br><span class="line">        TestDemo.count++;</span><br><span class="line">        System.out.println(t2.a);</span><br><span class="line">        System.out.println(TestDemo.count);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">============</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="static修饰方法">static修饰方法</h4><p>static修饰的方法无需创建对象，可以由类直接调用，调用方法：类名<code>.</code>方法。静态方法只能访问静态变量，不能访问非静态变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//a = 10; error 不可以访问非静态数据成员</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestDemo.change()；<span class="comment">//无需创建实例对象 就可以调用</span></span><br><span class="line">        System.out.println(TestDemo.count);   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>this</code>和<code>super</code>两个关键字不能在静态上下文中使用(this 是当前实例的引用, super是当前实例父类实例的引用, 也是和当前实例相关).</p><h3 id="this关键字">this关键字</h3><p><code>this</code>关键字代表<strong>当前对象的引用</strong>，不是当前对象。</p><p>一个对象的产生分为两步：</p><p>①为对象分配内存②调用合适的构造方法</p><p>对象的产生需要调用合适的构造方法，在构造方法内部可以使用<code>this</code>，对象还没有产生我们就已经使用了this，恰恰说明this不代表当前对象。</p><p>this的用法：</p><p><code>this()</code>:调用构造方法，该语句必须是构造方法中的第一条语句，否则会编译失败。</p><p><code>this.data</code>:调用当前对象的属性</p><p><code>this.func()</code>:调用当前对象的方法</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】数组的定义和使用</title>
      <link href="/2022/01/12/Java-array/"/>
      <url>/2022/01/12/Java-array/</url>
      
        <content type="html"><![CDATA[<h3 id="一维数组">一维数组</h3><h4 id="一维数组的定义">一维数组的定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//静态创建</span></span><br><span class="line"><span class="keyword">int</span>[] arr1=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//动态创建</span></span><br><span class="line"><span class="keyword">int</span>[] arr2=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h4 id="一维数组的遍历">一维数组的遍历</h4><p>method 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x:arr) &#123;</span><br><span class="line">    System.out.print(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><h4 id="理解引用">理解引用</h4><p><code>int[] arr=new int[]&#123;1,2,3&#125;</code>创建一个数组，变量<code>arr</code>是一个引用类型，里面只保存了一个整数（数组的起始内存地址），指向<code>&#123;1，2，3&#125;</code>的存储地址。</p><p><img src="https://cos.youngsay.cn/blog/20220510175147.png" alt="image-20220101215440175"></p><p>引用，本质上就是存放了一个地址。当数组作为方法的参数时，其实是将数组的首地址作为参数，通过首地址便可以找到数组中的每一个元素。这样的好处是避免了整个数组的拷贝，可以节省内存。</p><h4 id="初识JVM内存区域划分">初识JVM内存区域划分</h4><p><img src="https://cos.youngsay.cn/blog/20220510175213.jpeg" alt="img"></p><ul><li>虚拟机栈：重点存储局部变量表，<code>int[] arr</code>这样的引用类型就存储在这里，每次方法执行时，会创建一个栈帧，方法结束后会自动销毁，栈帧内的数据也会一同销毁。</li><li>堆：JVM管理的最大内存区域，new创建的对象都存储在这里，如<code>new int[]&#123;1，2，3&#125;</code>。程序开始运行，堆创建，程序运行结束，堆销毁。</li><li>方法区：用于存储已被虚拟机加载的类信息、常量、静态变量等数据，字节码文件就保存在方法区。</li></ul><h3 id="二维数组">二维数组</h3><p><img src="https://cos.youngsay.cn/blog/20220510180019.png" alt="二维数组的内存结构"></p><h4 id="二维数组的定义">二维数组的定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] array1=<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] array2=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h4 id="二维数组的遍历">二维数组的遍历</h4><p>method 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">        System.out.print(array[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span>[] x:array) &#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> y:x) &#123;</span><br><span class="line">        System.out.print(y);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(array));</span><br></pre></td></tr></table></figure><h3 id="数组练习">数组练习</h3><h4 id="数组拷贝">数组拷贝</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int[] copyOf(int[] original,int newLength)</span><br></pre></td></tr></table></figure><p><code>original</code> - 要复制的数组<br><code>newLength</code> - 要返回的副本的长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int[] copyOfRange(int[] original,int from,int to)</span><br></pre></td></tr></table></figure><p><code>original</code> - 要从中复制范围的数组<br><code>from</code> - 要复制的范围的初始索引（包括）<br><code>to</code> - 要复制的范围的最终索引（不包括）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2=Arrays.copyOf(arr,arr.length);</span><br><span class="line">System.out.println(Arrays.toString(arr2)); <span class="comment">//&#123;1，2，3，4，5&#125;</span></span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">100</span>;</span><br><span class="line">System.out.println(Arrays.toString(arr2)); <span class="comment">//&#123;1，2，3，4，5&#125;</span></span><br><span class="line">System.out.println(Arrays.toString(arr)); <span class="comment">//&#123;100，2，3，4，5&#125;</span></span><br><span class="line"><span class="keyword">int</span>[] arr3=Arrays.copyOfRange(arr,<span class="number">1</span>,<span class="number">3</span>);  <span class="comment">// 拷贝[1,3)范围内的数组</span></span><br><span class="line">System.out.println(Arrays.toString(arr3)); <span class="comment">//&#123;2，3&#125;</span></span><br></pre></td></tr></table></figure><h4 id="数组排序（冒泡排序）">数组排序（冒泡排序）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr=&#123;<span class="number">11</span>,<span class="number">2</span>,<span class="number">31</span>,<span class="number">14</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    bubbleSort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flg=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">                flg=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flg==<span class="keyword">false</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组排序（偶数在前，奇数在后）">数组排序（偶数在前，奇数在后）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    int[] arr=&#123;1,2,3,4,5&#125;;</span><br><span class="line">    transform(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">public static void transform(int[] arr)&#123;</span><br><span class="line">    int left=0;</span><br><span class="line">    int right=arr.length-1;</span><br><span class="line">    while(left&lt;right)&#123;</span><br><span class="line">        while(left&lt;right&amp;&amp;arr[left]%2==0)&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        //遇到奇数了</span><br><span class="line">        while(left&lt;right&amp;&amp;arr[right]%2!=0)&#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        //遇到偶数了</span><br><span class="line">        if(left&lt;right)&#123;</span><br><span class="line">            int tmp=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找指定数组元素（二分查找）">查找指定数组元素（二分查找）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="comment">//每次范围缩小一半</span></span><br><span class="line">        <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]&lt;target)&#123; <span class="comment">//范围缩小到右半部分</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;target)&#123; <span class="comment">//范围缩小到左半部分</span></span><br><span class="line">            right = mid -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">//找到了，返回下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】基础语法的简单概括</title>
      <link href="/2022/01/08/C-prime-knowledge/"/>
      <url>/2022/01/08/C-prime-knowledge/</url>
      
        <content type="html"><![CDATA[<h3 id="数据类型">数据类型</h3><p>为了更加丰富地表达生活中的各种值，C语言中有不同的数据类型。每个数据类型有其占用空间的大小。我们用<code>sizeof</code>可以获取某个数据类型所占用空间的字节数。</p><p>下面这段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br></pre></td></tr></table></figure><p>在vs2019运行时，输出结果是：1244848</p><p>在linux平台运行时，结果是：1248848</p><p>对比发现，long在不同的编译器结果不同。<strong>c语言并没有规定long的大小，只是规定了sizeof(long)&gt;=sizeof(int)。</strong></p><h3 id="变量的作用域和生命周期">变量的作用域和生命周期</h3><ul><li>作用域：变量作用的范围。变量在哪里可以使用，哪里就是它的作用域。</li></ul><p>局部变量的作用域是变量所在的局部范围；全局变量的作用域是整个工程。</p><ul><li>生命周期：变量由创建到销毁这一时间段</li></ul><p>局部变量的生命周期是：局部变量的作用域；全局变量的生命周期是：整个程序。</p><h3 id="常量">常量</h3><h4 id="字面常量">字面常量</h4><h4 id="const修饰的常变量">const修饰的常变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line">pi = <span class="number">6.66</span>;</span><br><span class="line"><span class="comment">//报错信息：表达式必须是可修改的左值</span></span><br></pre></td></tr></table></figure><p>由const修饰的变量只是不可以再次修改，但本质仍是变量。</p><h4 id="define定义的标识符常量">define定义的标识符常量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, MAX);</span><br></pre></td></tr></table></figure><h4 id="枚举常量">枚举常量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MyEnum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">MALE,</span><br><span class="line">FAMALE,</span><br><span class="line">SECRET</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, MALE); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, FAMALE); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, SECRET); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串">字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> arr2[] = &#123; <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117091149.png" alt="image-20211227094115348"></p><p>字符串的结束标志是一个<code>\0</code>的转义字符。在计算字符串长度的时候<code>\0</code>不算作字符串内容。printf输出内容是<code>\0</code>之前的内容，arr2找不到<code>\0</code>出现了乱码，用<code>strlen</code>计算长度时也会出现随机值。</p><h3 id="转义字符">转义字符</h3><p>下段代码的输出结果是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;c:\test\628\test.c&quot;</span>));</span><br></pre></td></tr></table></figure><p>输出结果是14。</p><p><code>\t</code>-----&gt;水平制表符</p><p><code>\62</code>—&gt;将<strong>8进制数</strong>数字62转换成10进制数字50</p><p>注：</p><p><code>\ddd</code>中ddd表示1-3位八进制数字，范围是0-7，所以上题中是\62，不是\628</p><p><code>\xdd</code>中dd表示2个十六进制数字。 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\x31&#x27;</span>); <span class="comment">//1</span></span><br><span class="line"><span class="comment">//将16进制数字31转换为10进制数字49，ascii码值代表的字符为 ‘1’</span></span><br></pre></td></tr></table></figure><h3 id="关键字">关键字</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span>  <span class="keyword">break</span>  <span class="keyword">case</span>  <span class="keyword">char</span>  <span class="keyword">const</span>  <span class="keyword">continue</span>  <span class="keyword">default</span>  <span class="keyword">do</span>  <span class="keyword">double</span> <span class="keyword">else</span>  <span class="keyword">enum</span> </span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span>  <span class="keyword">for</span>  <span class="keyword">goto</span>  <span class="keyword">if</span>  <span class="keyword">int</span>  <span class="keyword">long</span>  <span class="keyword">register</span>   <span class="keyword">return</span>  <span class="keyword">short</span>  <span class="keyword">signed</span></span><br><span class="line"><span class="keyword">sizeof</span>  <span class="keyword">static</span> struct  <span class="keyword">switch</span>  <span class="keyword">typedef</span> <span class="keyword">union</span>  <span class="keyword">unsigned</span>  <span class="keyword">void</span>  <span class="keyword">volatile</span>  <span class="keyword">while</span></span><br></pre></td></tr></table></figure><h4 id="define">define</h4><h5 id="定义标识符常量">定义标识符常量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[N] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义宏">定义宏</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b)(a)&gt;(b)?(a):(b)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, MAX(x,y)); <span class="comment">//20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="static">static</h4><blockquote><p>static是用来修饰变量和函数的</p><ol><li>修饰局部变量-称为静态局部变量</li><li>修饰全局变量-称为静态全局变量</li><li>修饰函数-称为静态函数</li></ol></blockquote><h5 id="修饰局部变量">修饰局部变量</h5><p>观察下面两段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">b++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b); <span class="comment">//12345</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">b++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b); <span class="comment">//11111</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比发现，static修饰局部变量改变了变量的生命周期，让静态局部变量出了作用域依然存在，到程序结束，生命周期才结束。</p><p>static修饰局部变量时，改变了局部变量的存储位置，将局部变量由堆区存储到静态区。</p><h5 id="修饰全局变量和函数">修饰全局变量和函数</h5><p>一个全局变量（函数）被static修饰，使得这个全局变量（函数）只能在本源文件内使用，不能在其他源文件内使<br>用。</p><p>全局变量（函数）具有外部链接属性，可以用extern外部引用，但被static修饰后，外部链接变成了内部链接，只能在当前源文件内部使用。</p><h4 id="typedef">typedef</h4><p>类型重命名：使类型名简单化，书写更方便</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将类型unsigned int重命名为uint_32，下次可以直接使用类型uint_32</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint_32;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">uint_32 b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体">结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义结构体类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> sex[<span class="number">6</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//d</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stu</span><span class="params">(struct MyStruct* ps)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d,%s&quot;</span>, ps-&gt;name, ps-&gt;age, ps-&gt;sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//结构体实例化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> <span class="title">stu1</span> =</span> &#123;<span class="string">&quot;菜鸟小胖p&quot;</span>,<span class="number">20</span>,<span class="string">&quot;保密&quot;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> <span class="title">stu2</span> =</span> &#123; <span class="string">&quot;小明&quot;</span>,<span class="number">101</span>,<span class="string">&quot;男&quot;</span> &#125;;</span><br><span class="line"><span class="comment">//打印结构体</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d,%s\n&quot;</span>, stu1.name, stu1.age, stu1.sex);</span><br><span class="line"><span class="comment">//函数打印结构体</span></span><br><span class="line">stu(&amp;stu2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年度总结</title>
      <link href="/2022/01/01/2021/"/>
      <url>/2022/01/01/2021/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2022年来了，我又长大了一岁。</p><p>过去这一年，有快乐有失落，有收获有遗憾。</p><p>伤感的话不再说，遗憾的事不再提，新的一年继续好好生活。</p></blockquote><p>等等，在好好生活之前还是写一下年终总结吧，虽然今天已经是2022年……</p><p>回顾过去的这一年，**每一天都很平常，有时很快乐，有时会难过，也许有成长，难免有遗憾。**就在这平凡的一天又一天中，平凡的我又长大了一岁。</p><p>我没有写日记的习惯，很多事过去了就过去了，也许以后就再也不会想起。比如现在我想写一个年度总结，我不知道写些什么。好在有这样一个博客，或多或少能留存一些当时的记忆。</p><ul><li>2021年3月29日，新博客建成，发布第一篇博客：  <a href="https://www.youngsay.cn/2021/03/29/go-school/">新学期，新博客，新开始!</a></li></ul><p>在此之前也搭建过其他博客，总是写着写着感觉没啥意思，最终都删库跑路了。这是我持续时间最长的博客，我会一直让它活下去（希望别被打脸）。</p><p>回看第一篇博客，感慨万千。当时写到“我想学计算机相关专业，但无奈被调剂到了应用物理”，现在我已经是计算机科学与技术专业的学生了，2021/9/17 收到了转专业成功的消息，这个可以算是今年很开心的一件事。当时我提到“一直对编程感兴趣，尤其是前端”，现在我已经俩月没学前端了，2021/11/6 发的vue那篇笔记应该是我最后一次学习前端，也是刚开始接触vue。现在专业课开了Python和C语言，所以就把js先搁置了。最初学的时候就不扎实，现在再回看当时的笔记已经很陌生了。</p><ul><li>2021年6月2号，在听讲座后不久，发布了：  <a href="https://www.youngsay.cn/2021/06/02/new/">讲座，机会，关系!</a></li></ul><p>这是听完学长讲座后不久写的一篇博客。学长是我原来学院信科专业的学生，考上了北理工研究生，讲座期间在字节跳动实习，现在怎样我也不知道了。当时我还加了他的微信，至今也没发过消息……学长的讲座对我影响很大，在听完他讲座后的一段时间学习很积极，但劲头持续时间不长（捂脸）。</p><ul><li>2021年7月21日，放暑假两周后发布： <a href="https://www.youngsay.cn/2021/07/21/summer">暑假，目的论，自卑情结</a></li></ul><p>这篇博客是看了《被人讨厌的勇气》的读后感，对我有些许启发。我惰性很强，自制力很差，如果我再胸无大志的话，便是个完完全全快乐的人。但我又有燕雀之志（虽无鸿鹄之志，但也有些小追求），所以有时会很焦虑，只能做半个快乐的人。我因为自制力差，经常沉迷于网络而浪费很多时间，但我又有些追求，时而积极，时而消极。积极时我经常为过去的消极而懊悔，为失去了的宝贵时间而焦虑，但积极一阵后便又迎来了消极，周而复始，反反复复。</p><ul><li>2021年9月6日：大二上开学，2021年12月24日，本学期结束。</li></ul><p>这学期自我感觉良好，比以往更加充实快乐。</p><p>回顾这一年，当时的很多想法已经变了，当时的很多困惑现在已不再困惑，当时认为天大的事现在看来也许都不叫事。最后引用余华的一句话来结束本篇博客，“<strong>没有什么比时间更具有说服力了，因为时间无需通知我们就可以改变一切</strong>”。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】方法及递归的使用</title>
      <link href="/2021/11/23/Java-method/"/>
      <url>/2021/11/23/Java-method/</url>
      
        <content type="html"><![CDATA[<h1>初识方法</h1><p>Java中的方法类似于c语言中的函数</p><p>观察下面代码，体会方法的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求两个数的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxTwoNum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求三个数的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxThreeNum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max=maxTwoNum(a,b);</span><br><span class="line">    <span class="keyword">return</span> maxTwoNum(max,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">23</span>,c=<span class="number">4</span>;</span><br><span class="line">    System.out.println(maxThreeNum(a,b,c));</span><br></pre></td></tr></table></figure><p>灵活使用方法，可以减少重复代码，使代码更简单。</p><h1>实参、形参的关系</h1><p><strong>Java当中只有按值传递</strong></p><p>分析如下代码：交换两个整型变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main5</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换两个整型变量的错误演示</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">    swap(a,b);</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为10 20，没有完成两数的交换。对于基础类型来说, 形参相当于实参的拷贝. 即 <strong>传值调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=arr[<span class="number">0</span>];</span><br><span class="line">    arr[<span class="number">0</span>]=arr[<span class="number">1</span>];</span><br><span class="line">    arr[<span class="number">1</span>]=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换两个整数的正确方法</span></span><br><span class="line">    <span class="keyword">int</span>[] arr=&#123;<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    swap1(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案：传<strong>引用类型</strong>参数，如数组。</p><p>练习：求n个阶乘之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        sum += factor(j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rst=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=j;i++)&#123;</span><br><span class="line">        rst *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line">    System.out.println(add(num));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>方法的重载（overload）：</h1><p>同一个方法名字, 提供不同版本的实现, 称为<strong>方法重载</strong></p><ul><li>方法名相同</li><li>返回值不做要求</li><li>参数列表不同（参数个数或参数类型不同）</li><li>同一个类当中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(sum(<span class="number">4</span>,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试题：重载和重写的区别</p><h1>方法的递归</h1><p>一个方法在执行过程中调用自身, 就称为 “递归”。</p><p>递归把大问题化解成小问题，求解递归问题，要找到终止条件和递归公式。</p><h2 id="求n的阶乘">求n的阶乘</h2><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113145034.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factor(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(factor(<span class="number">4</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求n个阶乘之和">求n个阶乘之和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i*factor(i-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num; i++) &#123;</span><br><span class="line">        sum+= factor(i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按顺序打印一个数字的每一位-例如-1234-打印出-1-2-3-4">按顺序打印一个数字的每一位(例如 1234 打印出 1 2 3 4)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        func(n/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(n%<span class="number">10</span>+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    func(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归求-1-2-3-…-10">递归求 1 + 2 + 3 + … + 10</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n+sum(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(sum(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个递归方法，输入一个非负整数，返回组成它的数字之和">写一个递归方法，输入一个非负整数，返回组成它的数字之和.</h2><p>例如，输入 1729, 则应该返回1+7+2+9， 它的和是19</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n%<span class="number">10</span>+func(n/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(func(<span class="number">5211</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求斐波那契数列的第N项：">求斐波那契数列的第N项：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不建议用递归实现斐波那契数列，建议用循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n2=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n3=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        n3=n1+n2;</span><br><span class="line">        n1=n2;</span><br><span class="line">        n2=n3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(func(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考递归：横向思考，不要展开递归的代码</p><p>代码执行：纵向执行</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】程序逻辑控制练习</title>
      <link href="/2021/11/20/Java-logic-control/"/>
      <url>/2021/11/20/Java-logic-control/</url>
      
        <content type="html"><![CDATA[<h4 id="输入1-7，输出工作日或休息日">输入1-7，输出工作日或休息日</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">switch</span>(scan.nextInt()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch 中的值只能是 整数|枚举|字符|字符串，long、double、float、boolean不能作为switch参数的类型。</p></blockquote><h4 id="判断一个数是否为素数（3种方法）">判断一个数是否为素数（3种方法）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;num;i++) &#123;</span><br><span class="line">    <span class="comment">//方法2：i&lt;=num/2</span></span><br><span class="line">    <span class="comment">//方法3：i&lt;=Math.sqrt(num);</span></span><br><span class="line">    <span class="keyword">if</span>(num%i==<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(num+<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=num)&#123;</span><br><span class="line">    System.out.println(num+<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印100以内的所有素数">打印100以内的所有素数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=<span class="number">100</span>;j++) &#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;j;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">        System.out.println(j+<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出1000-2000之间的所有闰年">输出1000-2000之间的所有闰年</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">for</span>(year=<span class="number">1000</span>;year&lt;=<span class="number">2000</span>;year++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(year+<span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="输出乘法口诀表">输出乘法口诀表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123; <span class="comment">//i--行数</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123; <span class="comment">//j--列数  列数的多少取决于第一行 第一行有一列，第二行有两列，……</span></span><br><span class="line">        System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求两个数的最大公约数">求两个数的最大公约数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> b=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> c=b;</span><br><span class="line"><span class="keyword">while</span>(a%b!=<span class="number">0</span>) &#123;</span><br><span class="line">    c=a%b;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(a+<span class="string">&quot;和&quot;</span>+b+<span class="string">&quot;的最大公约数是&quot;</span>+c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算1-1-1-2-1-3……-1-99-1-100的值">计算1/1-1/2+1/3……+1/99-1/100的值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++) &#123;</span><br><span class="line">    sum += <span class="number">1.0</span>/j*flag;</span><br><span class="line">    flag=-flag;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><h4 id="编写程序数一下1到100的所有整数中出现多少个数字9">编写程序数一下1到100的所有整数中出现多少个数字9</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">9</span>||i/<span class="number">10</span>==<span class="number">9</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><h4 id="求出0-999之间的所有”水仙花”">求出0~999之间的所有”水仙花”</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Math.pow(i%<span class="number">10</span>,<span class="number">3</span>)+Math.pow(i/<span class="number">10</span>%<span class="number">10</span>,<span class="number">3</span>)+Math.pow(i/<span class="number">100</span>%<span class="number">10</span>,<span class="number">3</span>)==i) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>改进：求出1-6位数的自幂数</p><blockquote><p>附：其他位数的自幂数名字</p><p>一位自幂数：独身数；三位自幂数：水仙花数；四位自幂数：四叶玫瑰数；五位自幂数：五角星数；六位自幂数：六合数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9999999</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=i;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//p</span></span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="number">0</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        temp=temp/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp=i;</span><br><span class="line">    <span class="keyword">while</span>(temp!=<span class="number">0</span>)&#123;</span><br><span class="line">        sum += Math.pow(temp%<span class="number">10</span>,count);</span><br><span class="line">        temp=temp/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==i)&#123;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写代码模拟三次密码输入场景，最多输入3次">编写代码模拟三次密码输入场景，最多输入3次</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String input = scan.next();</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(count=<span class="number">2</span>;count&gt;<span class="number">0</span>;count--) &#123;</span><br><span class="line">    <span class="keyword">if</span>(input.equals(<span class="string">&quot;zzz123&quot;</span>))&#123; <span class="comment">//🔺不能用=</span></span><br><span class="line">        System.out.println(<span class="string">&quot;密码正确，登陆成功&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入错误，你还有&quot;</span>+count+<span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    input = scan.next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;三次均输错，退出程序&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输入一个数，输出该数二进制中1的个数：">输入一个数，输出该数二进制中1的个数：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(((num&gt;&gt;i)&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(num+<span class="string">&quot;二进制中1的个数为：&quot;</span>+count);</span><br></pre></td></tr></table></figure><p>改进：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113095208.png" alt="image-20211123124426921"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">    n=n&amp;(n-<span class="number">1</span>);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaSE】数据类型与运算符</title>
      <link href="/2021/11/20/Java-data-type/"/>
      <url>/2021/11/20/Java-data-type/</url>
      
        <content type="html"><![CDATA[<h3 id="初识Java">初识Java</h3><h4 id="第一个java程序">第一个java程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>一个java文件中，只能有一个public类，且类名要与文件相同。</p></li><li><p>类存在于源文件里面；方法存在于类中；语句存在于方法中。</p></li><li><p>类名要采用大驼峰形式（首字母均大写）命名。</p></li></ul><p>面试问题：</p><p>main方法为什么是static：main方法是程序的入口，如果不是静态的话，要启动就必须创建一个实例，但是main是程序入口，创建一个实例又得从main开始。如果一个方法不是静态的，则要先实例化该类，比如要这样 test t=new test();<br>然后才能调用 t.main(); 而这对于运行一个程序的主函数来说是不现实的，所以比如把main函数定义为static，使t.main()可以直接被调用。</p><p>String[] args的作用是什么：运行时命令行参数，例如我运行时输入这条指令：<code>java HelloWorld panghutx is a stupid bird</code>，会将panghutx、is、a、stupid、bird存入args这个字符串数组。</p><h4 id="如何运行java程序">如何运行java程序</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083809.png" alt="image-20211120114709234"></p><p>大致过程就是，我们写好的.java文件（源文件）被编译器编译后变成.class文件（<strong>字节码</strong>），然后被JVM的类加载器加载到内存，通过字节码校验器去做一些校验，校验通过后交由<strong>解释器</strong>将字节码文件解释成计算机能够识别的机器指令。</p><p>面试问题：双亲委派模型、类加载器</p><p>JDK Java开发工具 ；JRE Java运行环境 ；JVM Java虚拟机</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083822.png" alt="image-20211120114912827"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zzz</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;zzz&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083828.png" alt="image-20211120115549069"></p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113084529.png" alt="image-20211120115606886"></p><p>Java中，一个类就会生成一个字节码文件。</p><p>为何这样设置？为了方便使用，如果需要HelloWorld这个类，就加载对应的字节码文件。</p><h3 id="变量和类型">变量和类型</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083844.jpeg" alt="在这里插入图片描述"></p><p>变量均存储在内存中。</p><h4 id="变量">变量</h4><h5 id="整形">整形</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">10</span>; <span class="comment">//定义一个整形变量</span></span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>一个int变量占4个字节。</p><blockquote><p>什么是字节?</p><p>字节是计算机中表示空间大小的基本单位. 计算机使用二进制表示数据. 我们认为 8 个二进制位(bit) 为一个字节(Byte). 我们平时的计算机为 8GB 内存, 意思是 8G 个字节. 其中 1KB = 1024 Byte, 1MB = 1024 KB, 1GB = 1024 MB. 所以 8GB 相当于 80 多亿个字节</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.MAX_VALUE); <span class="comment">// 2147483647</span></span><br><span class="line">System.out.println(Integer.MIN_VALUE); <span class="comment">// -2147483648</span></span><br></pre></td></tr></table></figure><p>4 个字节表示的数据范围是 -2^31 -&gt; 2^31-1 , 也就大概是 -21亿 到 +21亿</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> maxValue = Integer.MAX_VALUE;</span><br><span class="line">System.out.println(maxValue+<span class="number">1</span>); <span class="comment">// -2147483648</span></span><br><span class="line"><span class="keyword">int</span> minValue = Integer.MIN_VALUE;</span><br><span class="line">System.out.println(minValue-<span class="number">1</span>); <span class="comment">// 2147483647</span></span><br></pre></td></tr></table></figure><p>如果运算的结果超出了 int 的最大范围, 就会出现溢出的情况。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083849.png" alt="image-20211120121410693"></p><p>图：int的取值范围</p><h5 id="长整型">长整型</h5><p>long占8个字节，取值范围是-2^63—2^63-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num=<span class="number">10L</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line">System.out.println(Long.MAX_VALUE);</span><br><span class="line">System.out.println(Long.MIN_VALUE);</span><br></pre></td></tr></table></figure><p>初始化长整型变量是记得在数字后面加上L</p><h5 id="双精度浮点型">双精度浮点型</h5><p>double占8个字节，浮点数在内存中的存储与整形不同，不能单纯用2^n表示其取值范围，且浮点数的存储会存在精度误差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">1.1</span>;</span><br><span class="line">System.out.println(num * num) <span class="comment">// 1.2100000000000002</span></span><br></pre></td></tr></table></figure><h5 id="单精度浮点型">单精度浮点型</h5><p>float占4个字节，初始化时要在数字后面加上f</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> num = <span class="number">1.0f</span>;    <span class="comment">// 写作 1.0F 也可以</span></span><br><span class="line">System.out.println(num);</span><br></pre></td></tr></table></figure><h5 id="字符型">字符型</h5><p>char在java中占<strong>2</strong>个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch=<span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>Java 中使用<code>单引号 + 单个字母 </code>的形式表示字符字面值.</li><li><strong>计算机中的字符本质上是一个整数. 在 C 语言中使用 ASCII 表示字符, 而 Java 中使用 Unicode 表示字符. 因此一个字符占用两个字节, 表示的字符种类更多, 包括中文.</strong></li><li>使用一个汉字表示一个字符时，报错是要用<code>javac -encoding UTF-8 文件名.java</code></li></ul><h5 id="字节型">字节型</h5><p>byte占1个字节，范围大小是-128–&gt;127</p><p>byte类型相加减时会进行整形提升，要用int保存。</p><h5 id="短整型">短整型</h5><p>short占2个字节，范围大小是-2^15-2^15-1，范围较小，一般不使用。</p><h5 id="布尔型">布尔型</h5><p>boolean只有两种取值，true或false。<strong>Java中的布尔型和整形不能相互转换</strong>，不能用1或0表示布尔型。</p><h5 id="字符串型">字符串型</h5><p>String占8个字节，Java 使用 <code>双引号 + 若干字符</code> 的方式表示字符串字面值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;胖虎同学&quot;</span>;</span><br></pre></td></tr></table></figure><p>使用<code>+</code>可以进行字符串的拼接，任何类型的变量与字符串进行拼接时，都会转换成字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">21</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b); <span class="comment">//2021</span></span><br></pre></td></tr></table></figure><h5 id="总结">总结</h5><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083857.png" alt="image-20211120154001169"></p><h4 id="常量-2">常量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">20</span>; <span class="comment">// 编译出错. 提示 无法为最终变量a分配值</span></span><br></pre></td></tr></table></figure><p>常量不能在程序运行过程中发生修改。</p><h4 id="类型转换">类型转换</h4><ul><li>不同数字类型的变量之间赋值, 表示范围更小的类型能隐式转换成范围较大的类型</li><li>如果需要把范围大的类型赋值给范围小的, 需要强制类型转换, 但是可能精度丢失。不相关的类型不能进行类型转换。</li><li>将一个字面值常量进行赋值的时候, Java 会自动针对数字范围进行检查.</li></ul><h4 id="总结-2">总结</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083903.png" alt="image-20211120154336948"></p><h3 id="运算符">运算符</h3><h4 id="算术运算符">算术运算符</h4><p><code>+-*/%</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>/<span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line">System.out.println(<span class="number">5.0</span>/<span class="number">2</span>); <span class="comment">//2.5</span></span><br><span class="line">System.out.println((<span class="keyword">double</span>)<span class="number">5</span>/<span class="number">2</span>); <span class="comment">//2.5</span></span><br><span class="line">System.out.println((<span class="keyword">double</span>)(<span class="number">5</span>/<span class="number">2</span>)); <span class="comment">// 2.0</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>%<span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>%<span class="number">2</span>); <span class="comment">//-1</span></span><br><span class="line">System.out.println(<span class="number">5</span>%-<span class="number">2</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>%-<span class="number">2</span>); <span class="comment">//-1</span></span><br><span class="line"><span class="comment">//正负看被除数</span></span><br></pre></td></tr></table></figure><p>Java中，不仅仅可以对 int 求模, 也能对 double 来求模。</p><p>值得注意的是，下图中i=10，而c语言是11。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083909.png" alt="image-20211120172159321"></p><h4 id="增量运算符">增量运算符</h4><p><code>+= -= *= %=</code></p><p>可以自动进行类型转换</p><h4 id="关系运算符">关系运算符</h4><p><code>== != &lt; &gt; &lt;= &gt;=</code></p><p>关系运算符表达式返回值都是布尔值。</p><h4 id="逻辑运算符">逻辑运算符</h4><p><code>&amp;&amp; || !</code></p><p>Java中，逻辑非！只能作用于布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">System.out.println(!a &lt; b);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083917.png" alt="image-20211120165938626"></p><h4 id="位运算符">位运算符</h4><p><code>&amp; | ~ ^</code></p><h4 id="移位运算符">移位运算符</h4><p><code> &gt;&gt; &lt;&lt; &gt;&gt;&gt;</code></p><p>无符号右移 &gt;&gt;&gt;：最右侧位不要了, 最左侧补 0.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0xffffffff</span>;</span><br><span class="line">System.out.printf(<span class="string">&quot;%x\n&quot;</span>, a &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 运行结果(注意, 是按十六进制打印的) 7fffffff </span></span><br></pre></td></tr></table></figure><blockquote><ul><li>左移 1 位, 相当于原数字 * 2. 左移 N 位, 相当于原数字 * 2 的N次方</li><li>右移 1 位, 相当于原数字 / 2. 右移 N 位, 相当于原数字 / 2 的N次方</li><li>由于计算机计算移位效率高于计算乘除, 当某个代码正好乘除 2 的N次方的时候可以用移位运算代替</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言：指针误区总结</title>
      <link href="/2021/11/13/c-pointer/"/>
      <url>/2021/11/13/c-pointer/</url>
      
        <content type="html"><![CDATA[<p>4个二进制位可以表示一个16进制数字</p><p>1111 --&gt;f</p><hr><p>指针类型的意义：</p><blockquote><ol><li>指针类型决定了：指针解引用的权限有多大（整型指针解引用访问4个字节，字符型指针解引用只能访问1个字节）</li><li>指针类型决定了，指针走一步，能走多远（步长）</li></ol></blockquote><p>例题1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">int</span> a = <span class="number">0x11223344</span>;</span><br><span class="line"><span class="keyword">char</span>* pc = &amp;a;</span><br><span class="line">*pc = <span class="number">0</span>; <span class="comment">//只改变一个字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* pa = &amp;a;</span><br><span class="line">*pa = <span class="number">0</span>;<span class="comment">//改变了四个字节</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211025194727.png" alt="image-20211025194637350"></p><p>char* 的指针解引用就只能访问一个字节，而 int* 的指针的解引用能访问四个字节。</p><p>例题2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>* p = arr;</span><br><span class="line"><span class="keyword">char</span>* pc = arr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p + <span class="number">1</span>);<span class="comment">//加了4，因为int4字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pc + <span class="number">1</span>);<span class="comment">//加了1，因为char1字节</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211025193223.png" alt="image-20211025193211532"></p><hr><p>野指针：指针指向的位置是不可知的</p><p>为什么出现野指针：</p><p>指针使用时未初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p;<span class="comment">//未初始化，地址是随机的</span></span><br><span class="line">*p = <span class="number">10</span>;<span class="comment">//非法访问内存</span></span><br></pre></td></tr></table></figure><p>指针越界：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//越界访问</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>* p = arr;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">*p = i;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>指针指向的空间释放：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>*p = test();</span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>退出test函数后空间释放，找不到指针p的地址。</p><blockquote><p>总结：如何规避野指针？</p><p>1.指针初始化</p><p>2.小心指针越界</p><p>3.指针指向空间释放即设置NULL</p><p>4.指针使用之前检查有效性</p></blockquote><hr><p>指针的运算：</p><p>指针±整数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>* p = arr; <span class="comment">//元素1的地址</span></span><br><span class="line"><span class="keyword">int</span>* pend = arr + <span class="number">9</span>; <span class="comment">//元素10的地址</span></span><br><span class="line"><span class="keyword">while</span> (p &lt; pend)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针-指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, &amp;arr[<span class="number">9</span>] - &amp;c[<span class="number">0</span>]);<span class="comment">//err，两个指针指向不同空间</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, &amp;arr[<span class="number">9</span>] - &amp;arr[<span class="number">0</span>]);<span class="comment">//这个输出9</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两指针相减的前提是指针指向同一块空间，<strong>指针-指针得到的是两个指针之间元素的个数</strong></p><p>例题：求字符串长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.strlen()函数</span></span><br><span class="line"><span class="comment">//2.递归</span></span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strlen</span><span class="params">(<span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* start = str;</span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">str++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str - start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = my_strlen(<span class="string">&quot;abc&quot;</span>);<span class="comment">//这里&quot;abc&quot;传入的只有首字母a的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>指针和数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>* p = arr;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d]=%p &lt;==&gt; *(p+%d)=%p\n&quot;</span>,i,&amp;arr[i],i,p+i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arr[i]=*(p+i) =*(arr+i);</p><p>&amp;arr[i]=p+i=arr+i;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">2</span>] &lt;==&gt; *(arr+<span class="number">2</span>) &lt;==&gt; *(p+<span class="number">2</span>) &lt;==&gt; *(<span class="number">2</span>+p) &lt;==&gt; *(<span class="number">2</span>+arr) == <span class="number">2</span>[arr]</span><br></pre></td></tr></table></figure><hr><p>二级指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>* pa = &amp;a;</span><br><span class="line"><span class="keyword">int</span>** ppa = &amp;pa; </span><br><span class="line">    <span class="comment">//ppa就是一个二级指针，用来存放指针pa，而指针pa也是一个指针，用来存放a。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d\n&quot;</span>, a,*pa,**ppa);<span class="comment">//结果均为3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁止套娃！！！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue笔记：指令</title>
      <link href="/2021/11/06/vue1/"/>
      <url>/2021/11/06/vue1/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是vue">什么是vue</h3><ol><li>构建用户界面</li></ol><ul><li>用vue往html里填充数据</li></ul><ol start="2"><li>框架</li></ol><ul><li>框架是一套现成的解决方案，只能遵守框架规范写自己的业务功能</li></ul><h3 id="vue的特性">vue的特性</h3><ol><li>数据驱动视图</li></ol><p>数据的变化会驱动视图自动更新</p><ol start="2"><li>双向数据绑定</li></ol><blockquote><p>在网页中，form表单负责<strong>采集数据</strong>，Ajax负责<strong>提交数据</strong></p></blockquote><ul><li>js数据的变化，会被自动渲染到页面上</li><li>页面上表单采集的数据发生变化时，会被vue自动获取到，更新到js数据中</li></ul><blockquote><p>数据驱动视图和双向数据绑定的底层原理是MVVM（Mode数据源、View视图、ViewModel就是vue实例</p></blockquote><h3 id="vue的基本使用">vue的基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 希望vue控制div，把数据填充到div内部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入Vue库文件，在window全局就有了vue这个构造函数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.创建Vue的实例对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//el属性是固定写法，表示当前vm实例要控制页面上的那个区域，接受的值是一个选择器</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//date对象就是要渲染到页面的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">username</span>: <span class="string">&#x27;胖虎&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vue指令">vue指令</h3><h4 id="1-内容渲染指令">1.内容渲染指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v-text：会覆盖元素内部原有指令，只能渲染纯文本内容</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#125;&#125; :插值表达式,内容占位符，不会覆盖原有内容，只能渲染纯文本内容，不能用在元素的属性节点</span><br><span class="line"></span><br><span class="line">v-html:把带标签的指令渲染成html内容</span><br></pre></td></tr></table></figure><h4 id="2-属性绑定指令">2.属性绑定指令</h4><p><code>v-bind</code>: 可简写为<code>:</code>为元素属性动态绑定值</p><ul><li>在使用v-bind属性绑定期间，如果绑定内容需要进行动态拼接，则字符串的外面应该包裹单引号，如：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;&#x27;box&#x27; + index&quot;</span>&gt;</span></span><br><span class="line">    这是一个div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>&#123;&#123;&#125;&#125;</code>插值表达式和v-bind指令中可以使用js语法</li></ul><h4 id="3-事件绑定指令">3.事件绑定指令</h4><p><code>v-on:</code>可简写为<code>@</code>，为元素绑定事件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;add&#x27;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    </span><br><span class="line">    add()&#123;</span><br><span class="line">        this.count+=1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果默认对象事件e被覆盖，可以手动传递<code>$event</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;add(1,$event)&#x27;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    </span><br><span class="line">    add(n,e)&#123;</span><br><span class="line">        this.count+=1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="事件修饰符">事件修饰符</h5><p>在事件处理函数中调用<code>event.preventDefault()</code>和<code>event.stopPropagation()</code>很常见，为了更方便对事件触发进行控制，vue提供了事件修饰符概念。</p><p><code>.prevent</code>：组织默认行为（链接跳转、表单提交）</p><p><code>.stop</code>：阻止事件冒泡</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http:www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    btn()&#123;</span><br><span class="line">        console.log(&quot;hhh&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-双向绑定指令">4.双向绑定指令</h4><p><code>v-model</code> ：input输入框、textarea、select，v-model 会根据控件类型自动选取正确的方法来更新元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>input 元素：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;编辑我……&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>消息是: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">message</span>: <span class="string">&#x27;胖虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-model指令修饰符">v-model指令修饰符</h5><p><code>.number</code>：自动将用户的输入值转为数值类型</p><p><code>.trim</code>：自动过滤用户输入的首尾空白字符</p><h4 id="5-条件渲染指令">5.条件渲染指令</h4><p><code>v-if</code>：每次动态创建或移除元素，实现元素的显示和隐藏</p><p><code>v-show</code>：动态为元素添加或移除<code>display:none</code>样式，来实现元素的显示和隐藏</p><h4 id="6-列表渲染指令">6.列表渲染指令</h4><p><code>v-for</code>：用来辅助开发者基于一个数组来循环渲染一个列表结构。v-for 指令需要使用 <code>item in list</code> 形式的特殊语法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>索引<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    list:[</span><br><span class="line">        &#123;id:1, name:&#x27;胖虎&#x27;&#125;,</span><br><span class="line">        &#123;id:2 ,name:&#x27;大熊&#x27;&#125;,</span><br><span class="line">        &#123;id:3 ,name:&#x27;小夫&#x27;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211106203347.png" alt="image-20211106202427814"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python笔记：条件、循环及其他语句</title>
      <link href="/2021/11/03/python5/"/>
      <url>/2021/11/03/python5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Python基础教程（第三版）第5章：条件、循环及其他语句</p></blockquote><h3 id="print">print()</h3><p><code>end='' </code>  //不换行</p><p><code>sep=''</code>  //自定义分隔符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;panghu&quot;</span>) //打印结果：my name <span class="keyword">is</span> panghu</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&quot;</span>,<span class="string">&quot;love&quot;</span>,<span class="string">&quot;you&quot;</span>,sep=<span class="string">&quot;!&quot;</span>) //I!love!you</span><br></pre></td></tr></table></figure><h3 id="import">import</h3><p>当你确定要导入模块中的一切时，可使用<code>from somemodule import *</code>如果有两个模块，都包某一函数时，可使用<code>as</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> foobar</span><br><span class="line"><span class="built_in">print</span>(foobar.sqrt(<span class="number">4</span>)) //<span class="number">2.0</span></span><br></pre></td></tr></table></figure><h3 id="序列解包">序列解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">values=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">x,y,z=values</span><br><span class="line"><span class="built_in">print</span>(values) //(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(z) //<span class="number">3</span></span><br></pre></td></tr></table></figure><p>*元素符：分配多余的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">values=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">x,*y,z=values</span><br><span class="line"><span class="built_in">print</span>(x) // <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(y) //[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(z) //<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="条件语句中的布尔值">条件语句中的布尔值</h3><p>在Python的条件语句中，不止<code>False``0</code>表示假，<code>None</code>  <code>&quot;&quot;</code> <code>()</code> <code>[]</code> <code>&#123;&#125;</code>都表示假</p><h3 id="循环中的else子句">循环中的else子句</h3><p>python中的<strong>break</strong>、<strong>continue</strong>和c语言中的功能一样。</p><p><strong>break</strong> 语句可以跳出 for 和 while 的循环体。</p><p><strong>continue</strong> 语句被用来跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;循环结束。&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3</span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure><p>当将break换成continue时，输出结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure><p>以上和c语言没什么不同，python循环语句有一点与c不同。</p><p>循环语句可以有else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。</p><p>打印100以内的素数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num=[];</span><br><span class="line">i=<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">100</span>):</span><br><span class="line">    j=<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,i):</span><br><span class="line">        <span class="keyword">if</span>(i%j==<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num.append(i)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h3 id="比较运算符">比较运算符</h3><p><code>x is y</code> x和y是同一个对象</p><p><code>x is not y</code> x和y是不同的对象</p><p><code>x in y</code> x是容器（如序列）y的成员</p><p><code>x not in y</code> x不是容器（如序列）y的成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=y=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">z=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(x==z) //<span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">is</span> z) // <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>==用来检查两个对象是否相等，而is用来检查两个对象是否相同（是同一个对象）。</p><h3 id="遍历字典">遍历字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line"> <span class="built_in">print</span>(key, <span class="string">&#x27;corresponds to&#x27;</span>, d[key])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line"> <span class="built_in">print</span>(key, <span class="string">&#x27;corresponds to&#x27;</span>, value)</span><br></pre></td></tr></table></figure><h3 id="zip">zip()</h3><p>一个很有用的并行迭代工具是内置函数zip，它将两个序列“缝合”起来，并返回一个由元组组成的序列。返回值是一个适合迭代的对象，要查看其内容，可使用list将其转换为列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=[<span class="string">&quot;panghu&quot;</span>,<span class="string">&quot;daxiong&quot;</span>,<span class="string">&quot;jiqimao&quot;</span>]</span><br><span class="line">age=[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(name,age))) //[(<span class="string">&#x27;panghu&#x27;</span>, <span class="number">20</span>), (<span class="string">&#x27;daxiong&#x27;</span>, <span class="number">21</span>), (<span class="string">&#x27;jiqimao&#x27;</span>, <span class="number">22</span>)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript 6入门</title>
      <link href="/2021/10/31/es6/"/>
      <url>/2021/10/31/es6/</url>
      
        <content type="html"><![CDATA[<h3 id="let">let</h3><p>var和let声明变量的区别：</p><ul><li>let声明的变量是块级变量，只存在{}内。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>会出现<code>Uncaught ReferenceError: a is not defined</code>的报错，而在{}内打印console.log(a)而不会报错。</p><ul><li>let声明的变量没有变量提升</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">let</span> a=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>如上代码会报错<code>Uncaught ReferenceError: Cannot access 'a' before initialization</code></p><ul><li>let声明的变量会出现暂时死区</li></ul><p>在{}外用var声明变量，{}内用let声明一个相同的变量，{}外用var声明的变量便没有意义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码依旧会报错<code>Uncaught ReferenceError: Cannot access 'a' before initialization</code></p><h3 id="const">const</h3><ul><li>具有块级作用域</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure><ul><li>声明变量要赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI;</span><br></pre></td></tr></table></figure><p>未初始化会报错<code>Uncaught SyntaxError: Missing initializer in const declaration</code></p><ul><li>常量赋值后，简单数据类型值不能修改，复杂数据类型地址不能更改。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.push(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// 可执行</span></span><br><span class="line">a.length = <span class="number">0</span>;    <span class="comment">// 可执行</span></span><br><span class="line">a = [<span class="string">&#x27;Dave&#x27;</span>];    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值">解构赋值</h3><h4 id="数组结构">数组结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h4 id="对象结构">对象结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;panghu&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125;=obj;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">//panghu</span></span><br><span class="line"><span class="built_in">console</span>.log(age);  <span class="comment">//20</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数">箭头函数=&gt;</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum=<span class="function">(<span class="params">n1,n2</span>)=&gt;</span>&#123; </span><br><span class="line">    n1+n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result=sum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>当键头后的{}内只有一个表达式，可去掉{}；当()里的参数只有一个，可去掉()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> al=<span class="function"><span class="params">v</span>=&gt;</span>alert(v) <span class="comment">//al是函数名，v是函数形参</span></span><br><span class="line"><span class="keyword">const</span> result=al(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h3 id="剩余参数">剩余参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum=<span class="function">(<span class="params">a,...b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//3</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">//[4,5]</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">&#x27;胖虎&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students; </span><br><span class="line"><span class="built_in">console</span>.log(s1);  <span class="comment">// &#x27;胖虎&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(s2);  <span class="comment">// [&#x27;张三&#x27;, &#x27;李四&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言：操作符误区总结</title>
      <link href="/2021/10/24/c-operator/"/>
      <url>/2021/10/24/c-operator/</url>
      
        <content type="html"><![CDATA[<ul><li>左移操作符：<code>&lt;&lt;</code></li></ul><blockquote><p>左边丢弃，右边补0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//把a的二进制位向左移动一位</span></span><br><span class="line"><span class="keyword">int</span> b = a &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);<span class="comment">//输出为4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>右移操作符：<code>&gt;&gt;</code></li></ul><blockquote><p>1.算术右移：右边丢弃，左边补原符号位</p><p>2.逻辑右移：右边丢弃，左边补0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">-3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b); <span class="comment">//输出为-2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>负数在内存中存放的是二进制的补码。</p><p>原码：直接根据数值写出的二进制序列</p><p>反码：符号位不变，其他位按位取反</p><p>补码：反码+1</p></blockquote><p>以-3为例：</p><p>原码：10000000000000000000000000000011</p><p>反码：11111111111111111111111111111100</p><p>补码：11111111111111111111111111111101</p><hr><ul><li>异或：<code>^</code></li></ul><blockquote><p>同为0，异为1</p></blockquote><p>练习：a=3，b=5，交换a、b两个数的值</p><p>方法1：创建中间变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a, b); <span class="comment">//a=5,b=3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：加减运算（数值太大可能溢出）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b; </span><br><span class="line">a = a - b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三：异或运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b; </span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同值异或值为0，任何值异或0都是值本身。a^a=0     0^a=a</p><hr><p>单目运算符：</p><p><code>sizeof</code>也是单目运算符，可以计算变量所占空间的大小，单位是字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a));<span class="comment">//4    </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//4   </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));<span class="comment">//20  sizeof(数组名)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span> [<span class="number">5</span>]));<span class="comment">//20  sizeof(数组类型)</span></span><br></pre></td></tr></table></figure><p><code>sizeof</code>()，括号内可以说变量名，也可以是变量类型，如果是变量名可以去掉小括号，如<code>sizeof a</code></p><p>思考一下下面这段代码，两次输出是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(s = a + <span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);</span><br></pre></td></tr></table></figure><p>输出结果是2、5。s的类型是short，sizeof(short)结果必然是2，而<strong>sizeof括号里的表达式不参与运算</strong>，所以s仍未5。</p><p>前置和后置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;<span class="comment">//后置++，先使用，再++</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);<span class="comment">//11</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = ++a;<span class="comment">//前置++，先++，后使用</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);<span class="comment">//11</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);<span class="comment">//11</span></span><br></pre></td></tr></table></figure><p><strong>指针大小永远是4字节或8字节</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">(<span class="keyword">int</span> arr[])</span><span class="comment">//相当于int *arr</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">(<span class="keyword">char</span> ch[])</span><span class="comment">//相当于char *arr</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(ch));<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));<span class="comment">//40</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(ch));<span class="comment">//10</span></span><br><span class="line">test1(arr);</span><br><span class="line">test2(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>结构成员访问操作符：<code>.</code> <code>-&gt;</code></p><blockquote><p>. 结构体.成员名</p><p>-&gt; 结构体指针-&gt;成员名</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">students</span></span></span><br><span class="line"><span class="class">&#123;</span>   <span class="comment">//结构体的成员（变量）</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">students</span> <span class="title">a</span> =</span> &#123; <span class="string">&quot;胖虎&quot;</span>,<span class="number">20</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">students</span> *<span class="title">pb</span> =</span> &amp;a; <span class="comment">//说明pb是struct students类型的指针</span></span><br><span class="line"><span class="comment">//结构体变量名.成员名</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：%s，年龄：%d\n&quot;</span>, a.name,a.age);</span><br><span class="line"><span class="comment">//结构体指针-&gt;成员名</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：%s，年龄：%d&quot;</span>, pb-&gt;name,pb-&gt;age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211024214557.png" alt="image-20211024164538183"></p><hr><p>整型提升：</p><p>C的整型算术运算总是至少以缺省整型类型的精度来进行的。 为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换称为整型提升。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//0000000000000000000000000000011   (int a)</span></span><br><span class="line"><span class="comment">//00000011  --a</span></span><br><span class="line"><span class="comment">//0000000000000000000000000000011   (a的整型提升)</span></span><br><span class="line"><span class="keyword">char</span> b = <span class="number">127</span>;</span><br><span class="line"><span class="comment">//0000000000000000000000001111111   (int b)</span></span><br><span class="line"><span class="comment">//01111111   --b</span></span><br><span class="line"><span class="comment">//0000000000000000000000001111111   (b的整型提升)</span></span><br><span class="line"><span class="comment">//0000000000000000000000010000010   int c</span></span><br><span class="line"><span class="comment">//10000010   --c</span></span><br><span class="line"><span class="comment">//1111111111111111111111110000010  补码 (c的整型提升)</span></span><br><span class="line"><span class="comment">//1000000000000000000000001111101  反码</span></span><br><span class="line"><span class="comment">//1000000000000000000000001111110  原码</span></span><br><span class="line"><span class="keyword">char</span> c = a + b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>整形提升是按照变量的数据类型的符号位来提升的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//负数的整形提升</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="number">-1</span>;</span><br><span class="line">变量c1的二进制位(补码)中只有<span class="number">8</span>个比特位：</span><br><span class="line"><span class="number">1111111</span></span><br><span class="line">因为 <span class="keyword">char</span> 为有符号的 <span class="keyword">char</span></span><br><span class="line">所以整形提升的时候，高位补充符号位，即为<span class="number">1</span></span><br><span class="line">提升之后的结果是：</span><br><span class="line"><span class="number">11111111111111111111111111111111</span></span><br><span class="line"><span class="comment">//正数的整形提升</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="number">1</span>;</span><br><span class="line">变量c2的二进制位(补码)中只有<span class="number">8</span>个比特位：</span><br><span class="line"><span class="number">00000001</span></span><br><span class="line">因为 <span class="keyword">char</span> 为有符号的 <span class="keyword">char</span></span><br><span class="line">所以整形提升的时候，高位补充符号位，即为<span class="number">0</span></span><br><span class="line">提升之后的结果是：</span><br><span class="line"><span class="number">00000000000000000000000000000001</span></span><br><span class="line"><span class="comment">//无符号整形提升，高位补0</span></span><br></pre></td></tr></table></figure><p>总结：char和short类型，在参与表达式运算时达不到整型长度，会发生整型提升。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言：数组误区总结</title>
      <link href="/2021/10/22/c-array/"/>
      <url>/2021/10/22/c-array/</url>
      
        <content type="html"><![CDATA[<ul><li>创建数组时，数组的长度必须用常量表达式进行定义，较好的方法是用宏来定义数组。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10;</span></span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br></pre></td></tr></table></figure><p>但在C99中的变长数组，也可以使用非常量表达式。</p><hr><ul><li>关于字符数组的初始化，使用方法2初始化数组会在末尾自动创建\0。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch1[] = &#123; <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;u&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> ch2[] = <span class="string">&quot;panghu&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211022203210.png" alt="image-20211019213809977"></p><p>这就会导致打印结果、字符串长度的不同。</p><p>strlen() 函数从字符串的开头位置依次向后计数，直到遇见<code>\0</code>，然后返回计时器的值。最终统计的字符串长度不包括<code>\0</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch1[] = &#123; <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;u&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> ch2[] = <span class="string">&quot;panghu&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>, ch1, <span class="built_in">strlen</span>(ch1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>, ch2,<span class="built_in">strlen</span>(ch2));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211022203216.png" alt="image-20211019215310977"></p><p>因为数组ch1没有添加终止符<code>\0</code>，打印内容出现了意外，字符串长度也是一个随机数。</p><hr><ul><li>由数组中各元素的地址可知，一维数组在内存中是连续存放的，随着数组下标的增长，地址由低到高变化。（二维数组也是如此）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d]=%p\n&quot;</span>, i,&amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211022203224.png" alt="image-20211019221954024"></p><p>所以当我们知道数组中首元素的地址，便可以打印出所有元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> *p = arr;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211022203231.png" alt="image-20211019222801287"></p><hr><ul><li>关于arr和&amp;arr：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr); <span class="comment">//首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr)); <span class="comment">//整个数组的大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr); <span class="comment">//整个数组的地址</span></span><br></pre></td></tr></table></figure><p>数组名是首元素的地址。</p><p><code>sizeof(数组名)</code>表示的是整个数组的大小，单位是字节。</p><p><code>&amp;数组名</code>表示的是整个数组，取出的是整个数组的地址。</p><p>首元素地址和数组地址的值是一样的，但意义不同，可以试着输出<code>&amp;数组名+1</code>和<code>数组名+1</code>，进行比较。</p><hr><ul><li>数组作为函数传参时，形参可以写成两种形式：</li></ul><p>一是数组形式，二是指针形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">10</span>])</span> <span class="comment">//写法②：void test(int *arr)&#123;&#125;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line">test(arr); <span class="comment">//函数调用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebApiⅢ：事件、事件对象</title>
      <link href="/2021/09/16/js-shijian/"/>
      <url>/2021/09/16/js-shijian/</url>
      
        <content type="html"><![CDATA[<h3 id="注册事件">注册事件</h3><ol><li>传统方式   <code>btn.onclick = function() &#123;&#125;</code></li></ol><p>传统事件注册具有<strong>唯一性</strong>：同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p><ol start="2"><li>方法监听注册方式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.addEventListener(type,listener[,useCapture])</span><br></pre></td></tr></table></figure><p>type：事件类型字符串，比如 click、mouseover。这里不需要加on<br>listener：事件处理函数，事件发生时，会调用该监听函数<br>useCapture：可选参数，是一个布尔值，默认是false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        传统注册事件</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        事件监听注册事件</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//传统注册事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            alert(<span class="string">&#x27;hi&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            alert(<span class="string">&#x27;传统注册事件&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//运行程序，点击传统注册事件按钮，弹出提示框：传统注册事件。第一个hi提示框被覆盖，不会弹出。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        </span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//事件侦听注册事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            alert(<span class="string">&#x27;事件监听注册事件&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            alert(<span class="string">&#x27;事件监听注册事件2&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//运行程序，点击事件监听注册事件按钮，弹出提示框：事件监听注册事件，点击确定后，再次弹出“事件监听注册事件2”的提示框</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//在事件侦听注册事件的方法中事件类型要加引号并且没有on</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="删除事件">删除事件</h3><ol><li><p>传统方式 <code>eventTarget.onclick = null;</code></p></li><li><p>方法监听注册方式</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.removeEventListener(type,listener[,useCapture])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    divs[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 1. 传统方式删除事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        divs[<span class="number">0</span>].onclick = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2. removeEventListener 删除事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    divs[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, fn) <span class="comment">// 里面的fn 不需要调用加小括号</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="number">22</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        divs[<span class="number">1</span>].removeEventListener(<span class="string">&#x27;click&#x27;</span>, fn);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="DOM事件流">DOM事件流</h3><p>事件流描述的是从页面接受事件的顺序，这个传播顺序就是DOM事件流。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210915214418.png" alt="1551166555833"></p><p>DOM事件流会历经 捕获阶段、当前目标阶段、冒泡阶段 这三个阶段</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210915214530.png" alt="1551169007768"></p><ul><li>js代码只能执行捕获或冒泡其中的一个阶段</li><li>onclick、attachEvent只有冒泡阶段</li><li>addEventListener(type,listener,<strong>true</strong>)表示在<strong>事件捕获阶段</strong>调用事件处理程序，如果第三个参数是<strong>false</strong>表示在<strong>事件冒泡阶段</strong>调用事件处理程序。</li></ul><h4 id="事件冒泡">事件冒泡</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// onclick 和 attachEvent（ie） 在冒泡阶段触发</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// son -&gt; father -&gt;body -&gt; html -&gt; document</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给son注册单击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&#x27;son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给father注册单击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    father.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&#x27;father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给document注册单击事件，省略第3个参数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&#x27;document&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="事件捕获">事件捕获</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 如果addEventListener() 第三个参数是 true 那么在捕获阶段触发</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// document -&gt; html -&gt; body -&gt; father -&gt; son</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给son注册单击事件，第3个参数为true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         alert(<span class="string">&#x27;son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;, <span class="literal">true</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给father注册单击事件，第3个参数为true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     father.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         alert(<span class="string">&#x27;father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;, <span class="literal">true</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给document注册单击事件，第3个参数为true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&#x27;document&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="literal">true</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="事件对象">事件对象</h3><p>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象。</p><p>比如：</p><ol><li><p>谁绑定了这个事件。</p></li><li><p>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</p></li><li><p>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 事件对象 可以写成e、evt、event</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            e = e || <span class="built_in">window</span>.event; <span class="comment">//兼容性写法 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(e);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="事件对象的属性和方法">事件对象的属性和方法</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210915221631.png" alt="1551169931778"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// 我们给ul 绑定了事件  那么this 就指向ul  </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// ul</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// e.target 触发了事件的对象 我们点击的是li e.target 指向的就是li</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(e.target); <span class="comment">// li</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="阻止默认行为">阻止默认行为</h4><p>html中一些标签有默认行为，例如a标签被单击后，默认会进行页面跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://blog.wangyouwu.cn&quot;</span>&gt;胖虎同学&lt;/a&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2. 阻止默认行为 让链接不跳转 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    a.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         e.preventDefault(); <span class="comment">//  dom 标准写法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 3. 传统的注册方式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 普通浏览器 e.preventDefault();  方法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        e.preventDefault();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 低版本浏览器 ie678  returnValue  属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        e.returnValue = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="阻止事件冒泡">阻止事件冒泡</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">     <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 给son注册单击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         alert(<span class="string">&#x27;son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         e.stopPropagation(); <span class="comment">// stop 停止  Propagation 传播</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>; <span class="comment">// 非标准 cancel 取消 bubble 泡泡</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 给father注册单击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     father.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         alert(<span class="string">&#x27;father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 给document注册单击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         alert(<span class="string">&#x27;document&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="事件委托">事件委托</h3><p>事件委托也称为事件代理，在 jQuery 里面称为事件委派。</p><p>给父元素注册事件，利用事件冒泡，当子元素的事件触发，会冒泡到父元素，然后去控制相应的子元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// e.target 这个可以得到我们点击的对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        e.target.style.backgroundColor = <span class="string">&#x27;pink&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="常用鼠标事件">常用鼠标事件</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210916165625.png" alt="1551172699854"></p><p>禁止鼠标右键 <code>contextmenu</code></p><p>禁止鼠标选中 <code>selectstar</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    休想复制我</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. contextmenu 禁用右键菜单</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 2. selectstart 禁止选中文字 </span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;selectstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="鼠标事件对象">鼠标事件对象</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210916165853.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 鼠标事件对象 MouseEvent</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 1. client 鼠标在可视区的x和y坐标</span></span><br><span class="line">            <span class="built_in">console</span>.log(e.clientX);</span><br><span class="line">            <span class="built_in">console</span>.log(e.clientY);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;---------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. page 鼠标在页面文档的x和y坐标</span></span><br><span class="line">            <span class="built_in">console</span>.log(e.pageX);</span><br><span class="line">            <span class="built_in">console</span>.log(e.pageY);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;---------------------&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span></span><br><span class="line">            <span class="built_in">console</span>.log(e.screenX);</span><br><span class="line">            <span class="built_in">console</span>.log(e.screenY);</span><br><span class="line">    </span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="常用键盘事件">常用键盘事件</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210916210400.png" alt="1551318122855"></p><ul><li>onkeypress不识别功能键，如shift等，但区分大小写</li><li>三个事件执行顺序：keydown、keypress、keyup</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 常用的键盘事件</span></span><br><span class="line">    <span class="comment">//1. keyup 按键弹起的时候触发 </span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我弹起了&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keypress&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;我按下了press&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;我按下了down&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="键盘事件对象">键盘事件对象</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210916210632.png" alt="1551318355505"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;up:&#x27;</span> + e.keyCode);</span><br><span class="line">        <span class="comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span></span><br><span class="line">        <span class="keyword">if</span> (e.keyCode === <span class="number">65</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;您按下的a键&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;您没有按下a键&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keypress&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(e);</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;press:&#x27;</span> + e.keyCode);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebApiⅡ：自定义属性、节点</title>
      <link href="/2021/09/13/js-node/"/>
      <url>/2021/09/13/js-node/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义属性">自定义属性</h2><h3 id="获取属性值">获取属性值</h3><ul><li><p>element.属性 ：获取内置属性值</p></li><li><p>element.getAttribute(‘属性’) ：获取自定义属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;demo&quot;</span> index=<span class="string">&quot;1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;nav&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 1. 获取元素的属性值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// (1) element.属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.id);  <span class="comment">//demo</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//(2) element.getAttribute(&#x27;属性&#x27;) </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;id&#x27;</span>)); <span class="comment">//demo</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;index&#x27;</span>)); <span class="comment">//1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="设置属性值">设置属性值</h3><ul><li>element.属性 = ‘属性值’</li><li>element.setAttribute (‘属性’,‘属性值’) ：设置自定义属性值</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) element.属性= &#x27;值&#x27;</span></span><br><span class="line">  div.id = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">  div.className = <span class="string">&#x27;navs&#x27;</span>;</span><br><span class="line"><span class="comment">// (2) element.setAttribute(&#x27;属性&#x27;, &#x27;值&#x27;);  主要针对于自定义属性</span></span><br><span class="line">  div.setAttribute(<span class="string">&#x27;index&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">  div.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>); </span><br></pre></td></tr></table></figure><h3 id="移除属性">移除属性</h3><p><code>element.removeAttribute ('属性')</code></p><h3 id="h5自定义属性">h5自定义属性</h3><p>自定义属性获取是通过getAttribute(‘属性’) 获取。</p><p>但是有些自定义属性很容易引起歧义，不容易判断是元素的内置属性还是自定义属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div getTime=<span class="string">&quot;20&quot;</span> data-index=<span class="string">&quot;2&quot;</span> data-list-name=<span class="string">&quot;andy&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// console.log(div.getTime);</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;getTime&#x27;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.setAttribute(<span class="string">&#x27;data-time&#x27;</span>, <span class="number">20</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;data-index&#x27;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;data-list-name&#x27;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// dataset 是一个集合里面存放了所有以data开头的自定义属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.dataset);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.dataset.index);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;index&#x27;</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.dataset.listName);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;listName&#x27;</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="节点">节点</h2><p>网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p><p>一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p><ul><li><p>元素节点 nodeType 为1</p></li><li><p>属性节点 nodeType 为2</p></li><li><p>文本节点 nodeType 为3（文字、空格、换行）</p><p><strong>实际开发中，节点操作主要操作元素节点</strong></p></li></ul><h3 id="父级节点">父级节点</h3><p><code>node.parentNode</code></p><p>parentNode返回某节点的父节点（最近的），没有则返回null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">       <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dad&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="built_in">console</span>.log(son.parentNode);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="子节点">子节点</h3><p><code>parentNode.chlidNodes</code>(标准)</p><p>返回值包含所有子节点，包括元素、文本节点等，so一般不用childNodes</p><p><code>parentNode.children</code>(非标准)</p><p>返回值只有元素字节，so提倡用children</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>胖虎同学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>panghutx<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>www.wangyouwu.cn<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>blog.wangyouwu.cn<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// DOM 提供的方法（API）获取</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> lis = ul.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 1. 子节点  childNodes 所有的子节点 包含 元素节点 文本节点等等</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(ul.childNodes);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(ul.childNodes[<span class="number">0</span>].nodeType); <span class="comment">//3</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(ul.childNodes[<span class="number">1</span>].nodeType); <span class="comment">//1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2. children 获取所有的子元素节点 也是我们实际开发常用的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(ul.children); </span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(ul.children[<span class="number">0</span>]); <span class="comment">//第一个li</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(ul.children[ul.children.length - <span class="number">1</span>]);<span class="comment">//最后一个li</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="创建-添加节点">创建/添加节点</h3><ol><li><p>创建节点</p><p><code>document.creatElement('tagName')</code></p></li><li><p>添加节点</p><p><code>node.appendChild(child)</code>   将节点添加到父节点的子节点列表末尾</p><p><code>node.inserBefore(child,指定元素)</code>   将节点添加到父节点的子节点列表开头</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>胖虎同学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 1. 创建节点元素节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ul.appendChild(li);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> lili = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ul.insertBefore(lili, ul.children[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 4. 我们想要页面添加一个新的元素 ： 1. 创建元素 2. 添加元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="删除节点">删除节点</h3><p><code>node.removeChild()</code></p><p>从node节点中删除子节点，返回的是删除节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;删除&lt;/button&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>胖虎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>胖虎同学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>胖虎同学的博客<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 1.获取元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 2. 删除元素  node.removeChild(child)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// ul.removeChild(ul.children[0]);</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 3. 点击按钮依次删除里面的孩子</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="keyword">if</span> (ul.children.length == <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             <span class="built_in">this</span>.disabled = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             ul.removeChild(ul.children[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="克隆节点">克隆节点</h3><p><code>node.cloneNode()</code></p><ul><li>如果括号参数为空或false，则为浅拷贝，只克隆节点本身，不克隆里面的子节点</li><li>括号参数为true，则为深拷贝，会克隆字节本身以及里面所有子节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2. node.cloneNode(true); 括号为true 深拷贝 复制标签复制里面的内容</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> lili = ul.children[<span class="number">0</span>].cloneNode(<span class="literal">true</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ul.appendChild(lili);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="DOM重点总结">DOM重点总结</h2><p>文档对象模型（Document Object Model），处理可拓展标记语言的编程接口，可以改变网页内容、结构、样式。</p><p>关于DOM操作，主要针对元素操作，主要有创建、增删改查、属性操作、实践操作。</p><ul><li>创建：</li></ul><p><code>document.write</code> <code>innerHTML</code> <code>creatElement</code></p><ul><li>增加</li></ul><p><code>appendChild</code> <code>insertBefore</code></p><ul><li>删除</li></ul><p><code>removeChild</code></p><ul><li>改</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210914151227.png" alt="1551164907830"></p><ul><li>查</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210914151205.png" alt="1551164936214"></p><ul><li>属性操作</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210914151306.png" alt="1551164985383"></p><ul><li>事件操作</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210914151350.png" alt="1551172699854"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《认知觉醒》：真正的成长不是懂得多少道理，而是做出多少改变</title>
      <link href="/2021/09/05/read-renzhi/"/>
      <url>/2021/09/05/read-renzhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>年轻的时候，人人都自命不凡，认定美好生活会自然到来。后来他们不得不敲碎那颗高傲的心，在无奈和叹息中接受平庸的自己。</p></blockquote><p>杨绛说：“你的问题在于想得太多，读书太少”。学而不思则罔，思而不学则怠，学习和思考是缺一不可的。看完《认知觉醒》，我觉得还有一点更重要的，行动。“道理我都懂，就是做不到”，“听过很多道理，依然过不好这一生”，都是因为缺少行动。懂得百点不如改变一点，真正的成长不是懂得多少道理，而是做出多少改变。</p><h3 id="做出行动和改变">做出行动和改变</h3><p>急于求成、避难趋易是人的天性。从难度上来讲，阅读&lt;思考&lt;行动，一些人往往选择最简单的阅读，却不愿行动，这是避难趋易的天性；读完一本书马不停蹄地读下一本，没有思考和行动，却又想立刻见到成效，这是急于求成的天性。就功课的学习而言，我喜欢看视频学习，很少刷题。我知道刷题能取得更快的提升，但我还是看视频来麻木自己。因为相对刷题，看视频是更省力的方式，这都是避难趋易的天性在作怪。所以一件事如何去做，不必去找什么方法技巧，你最不愿意尝试的那个就是最有效的方法。什么最重要，每个人都心知肚明，却不愿面对，人们愿意活在自己的舒适区。</p><blockquote><p>正确的行动往往是反天性的，让你觉得舒服和容易的事往往得不到好结果， 而一开始你认为难受和困难的事才能让你真正产生收获，</p></blockquote><h3 id="活在舒适区边缘">活在舒适区边缘</h3><p>活在轻车熟路的舒适区不会有任何提升，闯入望尘莫及的困难区也很难进步，我们应该在舒适区边缘不断试探。在舒适区边缘，既有挑战又有成就，能够不断扩宽自己舒适区的边界。如果只是阅读，就是单纯的输入，这是活在自己的舒适区，不会有成效。而阅读时的思考，思考后的改变，就是在舒适区的边缘试探，虽然有挑战但有收获。很多人的焦虑痛苦就是只顾着表层的学习，努力到感动自己，却一直没有跳出舒适区。如果不关注思考、行动、改变，就不会学有所获，还会怀疑是自己学的不够，陷入“越学越焦虑”的怪圈。</p><blockquote><p>“多即是少，少即是多”，停在表层，我们就会陷入欲望漩涡，什么都想学、什么都想要，忙忙碌碌却收效甚微；若是能深入底层，盯住实际改变，我们就能跳出盲目、焦虑、浮躁的怪圈。</p></blockquote><p>读一本书，不求记住多少知识。哪怕一个观点对你有益，让你因此改变，这就够了，因为你已经走出了舒适区。舒适区边缘10%的努力，也要胜过舒适区100%的努力（自我欺骗）。活在舒适区边缘，不专注表面，就会走出焦虑怪圈。怕什么真理无穷，进一步有进一步的欢喜。</p><h3 id="找寻更好的视角">找寻更好的视角</h3><blockquote><p>无论你当前处于何种情绪旋涡，只要自己愿意， 总能找到更好的角度。 只是有的人面对再好的事情时都盯着一点瑕疵不放， 而有的 人却能从任何一件糟糕的事情中找到闪光点并放大，忽视其他不足之处。</p></blockquote><p>就像《被讨厌的勇气》所说的，要寻找更大的共同体。不要拘泥于一个共同体，不要只看到一个视角。身处逆境，有的人深陷其中不能自拔，有的人处在逆境却不自知，反而乐在其中。一辆车停在那里不动，我们可以找到一个更好的角度去拍摄它。一件事也许不能改变，但我们可以改变看待事情的态度。就像”塞翁失马，焉知非福“，”祸兮福所倚，福兮祸所伏“，”反者道之动“，这都是事物发展的规律、是哲学的智慧，不是一种自我欺骗。即使有人仍认为这是一种自我欺骗，但我们每天不都是在自我欺骗吗。人就是解释型动物，活着有意义吗，人们为了有意义，赋予了活着的意义；世界有意义吗，人们为了有意义，赋予了世界的意义。</p><h3 id="tips-2">tips</h3><ul><li>“ 刻意练习四要素”：定义明确的目标、极度的专注、有效的反馈、在拉伸区练习。</li><li>时常问自己：这个道理还能用在什么地方？</li><li>游戏心态：我不是在做这件事，我是在做另一件事。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《你的第一本哲学书》读书分享</title>
      <link href="/2021/08/20/read-allmeans/"/>
      <url>/2021/08/20/read-allmeans/</url>
      
        <content type="html"><![CDATA[<h3 id="引言">引言</h3><p>《你的第一本哲学书》是本很精简的哲学入门书，没有专业术语，没有各种学派，直接面向最基本的哲学问题。看译后记发现个有趣的事：原著书名是“What does it all mean”，译者综合考虑译为《哲学冒险》，结果出版社考虑对读者的吸引力，起名为“你的第一本哲学书”😂</p><blockquote><p>我们每天都使用一些平常的概念，却从未加以反思；而哲学的主要工作就是去询问和理解这些概念。 你要探究的概念越是基础，可以帮助你的工具也就越是匮乏。</p></blockquote><p>以我的能力读这本书还是很费力，作者谈及的都是一些习以为常的事情，都是在平时没有思考过而默认的概念。</p><h3 id="自由意志">自由意志</h3><p>假设在学习和娱乐面前，我选择了娱乐。期末考试要来了，我后悔地说道：“我本可以好好学习”。</p><p>“我本可以好好学习”这句话什么意思？在同样的时间、环境、条件下，我仍然可以选择学习。人们在外在条件一模一样的情况下，并不需要发生任何不同的事情作为前提，就能够做某些他们实际上并没有做的事情。这意味着什么呢？</p><p>这说明在选择娱乐之前，学习仍是开放的可能性，选择学习还是娱乐是由我的自由意志决定的，不由外界决定。</p><p>不过，决定论认为我们做什么事情都是事先决定好的，永远也不可能做实际上所没有做的事。</p><blockquote><p>世界上所发生的一切事情都是被自然法则所主宰的，就好像行星的运动被自然法则所主宰一样，一个行为的诸多条件正是通过这些自然法则的安排，才能够决定这个行为，并且排除掉其他一切可能性。</p></blockquote><p>如果真是这样，那很可怕。当我想学习还是娱乐时，我的选择已经被决定，娱乐还是学习这一想法只不过是事先被决定的结果在我的意识中出现的过程。在我出生之前，我这一时刻选择娱乐的决定已经被决定，我的选择是直接被前一刻的情境所决定的，而前一刻的情境又是被再往前一刻的情境所决定的，这样可以无穷追溯下去。</p><p>如果真是这样，”我本可以好好学习“这句话毫无意义。这都是被决定好的。我不能责备自己没有好好学习，更不能决定罪犯，惩罚坏人便没有意义。因为一个人做了他绝不可能不做的事而去惩罚他，这是没有意义的。</p><p>如果决定论是真的，社会秩序将荡然无存，人类的一切行为也没有了意义。决定论是否正确，我们不得而知。</p><p>假设决定论是假的，”我本可以好好学习“这句话又是什么意思？你相信是你通过做出选择，决定了自己将要做什么。这一选择并非事先被决定，但是也不是自己发生的。你选择了它，并且你也能够选择别的。但是这又意味着什么？</p><p>一些人认为，这个问题没有答案。自由行为是世界上的一种基本特性，不能够再加以分解。某件事情不需要原因而发生，和一个行为不需要原因而被人做出，二者间有着微妙的不同。</p><p>即使我们的选择并非事先已被决定，我们以何种方式能够做我们实际上所没有做的事情，仍然很难理解。两种选择在事先皆有可能，但是除非是“我”决定选其中某个，否则我仍然不需要对这种选择负责，正如如果它是被在我之外的原因所决定的，我不需要为此负责一样。如果决定论是正确的，先前的条件就该为我们的行为负责，如果决定论是错误的，就没什么东西要负责了。</p><p>……</p><h3 id="死亡">死亡</h3><p>人终会死去，我们无法想象死后的样子。</p><p>如果二元论正确，人是由身体和灵魂组成，身体和灵魂时独立的，身体死后灵魂会不会离开身体，依附一个新的身体而存在。即使二元论正确，也可能不存在死后生活，灵魂很可能完全依赖身体。</p><p>如果二元论是错的，就不存在死后生活。</p><p>我们以何种态度面对自己的死亡？如果不存在死后生活，死亡就是一了百了，我们又是什么态度？</p><p>书中写道，必然是一种消极的善或者恶。换句话说，它是一片虚无，如果是好的，那么一定是因为它避免了某种坏事（例如无聊或痛苦），如果是坏的，也一定是因为它失去了某种好事（例如在世时有趣的或愉悦的体验）。</p><p>如果死后就是一了百了，这也许并不可怕。<strong>在我们出生之前的漫长岁月里，世界如常存在，但是却没有我们，对此我们安之若素。那么，想到我们死后就不复存在，这又有什么可怕的呢？</strong></p><h3 id="人生的意义">人生的意义</h3><p>我认为，人生不论有无意义，这都毫无意义。无论有无意义，我们照样过着自己的日子。</p><p>但总有人把自己看得很重要，他希望自己的人生整体从外在看，也具有意义。</p><p>许多人活着不只是为了活下去和过得舒适，而是为了满足自己的雄心壮志，付出了种种艰辛努力，其心理动力往往就是来自于一种“重要感”。这种感觉就是：你所做的一切不只是对你来说才重要，在某种更大的意义上来说，它本身就很重要。如果我们放弃了这种重要感，我们就不再能鼓起前进的风帆。如果浮生若梦，万事无常，最终都归于尘土，那么也许我们的雄心壮志不过徒然为荒诞不经的玩笑而已。</p><p>从另一方面来说，<strong>如果我们无可救药地执着于自己的意义，或许也只能安于自身的可笑。也许生命不仅没有意义，而且也是一出荒诞剧？</strong></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《穷爸爸 富爸爸》读书分享</title>
      <link href="/2021/08/20/read-richdad/"/>
      <url>/2021/08/20/read-richdad/</url>
      
        <content type="html"><![CDATA[<h3 id="前言-3">前言</h3><p>《穷爸爸 富爸爸》是暑假读的第二本书，关于这本书也褒贬不一。取其精华，去其糟粕。关于财富，书中提到：**财富就是支撑一个人生存多长时间的能力，或者说，如果我今天停止工作，我还能活多久？**财富的增加不是依靠收入，而是资产的积累。头脑是真正的资产，要养成终身学习的习惯，再次引用书中一段话：<strong>轻松的道路往往会越走越艰难，而艰难的道路往往会越走越轻松。</strong></p><h3 id="不为钱而工作">不为钱而工作</h3><p>人们为了实现欲望而工作。他们认为钱能买来快乐，可用钱买来的快乐往往是短暂的，所以不久他们就需要更多的钱来买更多的快乐、更多的开心、更多的舒适和更多的安全感。于是他们继续工作，以为钱能安抚他们备受恐惧和欲望折磨的灵魂，但实际上钱是无法做到这一点的。</p><p>**工作只是试图用暂时的办法来解决长期的问题。**钱控制了他们的生活，确切地说是，对钱的无知和恐惧控制了他们的生活。所以他们拼命工作。他们的思想被他们的感情，而不是他们的头脑控制着。”</p><p>不为钱而工作不是说不在乎钱，不谈钱就像依赖钱一样是一种精神上的疾病。我们不能陷入为钱工作的死循环，要看到他人看不到的东西。</p><h3 id="资产和负债">资产和负债</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210820151530.png" alt=""><br><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210820151542.png" alt=""></p><p>书中写道：资产是能把钱放进你口袋里的东西。负债是把钱从你口袋里取走的东西。</p><p>也就是说，资产带来收入，负债带来支出。</p><p>增加财富就是要积累资产。拼命工作增加的只是收入，将收入买入资产还是负债，抑或支出，划分了穷人、中产阶级和富人。</p><blockquote><p>富人买入资产。</p><p>穷人只有支出。</p><p>中产阶级购买自以为是资产的负债。</p></blockquote><p>一个受过高等教育的人，也可能是财务上的文盲。他们努力工作，却不知道如何让钱为自己工作，甚至不知道他们真正的问题在于他们选择的消费方式，那才是他们在财务困境中苦苦挣扎的原因。</p><p>书中有这样一段话：</p><blockquote><p>日本人注重3种力量：剑、宝石和镜子。</p><p>剑象征着武器的力量。美国人在武器上已经花了上千亿美元，是世界上的超级军事大国。</p><p>宝石象征着金钱的力量。有句格言很有道理：“记住黄金规则：有黄金的人制定规则。”</p><p>镜子象征着自知的力量。从日本的传奇故事中我们得知，自知是3种力量中最宝贵的。</p></blockquote><p>穷人和资产阶级往往被金钱控制着，却不相信自知的力量。人们总是不相信自己内在的智慧，只会随波逐流，人云亦云。**他们做事情只是因为其他人也这么做，他们总是服从而不去提问。**他们总是轻率地重复别人告诉他们的东西，例如：“分期付款”、“你的房子就是你的资产”、“你的房子是你最大的投资”、“欠债可以抵税”、“找一个稳定的工作”、“别犯错误”、“别冒险”之类的话。他们害怕与别人不同。<strong>大多数人热衷于“稳定”是出于恐惧。</strong></p><p>学校的教育也是一样，学校教育我们就像企业的流水线产品，被要求循规蹈矩，所以说学校是生产好雇员而不是好雇主的地方。</p><h3 id="关注自己的事业">关注自己的事业</h3><p>什么是自己的事业，你的事业不是你的工作，如果你把工作当成事业，便会耗尽一生去关注别人的事业并使他人致富。你事业的重心是你的资产项，而不是收入项。夫人关心的是资产而其他人关心的是收入。</p><p>麦当劳的创始人雷·克罗克说，我的事业不是做汉堡🍔，而是房地产。在他的商业计划中，麦当劳的大额收入来源是出售分店所得的费用。</p><h3 id="教育比金钱更有价值">教育比金钱更有价值</h3><p>书中有个有意思的观点，job=just over broke，工作一次就是比破产强一点。工人付出最大努力以免于被解雇，而雇主提供最低工资以防止工人辞职。即使这样，也没人敢不满，他们只想找一份稳定的工作，大部分人都是为了短期的工资和福利工作。你越努力工作，老板也就越富有。</p><p>相反，工作是为了能力的提升，要弄清自己想要获得什么技能，不要为钱而工作。从长远看，教育比金钱更有价值。</p><h3 id="克服困难">克服困难</h3><p>掌握财务知识的人却不能积累丰厚的资产项，其主要原因书中列举了5个，这里举出两个。</p><ul><li>恐惧心理</li></ul><p>投资有风险，没有人会一直成功。要克服恐惧心理，正视失败。对于胜利者，失败会激励他们；对于失败者，失败则会击垮他们。他们在财务上不成功是因为对他们而言亏钱所造成的痛苦远远大于致富所带来的乐趣。</p><ul><li>愤世嫉俗</li></ul><p>书中谈到小鸡的故事，“天要塌下来了，天要塌下来了”，小鸡总是围着谷仓转，警告大家即将到来的厄运。我们知道有的人也爱这么做，其实我们每个人的心里也都有一只“小鸡”。愤世嫉俗的人就像“小鸡”一样，每当心里害怕、怀疑的时候，他们就会像“小鸡”一样杞人忧天。愤世者抱怨现实，而成功者分析现实。我们需要极大的勇气，不让谣言和杞人忧天的怀疑加剧我们的恐惧和疑虑。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《被讨厌的勇气》读书分享</title>
      <link href="/2021/08/20/read-courage/"/>
      <url>/2021/08/20/read-courage/</url>
      
        <content type="html"><![CDATA[<p>『因为拥有了被讨厌的勇气，于是有了真正幸福的可能』</p><h3 id="前言-2">前言</h3><p>暑假快结束了，想为假期读过几本书写几篇读书笔记。暑假读的第一本书是《被讨厌的勇气》，书中有很多启发我的观点。其中之一是自卑和自卑情结，这我在之前谈到过；还有一个是对人生的描述，人生是点状的，是每一个刹那，不是一条线、一个整体。书中还有个有趣的比喻：当你站在舞台上，聚光灯打向你，你什么也看不见。当聚光灯打向“此时此刻”，也就看不到过去和将来。书中很难理解和践行的是共同体的概念，要做到自我接纳、他者信任和他者贡献。用了一上午时间，略读了一遍，不知不觉写了3000字。</p><p>像《理想国》一样，这本书由现代不常用的对话体写就，通过哲人和青年五夜的对话，向我们阐释了阿德勒心理学。</p><h3 id="不幸来源">不幸来源</h3><p>弗洛伊德的原因论认为，过去决定了现在的我们，现在的不幸、行为都能在过去找到原因，如果是这样，我们将没有能力改变现状，我们将是无力、痛苦的。阿德勒心理学否认了弗洛伊德的原因论，他认为过去并不重要，重要的是我们赋予过去的意义。你的不幸、痛苦不是因为过去，而是因为你的选择。</p><p>「你在人生的某个阶段里选择了“不幸”。这既不是因为你生在了不幸的环境中，也不是因为你陷入了不幸的境地中，而是因为你认为“不幸”对你自身而言是一种“善”。」</p><p>就像“弱者”常常利用自己的弱者优势，站在道德制高点。阿德勒指出：“在我们的文化中，弱势其实非常强大而且具有特权。”就像田园女👊一样，义务和责任避而不谈，大搞“按闹分配”，我不行，我不做，你要为我做，你要为我担责。而女权主义是我能行，我要做，我去做，我担责，我争取权益，我实现自我。</p><p>「阿德勒的目的论是说：“无论之前的人生发生过什么，都对今后的人生如何度过没有影响。”决定自己人生的是活在“此时此刻”的你自己。」</p><h3 id="人际关系">人际关系</h3><p>「之所以感觉孤独并不是因为只有你自己一个人，感觉自己被周围的他人、社会和共同体所疏远才会孤独。我们要想体会孤独也需要有他人的存在。也就是说，人只有在社会关系中才会成为“个人”。」</p><p>就像孤独是个群体概念，有了他人的存在，才有孤独的存在。阿德勒提出，人的烦恼皆源于人际关系。如果宇宙中没有他人只有自己，那么一切烦恼将会消失。这和后面提到的共同体并不冲突。我们过分在意他人的看法，甚至有些人是在为他人而活，觉得自己的一举一动都会被别人关注。事实上，在意你的，只有你自己。</p><p>阿德勒心理学是勇气心理学，也是“使用的心理学”。提出人的烦恼皆源于人际关系，是让你不过分在乎他人的看法，为自己而活。</p><h3 id="课题分离">课题分离</h3><p>「首先要思考一下“这是谁的课题”。然后进行课题分离——哪些是自己的课题，哪些是别人的课题，要冷静地划清界限。而且，不去干涉别人的课题也不让别人干涉自己的课题。」</p><p>孩子的学习是自己的课题，家长可以为孩子营造好的学习环境、提供力所能及的帮助，而不应该干涉他的学习，毕竟这是他的课题。很多人活得很累、烦恼很多，就是因为不会课题分离。</p><p>他人对你的看法、对你的期待这不是由你决定的，这不是你的课题。自由就是不寻求认可，不活在他人的期待中。倘若自己都不为自己活出自己的人生，那还有谁会为自己而活呢？</p><h3 id="共同体">共同体</h3><p>「不幸之源也在于人际关系。反过来说，幸福之源也在于人际关系。共同体感觉是幸福的人际关系的最重要的指标。」</p><p>我们都处在共同体之中，共同体不仅包括家庭、学校、城市，还包括国家、人类、过去、未来……只要有两个人，就可以构成共同体。我们把每个人都当作伙伴，我们生活在伙伴之中，我们能够从中找到自己的位置，这就是共同体的感觉。把对自己的执著（self interest）变成对他人的关心（social interest）。</p><p>对自己的执着，就是以自己为中心。那些过分在意他人看法的人，在意他人如何关注、评价自己，是在满足自己的欲求，看似迎合他人，实际上眼里只有自己。</p><p>「无论是你还是我，我们都不是世界的中心，必须用自己的脚主动迈出一步去面对人际关系课题；不是考虑“这个人会给我什么”，而是要必须思考一下“我能给这个人什么”。这就是对共同体的参与和融入。」</p><p>我们要在更广阔的天地寻找自己的位置。如果一个人只看到家庭、学校这个共同体，那么在学校受欺负、交不到朋友或者学习不好的人就无法在这里产生归属感，然后逃到家庭这个更小的共同体，就会躲在家里不愿出去，产生心理问题。</p><p>除了家庭、学校，还有更大的共同体，在家庭、学校之外，还有更广阔的世界，我们可以在更大的共同体中找到归属感。当你在家庭、学校感到身陷囹圄，只要发现世界之大，就会明白这只不过是“杯中风暴”。跳出被子，再猛烈的风也会变成微风。</p><p>「当我们在人际关系中遇到困难或者看不到出口的时候，首先应该考虑的是“倾听更大共同体的声音”这一原则。」</p><h3 id="人生和谐">人生和谐</h3><p>如何建立共同体感觉，在共同体中获得归属感，要做到：“自我接纳”“他者信赖”和“他者贡献”。</p><p>要分清“能够改变的”和“不能改变的”。我们无法改变“被给予了什么”。但是，关于“如何去利用被给予的东西”，我们却可以用自己的力量去改变。这就是不去关注“无法改变的”，而是去关注“可以改变的”。这就是自我接纳。</p><p>你现在一味地担心“被背叛”，也只关注因此受到的伤痛。但是，如果不敢去信赖别人，那最终就会与任何人都建立不了深厚的关系。正如前面的功课分离，被背叛是他人的课题，而信赖他人是自己的课题。我们可以相信也可以怀疑；并且，我们的目标是把别人当作朋友。如此一来，是该选择信任还是怀疑，答案就非常明显了。</p><p>工作的本质是对他人的贡献。劳动不是赚钱的手段，而是实现他者贡献的途径。通过劳动，参与共同体，获得自己的存在价值。很多富豪们已经有了一生都花不完的财富，但还在忙碌工作着，是因为无穷的欲望吗？是因为他者贡献来实现自我价值，获得归属感。</p><p>「正因为接受了真实的自我——也就是“自我接纳”——才能够不惧背叛地做到“他者信赖”；而且，正因为对他人给予无条件的信赖并能够视他人为自己的伙伴，才能够做到“他者贡献”；同时，正因为对他人有所贡献，才能够体会到“我对他人有用”进而接受真实的自己，做到“自我接纳”。」</p><p>我们惯用大家、一切、总是这类的词语，“大家都讨厌我”这个大家其实就是几个人。犹太教教义中有这么一段话：“假如有10个人，其中势必会有1个人无论遇到什么事都会批判你。他讨厌你，你也不喜欢他。而且，10个人中也会有2个人能够成为与你互相接纳一切的好朋友。剩下的7个人则两者都不是。”</p><p>这种时候，是应该关注讨厌你的1个人还是喜欢你的2个人，或是大多数的7个人呢？当你因为某件事或某个缺点被别人讨厌或笑话，但笑话你的只是少数人，而你因为少数人就判断了所有人。真正的问题在于无法做到自我接纳、他者信赖和他者贡献，却将焦点聚集到微不足道的一个方面并企图以此来评价整个世界。这就是缺乏人生和谐的错误生活方式。</p><h3 id="此时此刻">此时此刻</h3><p>请你想象一下自己站在剧场舞台上的样子。此时，如果整个会场都开着灯，那就可以看到观众席的最里边。但是，如果强烈的聚光灯打向自己，那就连最前排也看不见。我们的人生也完全一样。正因为把模糊而微弱的光打向人生整体，所以才能够看到过去和未来；不，是感觉能够看得到。但是，如果把强烈的聚光灯对准“此时此刻”，那就会既看不到过去也看不到未来。</p><p>我们应该更加认真地过好“此时此刻”。如果感觉能够看得到过去也能预测到未来，那就证明你没有认真地活在“此时此刻”，而是生活在模糊而微弱的光中。人生是连续的刹那，根本不存在过去和未来。你是想要通过关注过去或未来为自己寻找免罪符。过去发生了什么与你的“此时此刻”没有任何关系，未来会如何也不是“此时此刻”要考虑的问题。假如认真地活在“此时此刻”，那就根本不会说出那样的话。</p><p>人生中最大的谎言就是不活在“此时此刻”。纠结过去、关注未来，把微弱而模糊的光打向人生整体，自认为看到了些什么。你之前就一直忽略“此时此刻”，只关注根本不存在的过去和未来。对自己的人生和无可替代的刹那撒了一个大大的谎言。</p><p><strong>世界很简单，人生也一样！</strong></p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210820105310.jpg" alt="被讨厌的勇气"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebApiⅠ：操作元素</title>
      <link href="/2021/08/19/WebApi1/"/>
      <url>/2021/08/19/WebApi1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-Web-API介绍">1.1. Web API介绍</h2><h3 id="1-1-1-API的概念">1.1.1 API的概念</h3><p>API（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，无需理解其内部工作机制细节，只需直接调用使用即可。</p><h3 id="1-1-2-Web-API的概念">1.1.2 Web  API的概念</h3><p>​Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API ( BOM 和 DOM )。</p><p>​MDN 详细 API : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p><p>​因为 Web API 很多，所以我们将这个阶段称为 Web APIs。</p><p>​此处的 Web API 特指浏览器提供的一系列API(很多函数或对象方法)，即操作网页的一系列工具。例如：操作html标签、操作页面地址的方法。</p><h3 id="1-1-3-API-和-Web-API-总结">1.1.3 API 和 Web  API 总结</h3><ol><li><p>API 是为我们程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了，不必纠结内部如何实现</p></li><li><p>Web API 主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果。</p></li><li><p>Web API 一般都有输入和输出（函数的传参和返回值），Web API 很多都是方法（函数）</p></li><li><p>学习 Web API 可以结合前面学习内置对象方法的思路学习</p></li></ol><h2 id="1-2-DOM-介绍">1.2. DOM 介绍</h2><h3 id="1-2-1-什么是DOM">1.2.1 什么是DOM</h3><p>​文档对象模型（Document Object Model，简称DOM），是 W3C组织推荐的处理可扩展标记语言的标准编程接口</p><p>​W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p><p>​    DOM是W3C组织制定的一套处理 html和xml文档的规范，所有的浏览器都遵循了这套标准。</p><h3 id="1-2-2-DOM树">1.2.2. DOM树</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210817153540.png" alt="1550731974575"></p><p>DOM树 又称为文档树模型，把文档映射成树形结构，通过节点对象对其处理，处理的结果可以加入到当前的页面。</p><ul><li>文档：一个页面就是一个文档，DOM中使用document表示</li><li>节点：网页中的所有内容，在文档树中都是节点（标签、属性、文本、注释等），使用node表示</li><li>标签节点：网页中的所有标签，通常称为元素节点，又简称为“元素”，使用element表示</li><li><strong>DOM把以上内容都看作是对象。</strong></li></ul><h2 id="1-3-获取元素">1.3. 获取元素</h2><p>为什么要获取页面元素？</p><p>例如：我们想要操作页面上的某部分(显示/隐藏，动画)，需要先获取到该部分对应的元素，再对其进行操作。</p><h3 id="1-3-1-根据ID获取">1.3.1. 根据ID获取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="built_in">document</span>.getElementById(id)</span><br></pre></td></tr></table></figure><p>作用：根据ID获取元素对象<br>参数：id值，区分大小写的<strong>字符串</strong><br>返回值：元素对象 或 null</p><p><strong>案例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;news&quot;</span>&gt;</span>2021-8-16:吴亦凡被批捕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 因为我们文档页面从上往下加载，所以先得有标签 所以我们script写到标签的下面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> <span class="keyword">new</span> = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;news&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(news);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">new</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// console.dir 打印我们返回的元素对象 更好的查看里面的属性和方法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.dir(<span class="keyword">new</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-根据标签名获取元素">1.3.2. 根据标签名获取元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：document.getElementsByTagName(&#x27;标签名&#x27;) 或者 element.getElementsByTagName(&#x27;标签名&#x27;) </span><br></pre></td></tr></table></figure><p>作用：根据标签名获取元素对象<br>参数：标签名<br>返回值：伪数组</p><p><strong>案例代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>炼金术士<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>牧羊少年的奇幻之旅<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>The Alchemist<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>小王子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>追风筝的人<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>月亮与六便士<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(lis);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(lis[<span class="number">1</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 2. 我们想要依次打印里面的元素对象我们可以采取遍历的方式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(lis[i]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 3. element.getElementsByTagName()  可以得到这个元素里面的某些标签</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> nav = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;nav&#x27;</span>); <span class="comment">//获得nav元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> navLis = nav.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(navLis);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</p></li><li><p>getElementsByTagName()获取到是动态集合，即：当页面增加了标签，这个集合中也就增加了元素。</p></li></ul><h3 id="1-3-3-H5新增获取元素">1.3.3. H5新增获取元素</h3><table><thead><tr><th>代码</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>document.getElementsByClassName (‘类名’)</td><td>根据类名获得某些元素集合</td><td></td></tr><tr><td>document.querySelector(‘选择器’)</td><td>根据指定选择器返回第一个元素对象</td><td>加符号 ‘#nav’</td></tr><tr><td>document.querySelectorAll(‘选择器’)</td><td>根据指定选择器返回所有元素对象</td><td>加符号 ‘#nav’</td></tr></tbody></table><p><strong>案例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> boxs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(boxs);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 2. querySelector 返回指定选择器的第一个元素对象  切记 里面的选择器需要加符号 .box  #nav</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> firstBox = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(firstBox);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#nav&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(nav);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> li = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(li);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> allBox = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.box&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(allBox);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(lis);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-4-获取特殊元素">1.3.4 获取特殊元素</h3><table><thead><tr><th>获取body元素</th><th>获取html元素</th></tr></thead><tbody><tr><td>document.body</td><td>document.documentElement</td></tr></tbody></table><h2 id="1-4-事件基础">1.4. 事件基础</h2><h3 id="1-4-1-事件概述">1.4.1. 事件概述</h3><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解： <strong>触发— 响应机制</strong>。</p><p>​网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个 事件，然后去执行某些操作。</p><h3 id="1-4-2-事件三要素">1.4.2. 事件三要素</h3><ul><li>事件源（谁）：触发事件的元素</li><li>事件类型（什么事件）： 例如 click 点击事件</li><li>事件处理程序（做啥）：事件触发后要执行的代码(函数形式)，事件处理函数</li></ul><p><strong>案例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 点击一个按钮，弹出对话框</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 1. 事件三要素：事件源  事件类型  事件处理程序</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//(1) 事件源 事件被触发的对象   谁  按钮</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//(3) 事件处理程序  通过一个函数赋值的方式 完成</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&#x27;谁让你点我的&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="1-4-3-执行事件的步骤">1.4.3. 执行事件的步骤</h3><ol><li>获取事件源</li><li>注册事件（绑定事件）</li><li>添加事件处理程序（采取函数赋值形式）</li></ol><p><strong>案例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 执行事件步骤</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 点击div 控制台输出 我被选中了</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 1. 获取事件源</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 2.绑定事件 注册事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// div.onclick </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 3.添加事件处理程序 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;我被选中了&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4-4-常见的鼠标事件">1.4.4. 常见的鼠标事件</h3><table><thead><tr><th>鼠标事件</th><th>触发事件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h2 id="1-5-操作元素">1.5. 操作元素</h2><p>​JavaScript的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容、属性等。（注意：这些操作都是通过元素对象的属性实现的）</p><h3 id="1-5-1-改变元素内容（获取或设置）">1.5.1. 改变元素内容（获取或设置）</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210817184341.png" alt="1550735016756"></p><p><strong>innerText改变元素内容</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>显示当前系统时间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>某个时间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 当我们点击了按钮，  div里面的文字会发生变化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 1. 获取元素 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 2.注册事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// div.innerText = &#x27;2021-8-17&#x27;;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.innerHTML = getDate();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> year = date.getFullYear();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> dates = date.getDate();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> day = date.getDay();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> <span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日 &#x27;</span> + arr[day];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>innerText和innerHTML的区别</strong></p><ul><li>获取内容时的区别：</li></ul><p>​innerText会去除空格和换行，而innerHTML会保留空格和换行</p><ul><li>设置内容时的区别：</li></ul><p>​innerText不会识别html，而innerHTML会识别</p><p><strong>案例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        我是文字</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// innerText 和 innerHTML的区别 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 1. innerText 不识别html标签 非标准  去除空格和换行</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// div.innerText = &#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 2. innerHTML 识别html标签 W3C标准 保留空格和换行的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.innerHTML = <span class="string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 这两个属性是可读写的  可以获取元素里面的内容</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(p.innerText);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(p.innerHTML);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-2-常用元素的属性操作">1.5.2. 常用元素的属性操作</h3><ol><li>innerText、innerHTML 改变元素内容</li><li>src、href</li><li>id、alt、title</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素对象.属性名 = 修改的内容</span><br></pre></td></tr></table></figure><p><strong>案例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;ldh&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;zxy&quot;</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span> &lt;br&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/ldh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;刘德华&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 修改元素属性  src</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 1. 获取元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> ldh = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ldh&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> zxy = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;zxy&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;img&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 2. 注册事件  处理程序</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        zxy.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            img.src = <span class="string">&#x27;images/zxy.jpg&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            img.title = <span class="string">&#x27;张学友&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ldh.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            img.src = <span class="string">&#x27;images/ldh.jpg&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            img.title = <span class="string">&#x27;刘德华&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="1-5-3-表单元素的属性操作">1.5.3. 表单元素的属性操作</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210818085918.png" alt="1550736039005"></p><p><strong>获取属性的值</strong></p><blockquote><p>元素对象.属性名</p></blockquote><p><strong>设置属性的值</strong></p><blockquote><p>元素对象.属性名 = 值</p><p>表单元素中有一些属性如：disabled、checked、selected，元素对象的这些属性的值是布尔型。</p></blockquote><p><strong>案例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入内容&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 1. 获取元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 2. 注册事件 处理程序</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 表单里面的值 文字内容是通过 value 来修改的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            input.value = <span class="string">&#x27;被点击了&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 如果想要某个表单被禁用 不能再点击 disabled  我们想要这个按钮 button禁用</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// btn.disabled = true;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.disabled = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// this 指向的是事件函数的调用者 btn</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="1-5-4-样式属性操作">1.5.4. 样式属性操作</h3><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><p><strong>常用方式</strong></p><ol><li><p>element.style  行内样式操作</p></li><li><p>element.className  类名样式操作</p></li></ol><h4 id="方式1：通过操作style属性">方式1：通过操作style属性</h4><blockquote><p>元素对象的style属性也是一个对象！</p><p>元素对象.style.样式属性 = 值;</p></blockquote><p>注意：</p><ol><li>JS里面的样式采取驼峰命名法，如：fontSize、backgroundColor</li><li>JS修改style样式操作，产生的是行内样式，css权重比较高</li></ol><p><strong>案例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 1. 获取元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 2. 注册事件 处理程序</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// div.style里面的属性 采取驼峰命名法 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;purple&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.style.width = <span class="string">&#x27;250px&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="方式2：通过操作className属性">方式2：通过操作className属性</h4><blockquote><p>元素对象.className = 值;</p><p>因为class是关键字，所有使用className。</p></blockquote><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210818205919.png" alt="1550737214510"></p><p><strong>案例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> test = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        test.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// this.style.backgroundColor = &#x27;purple&#x27;;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// this.style.color = &#x27;#fff&#x27;;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// this.style.fontSize = &#x27;25px&#x27;;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// this.style.marginTop = &#x27;100px&#x27;;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// this.className = &#x27;change&#x27;;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.className = <span class="string">&#x27;first change&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="1-6-总结">1.6. 总结</h2><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210819082251.png" alt="1550737354861"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础Ⅳ：内置对象</title>
      <link href="/2021/08/16/js4/"/>
      <url>/2021/08/16/js4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-内置对象">1 - 内置对象</h2><h3 id="1-1-内置对象">1.1 内置对象</h3><p>​ JavaScript 中的对象分为3种：<strong>自定义对象 、内置对象、 浏览器对象</strong><br>​前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是<strong>最基本而必要的功能</strong>（属性和方法），内置对象最大的优点就是帮助我们快速开发</p><p>​ JavaScript 提供了多个内置对象：Math、 Date 、Array、String等</p><h3 id="1-2-查文档">1.2 查文档</h3><p>Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。<br>​MDN:<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h3 id="1-3-Math对象">1.3 Math对象</h3><p>​Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p><table><thead><tr><th>属性、方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在[0,1)内的随机值</td></tr></tbody></table><p>​注意：上面的方法使用时必须带括号</p><p>​<strong>获取指定范围内的随机整数</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-Date对象">1.4 Date对象</h3><p>​ Date 对象和 Math 对象不一样，Date是一个<strong>构造函数</strong>，使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><ul><li><p>使用Date实例化日期对象</p><ul><li>获取当前时间必须实例化：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><ul><li>获取指定时间的日期对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> future = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2022-8-16 16:50:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p></li><li><p>使用Date实例的方法和属性</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816165653.png" alt=""></p></li><li><p>通过Date实例获取总毫秒数</p><ul><li><p>总毫秒数的含义</p><p>​基于1970年1月1日（世界标准时间）起的毫秒数</p></li><li><p>获取总毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化Date对象</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 1. 用于获取对象的原始值</span></span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf())</span><br><span class="line"><span class="built_in">console</span>.log(date.getTime())</span><br><span class="line"><span class="comment">// 2. ★简单写可以这么做</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-5-数组对象">1.5 数组对象</h3><h4 id="创建数组的两种方式">创建数组的两种方式</h4><ul><li><p>字面量方式</p><ul><li><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="string">&quot;test&quot;</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure></li></ul></li><li><p>new Array()</p><ul><li><p>示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array();</span><br></pre></td></tr></table></figure><p>注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</p><p>​参数传递规则如下：</p><ul><li><p>如果只传入一个参数，则参数规定了数组的长度</p></li><li><p>如果传入了多个参数，则参数称为数组的元素</p></li></ul></li></ul></li></ul><h4 id="检测是否为数组">检测是否为数组</h4><ul><li><p>instanceof 运算符</p><ul><li><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Array.isArray()</p><ul><li><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(obj));   <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="添加删除数组元素的方法">添加删除数组元素的方法</h4><ul><li><p>数组中有进行增加、删除元素的方法，部分方法如下表</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816165706.png" alt=""></p><p>注意：push、unshift为增加元素方法；pop、shift为删除元素的方法</p></li></ul><h4 id="数组排序">数组排序</h4><ul><li><p>数组中有对数组本身排序的方法，部分方法如下表</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816165713.png" alt=""></p><p>注意：sort方法需要传入参数来设置升序、降序排序</p><ul><li><p>如果传入“function(a,b){ return a-b;}”，则为升序</p></li><li><p>如果传入“function(a,b){ return b-a;}”，则为降序</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; <span class="comment">//sort(函数)</span></span><br><span class="line">    <span class="keyword">return</span> a-b; <span class="comment">//升序</span></span><br><span class="line">&#125;)</span><br><span class="line"> <span class="built_in">console</span>.log(arr); <span class="comment">//1,3,4,12</span></span><br></pre></td></tr></table></figure><h4 id="数组索引方法">数组索引方法</h4><ul><li><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816165720.png" alt=""></p></li></ul><h4 id="数组转换为字符串">数组转换为字符串</h4><ul><li><p>数组中有把数组转化为字符串的方法，部分方法如下表</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816165759.png" alt=""></p><p>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</p></li></ul><h4 id="其他方法">其他方法</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816165818.png" alt=""></p><h3 id="1-6-字符串对象">1.6 字符串对象</h3><h4 id="基本包装类型">基本包装类型</h4><p>​为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p><p>​基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码有什么问题？</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><p>​按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</p><p>​js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;andy&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串的不可变">字符串的不可变</h4><p>​指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><p>​当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。<br>​由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会有效率问题</p><h4 id="根据字符返回位置">根据字符返回位置</h4><p>​字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816165949.png" alt=""></p><p>​案例：查找字符串&quot;abcoefoxyozzopp&quot;中所有o出现的位置以及次数</p><ol><li><p>先查找第一个o出现的位置</p></li><li><p>然后 只要indexOf 返回的结果不是 -1 就继续往后查找</p></li><li><p>因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> index = str.indexOf(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(index != -<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index); <span class="comment">//3</span></span><br><span class="line">    num++;</span><br><span class="line">    index = str.indexOf(<span class="string">&#x27;o&#x27;</span>,index+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;o出现的次数是：&#x27;</span>+ num +<span class="string">&#x27;次&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="根据位置返回字符">根据位置返回字符</h4><p>​字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816170225.png" alt=""></p><p>​案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p><ol><li><p>核心算法：利用 charAt(） 遍历这个字符串</p></li><li><p>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</p></li><li><p>遍历对象，得到最大值和该字符</p><p>​注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> chars = str.charAt(i); <span class="comment">// chars 是 字符串的每一个字符</span></span><br><span class="line">    <span class="keyword">if</span> (o[chars]) &#123; <span class="comment">// o[chars] 得到的是属性值</span></span><br><span class="line">        o[chars]++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        o[chars] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// 2. 遍历对象</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ch = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="comment">// k 得到是 属性名</span></span><br><span class="line">    <span class="comment">// o[k] 得到的是属性值</span></span><br><span class="line">    <span class="keyword">if</span> (o[k] &gt; max) &#123;</span><br><span class="line">        max = o[k];</span><br><span class="line">        ch = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;最多的字符是&#x27;</span> + ch);</span><br></pre></td></tr></table></figure><h4 id="字符串操作方法">字符串操作方法</h4><p>​字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816170329.png" alt=""></p><h4 id="replace-方法">replace()方法</h4><p>​replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.replace(被替换的字符串， 要替换为的字符串)；</span><br></pre></td></tr></table></figure><h4 id="split-方法">split()方法</h4><p>​split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><p>​其使用格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.split(&quot;分割字符&quot;)</span><br></pre></td></tr></table></figure><h2 id="2-简单数据类型和复杂数据类型">2 - 简单数据类型和复杂数据类型</h2><h3 id="2-1-简单数据类型">2.1 简单数据类型</h3><p>​<strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p><h3 id="2-2-复杂数据类型">2.2 复杂数据类型</h3><p>​<strong>复杂数据类型（引用类型）</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p><h3 id="2-3-堆栈">2.3 堆栈</h3><ul><li>堆栈空间分配区别：</li></ul><p>1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p><p>简单数据类型存放到栈里面</p><p>2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816170347.png" alt=""></p><ul><li><p>简单数据类型的存储方式</p><p>​值类型变量的数据直接存放在变量（栈空间）中</p></li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816170352.png" alt=""></p><ul><li><p>复杂数据类型的存储方式</p><p>​引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210816170407.png" alt=""></p></li></ul><h3 id="2-4-简单类型传参">2.4 简单类型传参</h3><p>​函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">console</span>.log(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">fn(x);</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p>​运行结果是：11 10</p><h3 id="2-5-复杂数据类型传参">2.5 复杂数据类型传参</h3><p>​函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123; <span class="comment">// x = p</span></span><br><span class="line">    <span class="built_in">console</span>.log(x.name); <span class="comment">// 2. 这个输出什么 ?    </span></span><br><span class="line">    x.name = <span class="string">&quot;罗志祥&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x.name); <span class="comment">// 3. 这个输出什么 ?    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;吴亦凡&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);    <span class="comment">// 1. 这个输出什么 ?   </span></span><br><span class="line">f1(p);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);    <span class="comment">// 4. 这个输出什么 ?  </span></span><br></pre></td></tr></table></figure><p>​运行结果是：吴亦凡 吴亦凡 罗志祥 罗志祥</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础Ⅲ：作用域和对象</title>
      <link href="/2021/08/15/js3/"/>
      <url>/2021/08/15/js3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-作用域">1 - 作用域</h2><p>​通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><p>JavaScript（es6前）中的作用域有两种：</p><ul><li>全局作用域：作用于所有代码执行的环境(整个script标签内部)或独立的js文件。</li><li>局部作用域（函数作用域）：作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</li></ul><p>❗ <strong>jS没有块级作用域</strong></p><ul><li><p>块作用域由 { } 包括。</p></li><li><p>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：</p><p>java有块级作用域：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">  system.out.print(num);  <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line">system.out.print(num);    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>​以上java代码会报错，是因为代码中 { } 即一块作用域，其中声明的变量 num，在 “{ }” 之外不能使用；而与之类似的JavaScript代码，则不会报错。</p><p>js中没有块级作用域（在ES6之前）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">123</span>); <span class="comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span>);   <span class="comment">//123</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-变量的作用域">2 - 变量的作用域</h2><p>在JavaScript中，根据作用域的不同，变量可以分为两种：</p><ul><li>全局变量</li><li>局部变量</li></ul><p>2.1 全局变量</p><p>在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。</p><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，<strong>在函数内不使用 var 声明的变量也是全局变量</strong>（不建议使用）</li></ul><p>2.2 局部变量</p><p>在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）</p><ul><li>局部变量只能在该函数内部使用</li><li><strong>在函数内部 var 声明的变量是局部变量</strong></li><li>函数的形参实际上就是局部变量</li></ul><p>2.3 全局变量和局部变量的区别</p><ul><li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h2 id="3-作用域链">3 - 作用域链</h2><p>​写在函数内部的是局部作用域，未写在任何函数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据在**[内部函数可以访问外部函数变量]**的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">案例分析<span class="number">1</span>：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( num );</span><br><span class="line">    &#125;</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210815183848.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">作用域链：采取就近原则的方式来查找变量最终的值</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;22&#x27;</span>;</span><br><span class="line">    fn2();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        fn3();</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(a); <span class="comment">//a的值 ?</span></span><br><span class="line">            <span class="built_in">console</span>.log(b); <span class="comment">//b的值 ?</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210815183956.png" alt=""></p><h2 id="4-预解析">4 - 预解析</h2><p>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：<strong>预解析和代码执行</strong>。</p><ul><li><p>预解析：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义，预解析也叫做变量、函数提升。</p></li><li><p>代码执行： 从上到下执行JS语句。</p><p>注意：<strong>预解析会把变量和函数的声明在代码执行之前执行完成。</strong></p></li></ul><ol start="4"><li>1变量预解析</li></ol><p>​变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 结果是多少？</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;      <span class="comment">// ？</span></span><br></pre></td></tr></table></figure><p>结果：undefined<br>★注意：<strong>变量提升只提升声明，不提升赋值</strong></p><p>4.3 函数预解析</p><p>​ 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;打印&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：控制台打印字符串 — ”打印“</p><p>注意：函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！</p><p>4.4 函数表达式声明函数问题</p><p>函数表达式创建函数，会执行变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span>  fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;想不到吧&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：报错提示 ”fn is not a function&quot;</p><p>解释：该段代码执行之前，会做变量声明提升，fn在提升之后的值是undefined；而fn调用是在fn被赋值为函数体之前，此时fn的值是undefined，所以无法正确调用</p><h2 id="5-对象">5 - 对象</h2><p>对象：在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。<br>对象是由属性和方法组成的。</p><ul><li><p>属性：事物的特征，在对象中用属性来表示（常用名词）</p></li><li><p>方法：事物的行为，在对象中用方法来表示（常用动词）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [‘吴签’, ‘30&#x27;, &#x27;选妃&#x27;];</span><br></pre></td></tr></table></figure><p>​上述例子中用数组保存数据的缺点是：数据只能通过索引值访问，开发者需要清晰的清除所有的数据的排行才能准确地获取数据，而当数据量庞大时，不可能做到记忆所有数据的索引值。</p><p>​为了让更好地存储一组数据，对象应运而生：对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。</p><p>使用对象记录上组数据为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;吴签&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">30</span>,</span><br><span class="line">    <span class="attr">works</span>:<span class="string">&#x27;选妃&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS中的对象表达结构更清晰，更强大。</p><h3 id="创建对象的三种方式">创建对象的三种方式</h3><h4 id="利用字面量创建对象">利用字面量创建对象</h4><ul><li><p>键：相当于属性名</p></li><li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> star = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;张哲瀚&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">30</span>,</span><br><span class="line">    <span class="attr">sex</span> : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">sayLove</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;我很爱国&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(star.name)     <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="built_in">console</span>.log(star[<span class="string">&#x27;name&#x27;</span>])  <span class="comment">// 调用名字属性</span></span><br><span class="line">star.sayLove(); <span class="comment">// 调用 sayLove 方法,注意一定要带后面的括号</span></span><br></pre></td></tr></table></figure><p>上述代码中 star即是创建的对象。</p><ul><li><p>变量、属性、函数、方法总结</p><pre><code>- 变量：单独声明赋值，单独存在</code></pre><ul><li><p>属性：对象里面的变量称为属性，不需要声明</p></li><li><p>函数：单独存在的，通过“函数名()”的方式就可以调用</p></li><li><p>方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用</p></li></ul></li></ul></li></ul><h4 id="利用-new-Object-创建对象">利用 new Object 创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Star = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">//创建空对象</span></span><br><span class="line">Star.name=<span class="string">&#x27;吴亦凡&#x27;</span>; <span class="comment">// 给空对象添加属性</span></span><br><span class="line">Star.age=<span class="number">30</span>;</span><br><span class="line">Star.works=<span class="string">&#x27;选妃&#x27;</span>;</span><br><span class="line">Star.sayHi=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 给空对象添加方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我的很大，你要忍一下~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Star.name);</span><br><span class="line"><span class="built_in">console</span>.log(Star[<span class="string">&#x27;age&#x27;</span>]);</span><br><span class="line">Star.sayHi();</span><br></pre></td></tr></table></figure><ul><li>Object() ：第一个字母大写</li><li>使用的格式：对象.属性 =  值;</li></ul><h4 id="利用构造函数创建对象">利用构造函数创建对象</h4><ul><li><p>构造函数</p><ul><li><p>构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p></li><li><p>构造函数的封装格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3</span></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.属性名<span class="number">1</span> = 参数<span class="number">1</span>;</span><br><span class="line">     <span class="built_in">this</span>.属性名<span class="number">2</span> = 参数<span class="number">2</span>;</span><br><span class="line">     <span class="built_in">this</span>.属性名<span class="number">3</span> = 参数<span class="number">3</span>;</span><br><span class="line">     <span class="built_in">this</span>.方法名 = 函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数的调用格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj = new 构造函数名(实参1，实参2，实参3)</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name,age,works</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name=name;</span><br><span class="line">    <span class="built_in">this</span>.age=age;</span><br><span class="line">    <span class="built_in">this</span>.works=works;</span><br><span class="line">    <span class="built_in">this</span>.result = <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123; <span class="comment">//方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">var</span> wyf = <span class="keyword">new</span> Star(<span class="string">&#x27;吴亦凡&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;选妃&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> lzx = <span class="keyword">new</span> Star(<span class="string">&#x27;罗志祥&#x27;</span>,<span class="number">42</span>,<span class="string">&#x27;时间管理&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> zzh = <span class="keyword">new</span> Star(<span class="string">&#x27;张哲瀚&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;靖国神社&#x27;</span>);</span><br><span class="line">wyf.result(<span class="string">&#x27;坐牢&#x27;</span>);</span><br><span class="line">lzx.result(<span class="string">&#x27;退圈&#x27;</span>);</span><br><span class="line">zzh.result(<span class="string">&#x27;封杀&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(wyf.works);</span><br><span class="line"><span class="built_in">console</span>.log(zzh[<span class="string">&#x27;works&#x27;</span>]);</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li>构造函数约定<strong>首字母大写</strong>。</li><li>函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li><li>构造函数中<strong>不需要 return 返回结果</strong>。</li><li>当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li></ol></li><li><p>其他</p><p>构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）<br>创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</p></li></ul></li><li><p>new关键字的作用</p><ol><li>在构造函数代码开始执行之前，创建一个空对象；</li><li>修改this的指向，把this指向创建出来的空对象；</li><li>执行函数的代码</li><li>在函数完成之后，返回this—即创建出来的对象</li></ol><h3 id="5-3-遍历对象">5.3 遍历对象</h3><p>​for…in 语句用于对数组或者对象的属性进行循环操作。</p><p>​其语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名字) &#123;</span><br><span class="line">    <span class="comment">// 在此执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k);      <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础Ⅱ：数组和函数</title>
      <link href="/2021/08/15/js2/"/>
      <url>/2021/08/15/js2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数组">1-数组</h2><p>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。</p><h3 id="1-1创建数组">1-1创建数组</h3><p>JS 中创建数组有两种方式：</p><h4 id="利用-new-创建数组">利用  new 创建数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="built_in">Array</span>() ；</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();   <span class="comment">// 创建一个新的空数组</span></span><br></pre></td></tr></table></figure><p>注意 Array () ，A 要大写</p><h4 id="利用数组字面量创建数组">利用数组字面量创建数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = []；</span><br><span class="line"><span class="comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = [<span class="string">&#x27;胖虎&#x27;</span>,<span class="string">&#x27;panghutx&#x27;</span>,<span class="string">&#x27;blog.wangyouwu.cn&#x27;</span>];</span><br></pre></td></tr></table></figure><ul><li><p>数组的字面量是方括号 [ ]</p></li><li><p>声明数组并赋值称为数组的初始化</p></li><li><p>数组元素的类型</p><p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="string">&#x27;小白&#x27;</span>,<span class="number">12</span>,<span class="literal">true</span>,<span class="number">28.9</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2获取数组中的元素">1-2获取数组中的元素</h3><p>​索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 获取数组中的第2个元素</span></span><br><span class="line">alert(arrStus[<span class="number">1</span>]);    </span><br></pre></td></tr></table></figure><p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是undefined</p><h3 id="1-3遍历数组">1-3遍历数组</h3><h4 id="数组遍历">数组遍历</h4><p>​把数组中的每个元素从头到尾都访问一次，可以通过 for 循环索引遍历数组中的每一项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arrStus[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组的长度">数组的长度</h4><p>数组的长度：默认情况下表示数组中元素的个数</p><p>使用“数组名.length”可以访问数组元素的数量（数组长度）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">alert(arrStus.length);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><p>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。</p></li><li><p>当数组元素个数发生变化， length 属性跟着一起变化</p></li></ul><h2 id="2-函数">2-函数</h2><p>​函数：<strong>封装一段可被重复调用执行的代码块</strong>。通过此代码块可以<strong>实现大量代码的重复使用</strong>。</p><h3 id="2-1函数的声明调用">2-1函数的声明调用</h3><h4 id="声明函数">声明函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>function 是声明函数的关键字,必须小写</p></li><li><p>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</p></li></ul><h4 id="调用函数-2">调用函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名();  <span class="comment">// 通过调用函数名来执行函数体代码</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>调用的时候千万不要忘记添加小括号</strong></p></li><li><p>口诀：函数不调用，自己不执行</p><p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p></li></ul><p>例子：封装计算1-100累加和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   计算1-100之间值的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sumNum = <span class="number">0</span>;<span class="comment">// 准备一个变量，保存数字和</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sumNum += i;<span class="comment">// 把每个数值 都累加 到变量中</span></span><br><span class="line">  &#125;</span><br><span class="line">  alert(sumNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">getSum();</span><br></pre></td></tr></table></figure><h3 id="2-2函数的参数">2-2函数的参数</h3><h4 id="函数参数语法">函数参数语法</h4><ul><li><p>形参：函数定义时设置接收调用时传入</p></li><li><p>实参：函数调用时传入小括号内的真实数据</p><p>函数参数的运用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span> , 形参<span class="number">3.</span>..</span>) </span>&#123; <span class="comment">// 可以定义任意多的参数，用逗号分隔</span></span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3.</span>..); </span><br></pre></td></tr></table></figure><ol><li>调用的时候实参值是传递给形参的</li><li>形参简单理解为：不用声明的变量</li><li>实参和形参的多个参数之间用逗号（,）分隔</li></ol></li></ul><h4 id="函数形参和实参数量不匹配时">函数形参和实参数量不匹配时</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210815112030.png" alt=""></p><pre><code>注意：在JavaScript中，形参的默认值是undefined。</code></pre><p>小结：</p><ul><li>函数可以带参数也可以不带参数</li><li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li>调用函数的时候，函数名括号里面的是实参</li><li>多个参数中间用逗号分隔</li></ul><h3 id="2-3函数的返回值">2-3函数的返回值</h3><h4 id="return-语句">return 语句</h4><pre><code>返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名（）</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span>  需要返回的值；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名();    <span class="comment">// 此时调用函数就可以得到函数体内return 后面的值</span></span><br></pre></td></tr></table></figure><ul><li>在使用 return 语句时，函数会停止执行，并返回指定的值</li><li>如果函数没有 return ，返回的值是 undefined</li></ul><h4 id="break-continue-return-的区别">break ,continue ,return 的区别</h4><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h3 id="2-4arguments的使用">2-4arguments的使用</h3><p>​**当不确定有多少个参数传递的时候，可以用 arguments 来获取。**JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p><ul><li><p>具有 length 属性</p></li><li><p>按索引方式储存数据</p></li><li><p>不具有数组的 push , pop 等方法</p><p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p></li></ul><h3 id="2-5函数案例">2-5函数案例</h3><pre><code>函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户输入年份，输出当前年份2月份的天数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backDay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> year = prompt(<span class="string">&#x27;请输入年份：&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(isRunYear(year))&#123;</span><br><span class="line">        alert(year+<span class="string">&#x27;是闰年，2月份有29天&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        alert(year+<span class="string">&#x27;是平年，2月份有28天&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">backDay();</span><br><span class="line">     </span><br><span class="line"><span class="comment">// 判断是否是闰年</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRunYear</span>(<span class="params">year</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//如果是闰年返回true，否则else</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>) &#123; <span class="comment">//能被4整除且不能被100整除或者能被400整除</span></span><br><span class="line">        flag=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6函数的两种声明方式">2-6函数的两种声明方式</h3><h4 id="自定义函数方式-命名函数">自定义函数方式(命名函数)</h4><p>利用函数关键字 function 自定义函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 调用  </span></span><br><span class="line">fn();  </span><br></pre></td></tr></table></figure><ul><li>因为有名字，所以也被称为命名函数</li><li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li></ul><h4 id="函数表达式方式-匿名函数）">函数表达式方式(匿名函数）</h4><p>利用函数表达式方式的写法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;；</span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li>因为函数没有名字，所以也被称为匿名函数</li><li>这个fn 里面存储的是一个函数</li><li>函数表达式方式原理跟声明变量方式是一致的</li><li>函数调用的代码必须写到函数体后面</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js练习Ⅰ：循环、数组、函数</title>
      <link href="/2021/08/14/js-exercise/"/>
      <url>/2021/08/14/js-exercise/</url>
      
        <content type="html"><![CDATA[<h3 id="🙂循环">🙂循环</h3><ul><li>一行打印★★★★★</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;=<span class="number">5</span>;i++) &#123;</span><br><span class="line">    str = str + <span class="string">&#x27;★&#x27;</span>; <span class="comment">//追加字符串</span></span><br><span class="line">&#125; </span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><ul><li>倒序打印★ 第一行9个，第九行1个</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210814205845.png" alt="image-20210814104944001"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>; i++) &#123;  <span class="comment">// 控制行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=i;j&lt;<span class="number">10</span>;j++) &#123; <span class="comment">// 控制每一行★个数</span></span><br><span class="line">        str = str + <span class="string">&#x27;★&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str = str + <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 每行结尾换行</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><ul><li>正序打印★ 第一行1个，第九行9个</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210814205852.png" alt="image-20210814105003430"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j =<span class="number">1</span> ;j&lt;=i;j++) &#123;</span><br><span class="line">        str = str + <span class="string">&#x27;★&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        str = str + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><ul><li>打印九九乘法表</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210814205858.png" alt="image-20210814104842263"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span> ; i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;=i;j++) &#123;</span><br><span class="line">        str = str + j + <span class="string">&#x27;x&#x27;</span> +i + <span class="string">&#x27;=&#x27;</span> + j*i + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str = str + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><ul><li>接收用户输入的用户名和密码，若用户名为 “admin” ,且密码为 “123456” ,则提示用户登录成功! 否则，让用户一直输入。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name = prompt(<span class="string">&#x27;请输入用户名&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> password = prompt(<span class="string">&#x27;请输入密码&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">while</span> (name != <span class="string">&#x27;admin&#x27;</span> || password != <span class="string">&#x27;123456&#x27;</span>); <span class="comment">//两个有一个不满足就要进入循环，切忌写成&amp;&amp;</span></span><br><span class="line">alert(<span class="string">&#x27;登陆成功&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>求整数1～100的累加值，但要求跳过所有个位为3的数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = sum + i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var sum = 0;</span><br><span class="line">for (var i=1;i&lt;=100;i++) &#123;</span><br><span class="line">        if(i%10!=3) &#123;</span><br><span class="line">            sum = sum + i;</span><br><span class="line">        &#125;     </span><br><span class="line">&#125;</span><br><span class="line">console.log(sum);</span><br></pre></td></tr></table></figure><ul><li>ATM机</li></ul><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210814210104.png" alt="image-20210814210102914" style="zoom:50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum =<span class="number">100</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">var</span> choice = prompt(<span class="string">&#x27;请输入你要的操作：\n1.存钱 \n2.取钱\n3.显示余额\n4.退出\n &#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(choice==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = prompt(<span class="string">&#x27;请输入存入金额：&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="built_in">parseInt</span>(sum) + <span class="built_in">parseInt</span>(num1);</span><br><span class="line">    alert(<span class="string">&#x27;你的余额是&#x27;</span>+ sum +<span class="string">&#x27;元&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num2 = prompt(<span class="string">&#x27;请输入取出金额：&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="built_in">parseInt</span>(sum) - <span class="built_in">parseInt</span>(num2);</span><br><span class="line">    alert(<span class="string">&#x27;你的余额是&#x27;</span>+ sum +<span class="string">&#x27;元&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="number">3</span>)&#123;</span><br><span class="line">    alert(<span class="string">&#x27;你的余额是&#x27;</span>+ sum +<span class="string">&#x27;元&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(choice!=<span class="number">4</span>)</span><br><span class="line">alert(<span class="string">&#x27;退出成功&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>求从1开始第35个能被7和3整除的整数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>; count&lt;<span class="number">35</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">7</span>==<span class="number">0</span>)&#123; </span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🙂数组">🙂数组</h3><ul><li>求出数组总和和平均数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> average = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>; i &lt; arr.length ; i++)&#123;</span><br><span class="line">            sum =sum +arr[i] <span class="comment">// 求和是加数组元素arr[i]，不是数组下标i</span></span><br><span class="line">        &#125;</span><br><span class="line">        average = sum/arr.length;</span><br><span class="line">        <span class="built_in">console</span>.log(sum,average); <span class="comment">// 输出多个变量，用，逗号隔开即可</span></span><br></pre></td></tr></table></figure><ul><li>求数组[2,6,1,77,52,25,7]中的最大值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">52</span>,<span class="number">25</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> max =arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(max&lt;arr[i])&#123;</span><br><span class="line">        max=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br></pre></td></tr></table></figure><ul><li>将数组[‘red’,‘green’,‘blue’,‘pink’]转换为字符串，并使用|分割</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">    str = str + arr[i] + <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><ul><li>新建一个数组，里面存放10个整数（1-10）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ar arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// arr = 1  x  不要直接给数组名赋值</span></span><br><span class="line">    arr[i]=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><ul><li>将数组[2,0,6,1,77,0,52,0,25,7]中大于等于10的元素选出来，放入新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">0</span>,<span class="number">52</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arr1=[];</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">        arr1[a]=arr[i]</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">0</span>,<span class="number">52</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arr1=[]; <span class="comment">//arr1.length就是0</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">        arr1[arr1.length]=arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><ul><li>将数组[2,0,6,1,77,0,52,0,25,7]中的0去掉，形成一个新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">0</span>,<span class="number">52</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]!=<span class="number">0</span> )&#123;</span><br><span class="line">        arr1[arr1.length]=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将数组[1,2,3,4,5,6]内容反过来存放</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> num = arr.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">        num--;</span><br><span class="line">        arr1[arr1.length]=arr[num];</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><p>★★★冒泡排序★★★</p><ul><li>将数组[2,1,3,5,4]元素由大到小排列</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt;= arr.length-<span class="number">1</span>;i++)&#123; <span class="comment">// 趟数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;=arr.length-<span class="number">1</span>-i;j++) &#123; <span class="comment">//每趟的次数w</span></span><br><span class="line">        <span class="keyword">if</span>(arr[j]&lt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">var</span> temp =<span class="number">0</span>;</span><br><span class="line">            temp = arr[j];</span><br><span class="line">            arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h3 id="🙂函数">🙂函数</h3><ul><li>利用函数求两个数的最大值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Getmax</span> (<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = num1;</span><br><span class="line">    <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">        max = num1;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        max = num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Getmax(<span class="number">6</span>,<span class="number">9</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Getmax</span> (<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1&gt;num2 ? num1 : num2; <span class="comment">//三元运算符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Getmax(<span class="number">6</span>,<span class="number">9</span>));</span><br></pre></td></tr></table></figure><ul><li>利用函数求数组中的最大值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Getmax</span> (<span class="params">arr</span>) </span>&#123; <span class="comment">//接收一个数组</span></span><br><span class="line">    <span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(max&lt;arr[i])&#123;</span><br><span class="line">            max=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> re = Getmax([<span class="number">5</span>,<span class="number">2</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">67</span>,<span class="number">77</span>]); <span class="comment">//实参是一个数组传过去</span></span><br><span class="line"><span class="built_in">console</span>.log(re);</span><br></pre></td></tr></table></figure><ul><li>利用函数求<strong>任意个数</strong>中的最大值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(max&lt;<span class="built_in">arguments</span>[i])&#123;</span><br><span class="line">            max=<span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> re=getMax(<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">76</span>,<span class="number">34</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re);</span><br></pre></td></tr></table></figure><ul><li>利用函数,翻转任意一个数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        newArr[newArr.length]=arr[arr.length-<span class="number">1</span>-i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = reverse([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><ul><li>利用函数,对数组从小到大排序—冒泡排序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1=sort([<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure><ul><li>用户输入年份，输出当前年份2月份的天数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backDay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> year = prompt(<span class="string">&#x27;请输入年份：&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(isRunYear(year))&#123;</span><br><span class="line">        alert(year+<span class="string">&#x27;是闰年，2月份有29天&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        alert(year+<span class="string">&#x27;是平年，2月份有28天&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">backDay();</span><br><span class="line">     </span><br><span class="line"><span class="comment">// 判断是否是闰年</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRunYear</span>(<span class="params">year</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//如果是闰年返回true，否则else</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>) &#123; <span class="comment">//能被4整除且不能被100整除或者能被400整除</span></span><br><span class="line">        flag=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础Ⅰ：变量和数据类型</title>
      <link href="/2021/08/12/js1/"/>
      <url>/2021/08/12/js1/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript输入输出语句">JavaScript输入输出语句</h2><p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下：</p><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><ul><li>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</li></ul><h2 id="变量-2">变量</h2><h3 id="什么是变量">什么是变量</h3><p>白话：变量就是一个装东西的盒子。</p><p>通俗：变量是用于存放数据的容器。 我们通过 变量名 获取数据，甚至数据可以修改。<br><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210813082344.png" alt=""></p><h3 id="变量的使用">变量的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age; <span class="comment">//  声明一个 名称为age 的变量 </span></span><br><span class="line">age = <span class="number">10</span>; <span class="comment">// 给 age  这个变量赋值为 10  </span></span><br><span class="line"><span class="keyword">var</span> age  = <span class="number">18</span>;  <span class="comment">// 声明变量同时赋值为 18</span></span><br><span class="line"><span class="comment">// 声明一个变量并赋值， 我们称之为变量的初始化。</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>,  name = <span class="string">&#x27;zs&#x27;</span>, sex = <span class="number">2</span>; <span class="comment">//同时声明多个变量</span></span><br></pre></td></tr></table></figure><ul><li>声明变量特殊情况</li></ul><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var  age ; console.log (age);</td><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值  直接使用</td><td>报错</td></tr><tr><td>age   = 10; console.log (age);</td><td>不声明   只赋值</td><td>10</td></tr></tbody></table><h2 id="数据类型-2">数据类型</h2><h3 id="数据类型简介">数据类型简介</h3><ul><li><p>变量的数据类型</p><pre><code>  变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;        <span class="comment">// 这是一个数字型</span></span><br><span class="line"><span class="keyword">var</span> areYouOk = <span class="string">&#x27;是的&#x27;</span>;   <span class="comment">// 这是一个字符串     </span></span><br></pre></td></tr></table></figure><p>​在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">6</span>;           <span class="comment">// x 为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Bill&quot;</span>;      <span class="comment">// x 为字符串    </span></span><br></pre></td></tr></table></figure></li><li><p>数据类型的分类</p><p>JS 把数据类型分为两类：</p><ul><li><p>简单数据类型 （Number,String,Boolean,Undefined,Null）</p></li><li><p>复杂数据类型 （object)</p></li></ul></li></ul><h3 id="简单数据类型">简单数据类型</h3><p>简单数据类型（基本数据类型）</p><p>JavaScript 中的简单数据类型及其说明如下：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210813082852.png" alt=""></p><h4 id="数字型-Number">数字型 Number</h4><p>​JavaScript 数字类型既可以保存整数，也可以保存小数(浮点数）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">21</span>;       <span class="comment">// 整数</span></span><br><span class="line"><span class="keyword">var</span> Age = <span class="number">21.3747</span>;  <span class="comment">// 小数     </span></span><br></pre></td></tr></table></figure><ol><li><p>数字型进制</p><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.八进制数字序列范围：0~7</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">07</span>;   <span class="comment">// 对应十进制的7</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">019</span>;  <span class="comment">// 对应十进制的19</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">08</span>;   <span class="comment">// 对应十进制的8</span></span><br><span class="line"> <span class="comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xA</span>;   </span><br></pre></td></tr></table></figure><p>现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x</p></li><li><p>数字型范围</p><p>JavaScript中数值的最大和最小值</p><ul><li><p>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</p></li><li><p>最小值：Number.MIN_VALUE，这个值为：5e-32</p></li></ul></li><li><p>数字型三个特殊值</p><ul><li><p>Infinity ，代表无穷大，大于任何数值</p></li><li><p>-Infinity ，代表无穷小，小于任何数值</p></li><li><p>NaN ，Not a number，代表一个非数值</p></li></ul></li><li><p>isNaN</p><p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p></li></ol><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210813082934.png" alt=""></p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> usrAge = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> isOk = <span class="built_in">isNaN</span>(userAge);</span><br><span class="line">  <span class="built_in">console</span>.log(isNum);          <span class="comment">// false ，21 不是一个非数字</span></span><br><span class="line"><span class="keyword">var</span> usrName = <span class="string">&quot;andy&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(userName));<span class="comment">// true ，&quot;andy&quot;是一个非数字</span></span><br></pre></td></tr></table></figure><h4 id="字符串型-String">字符串型 String</h4><p>​字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">&quot;胖虎同学panghutx&quot;</span>;  <span class="comment">// 使用双引号表示字符串</span></span><br><span class="line"><span class="keyword">var</span> strMsg2 = <span class="string">&#x27;胖虎同学panghutx&#x27;</span>;    <span class="comment">// 使用单引号表示字符串</span></span><br><span class="line"><span class="comment">// 常见错误</span></span><br><span class="line"><span class="keyword">var</span> strMsg3 = 胖虎同学;       <span class="comment">// 报错，没使用引号，会被认为是js代码，但js没有这些语法</span></span><br></pre></td></tr></table></figure><ul><li>字符串转义符</li></ul><p>​类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p><p>​转义符都是 \ 开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n   是   newline   的意思</td></tr><tr><td>\ \</td><td>斜杠   \</td></tr><tr><td>\’</td><td>’   单引号</td></tr><tr><td>\&quot;</td><td>”双引号</td></tr><tr><td>\t</td><td>tab  缩进</td></tr><tr><td>\b</td><td>空格 ，b   是   blank  的意思</td></tr></tbody></table><ol start="3"><li><p>字符串长度</p><pre><code> 字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">&quot;我是胖虎同学！&quot;</span>;</span><br><span class="line">alert(strMsg.length); <span class="comment">// 显示 7</span></span><br></pre></td></tr></table></figure></li><li><p>字符串拼接</p><ul><li><p>多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串</p></li><li><p>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.1 字符串 &quot;相加&quot;</span></span><br><span class="line">alert(<span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;world&#x27;</span>); <span class="comment">// hello world</span></span><br><span class="line"><span class="comment">//1.2 数值字符串 &quot;相加&quot;</span></span><br><span class="line">alert(<span class="string">&#x27;100&#x27;</span> + <span class="string">&#x27;100&#x27;</span>); <span class="comment">// 100100</span></span><br><span class="line"><span class="comment">//1.3 数值字符串 + 数值</span></span><br><span class="line">alert(<span class="string">&#x27;11&#x27;</span> + <span class="number">12</span>);     <span class="comment">// 1112 </span></span><br></pre></td></tr></table></figure><ul><li><em><strong>+ 号总结口诀：数值相加 ，字符相连</strong></em></li></ul></li></ul></li><li><p>字符串拼接加强</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;胖虎同学&#x27;</span> + <span class="number">20</span>);        <span class="comment">// 只要有字符就会相连 </span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;胖虎同学age岁&#x27;</span>);      <span class="comment">// 这样不行哦</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;胖虎同学&#x27;</span> + age);         <span class="comment">// 胖虎同学20</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;胖虎同学&#x27;</span> + age + <span class="string">&#x27;岁啦&#x27;</span>); <span class="comment">// 胖虎同学20岁啦</span></span><br></pre></td></tr></table></figure><ul><li>经常会将字符串和变量来拼接，变量可以很方便地修改里面的值</li><li>变量是不能添加引号的，因为加引号的变量会变成字符串</li><li>如果变量两侧都有字符串拼接，口诀“<strong>引引加加</strong> ”，删掉数字，变量写加中间</li></ul></li></ol><h4 id="布尔型Boolean">布尔型Boolean</h4><p>​布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p><p>​布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="number">1</span>);  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> + <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="Undefined和-Null">Undefined和 Null</h4><p>​一个声明后没有被赋值的变量会有一个默认值undefined ( 如果进行相连或者相加时，注意结果）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable;</span><br><span class="line"><span class="built_in">console</span>.log(variable);           <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;你好&#x27;</span> + variable);  <span class="comment">// 你好undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + variable);     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + variable);   <span class="comment">//  NaN</span></span><br></pre></td></tr></table></figure><p>​一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vari = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;你好&#x27;</span> + vari);  <span class="comment">// 你好null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + vari);     <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + vari);   <span class="comment">//  1</span></span><br></pre></td></tr></table></figure><h3 id="获取变量数据类型">获取变量数据类型</h3><ul><li><p>获取检测变量的数据类型</p><p>​typeof 可用来获取检测变量的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num) <span class="comment">// 结果 number      </span></span><br></pre></td></tr></table></figure><p>​不同类型的返回值</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210813083544.png" alt=""></p></li></ul><h3 id="数据类型转换">数据类型转换</h3><p>​什么是数据类型转换？</p><p>​使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另一种数据类型，通常会实现3种方式的转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">转换为字符串类型</span><br><span class="line">转换为数字型</span><br><span class="line">转换为布尔型</span><br></pre></td></tr></table></figure><h5 id="转换为字符串">转换为字符串</h5><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210813083649.png" alt=""></p><h5 id="转换为数字型">转换为数字型</h5><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210813083720.png" alt=""></p><h5 id="转换为布尔型">转换为布尔型</h5><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210813083747.png" alt=""></p><ul><li><p>代表空、否定的值会被转换为 false  ，如 ‘’、0、NaN、null、undefined</p></li><li><p>其余值都会被转换为 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;小白&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言：函数</title>
      <link href="/2021/08/10/c-function/"/>
      <url>/2021/08/10/c-function/</url>
      
        <content type="html"><![CDATA[<p>函数是一块代码，接收零个或多个参数，做一件事情，并返回零个或一个值。</p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210810081635.png" alt="image-20210810081508880" style="zoom: 67%;" /><h3 id="调用函数">调用函数</h3><p>函数名()</p><p>()起到了表示函数调用的作用，即使没有参数也需要()；如果有参数，则需要给出正确的数量和顺序，这些值会被按照顺序依次用来初始化函数中的参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> begain, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=begain; i &lt;= end; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d到%d的和是%d&quot;</span>, begain, end, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从函数中返回值">从函数中返回值</h3><p>return停止函数的执行，并返回一个值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">ret = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ret = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最大值是%d&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">max(<span class="number">11</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数原型">函数原型</h3><p>函数头，以分号’;'结尾，构成了函数原型</p><p>函数原型目的是告诉编译器函数长什么样（名称、参数、返回类型）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;  <span class="comment">//声明【函数原型】</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">max(<span class="number">11</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span>  <span class="comment">//定义 【实际的函数头】</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">ret = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ret = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;最大值是%d&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传值">传值</h3><p>传值：每个函数有自己的变量空间，参数也位于这个独立的空间中，和其他函数没有关系。</p><p><strong>c语言在调用函数时，永远只能传值给函数</strong></p><h3 id="本地变量">本地变量</h3><p>参数的每次运行，就产生了一个独立的变量空间，在这个空间中的变量，是函数的这次运行所独有的，称作本地变量。</p><p>定义在函数内部的变量就是本地变量，参数也是本地变量</p><h4 id="变量的生存期与作用域">变量的生存期与作用域</h4><p>生存期：什么时候这个变量开始出现了，到什么时候它消亡了</p><p>作用域：在（代码的）什么范围内可以访问这个变量（这个变量可以起作用）</p><p>对于本地变量，这两个问题的答案是统一的：大括号内——块</p><h4 id="本地变量的规则">本地变量的规则</h4><p>本地变量是定义在块内的，它可以定义在函数的块内，也可以定义在语句的块内。</p><p>程序进入块之前，其中的变量不存在，离开块，其中的变量消失。</p><p>块外面定义的变量在里面仍然有效，块内的同名变量会掩盖外面的变量</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言：数据类型</title>
      <link href="/2021/08/09/c-date-type/"/>
      <url>/2021/08/09/c-date-type/</url>
      
        <content type="html"><![CDATA[<h3 id="整数">整数</h3><ul><li><p>char：1字节（8比特） -128~127</p></li><li><p>short：2字节 -32768~32767</p></li><li><p>int：取决于编译器（CPU），通常意义是“1个字”</p></li><li><p>long：取决于编译器（CPU），通常意义是“1个字”</p></li><li><p>long long：8字节</p></li></ul><p>整数的内部表达都是二进制</p><h4 id="补码">补码</h4><p>补码的意义就是拿补码和原码可以加出一个溢出的“零”</p><p>0-1=-1<br>(1)00000000 - 00000001 --&gt; 11111111<br>11111111被看作纯二进制看待时，是255，被当作补码看待时是-1<br>同理，-a的补码是0-a，实际上是    (n是这种类型的位数)</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">2^n-a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7977em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></span></p><h4 id="8进制和16进制：">8进制和16进制：</h4><ul><li>一个以0开始的数字字面量是8进制</li><li>一个以x开始的数字字面量是16进制</li><li>%0用于8进制，%x用于16进制</li><li>8进制和16进制只是如何把数字表达为字符串，与内部如何表达数字无关</li></ul><h3 id="浮点数">浮点数</h3><table><thead><tr><th>类型</th><th>字长</th><th>有效数字</th><th>scanf</th><th>printf</th></tr></thead><tbody><tr><td>float</td><td>32</td><td>7</td><td>%f</td><td>%f，%e</td></tr><tr><td>double</td><td>64</td><td>15</td><td>%lf</td><td>%f，%e</td></tr></tbody></table><ul><li>输出精度：在%和f之间加上.n可以指定输出小数点后几位，输出是4舍5入的</li></ul><p>printf(“%.3f\n”,-0.0056); —&gt; 输出结果为-0.006</p><ul><li><p>float需要用f或F后缀来表明身份，带小数点的字面量默认是double</p></li><li><p>自动类型转换：当运算符两边出现不一致的类型时，会自动转换成较大（数的范围打）的类型</p></li></ul><p>char–&gt;short–&gt;int–&gt;long–&gt;long long</p><p>int–&gt;float–&gt;double</p><ul><li>强制类型转换：(类型)值  如(int)6.66表示把float转换成int</li></ul><h3 id="逻辑运算">逻辑运算</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>！</td><td>逻辑非</td><td>!a</td><td>a=1,!a=0</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td><td>a&amp;&amp;b</td><td>如果a和b都是true，结果才是true；否则就是false</td></tr><tr><td>||</td><td>逻辑或</td><td>a||b</td><td>如果a和b有一个是true，结果就是true。</td></tr></tbody></table><h4 id="运算符优先级-2">运算符优先级</h4><table><thead><tr><th>优先级</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>()</td><td>从左到右</td></tr><tr><td>2</td><td>! + - ++ –</td><td>从右到左（单目的+和-）</td></tr><tr><td>3</td><td>*/%</td><td>从左到右</td></tr><tr><td>4</td><td>±</td><td>从左到右</td></tr><tr><td>5</td><td>&lt; &lt;= &gt; &gt;=</td><td>从左到右</td></tr><tr><td>6</td><td>== !=</td><td>从左到右</td></tr><tr><td>7</td><td>&amp;&amp;</td><td>从左到右</td></tr><tr><td>8</td><td>||</td><td>从左到右</td></tr><tr><td>9</td><td>= += -+ *= /= %=</td><td>从右到左</td></tr></tbody></table><ul><li>对于&amp;&amp;，左边是false时就不做右边了；对于||，左边是true时就不做右边了。</li></ul><h4 id="逗号表达式">逗号表达式</h4><p>优先级别最低，它将两式联接起来，如：（3+5,6+8）称为逗号表达式，其求解过程先表达式1，后表达式2，整个表达式值是表达式2的值，如：（3+5，6+8）的值是14，（a=20/4,a*4）的值是20，原因在于赋值运算优先级高于逗号表达式。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动web开发——rem布局</title>
      <link href="/2021/08/05/rem/"/>
      <url>/2021/08/05/rem/</url>
      
        <content type="html"><![CDATA[<h2 id="rem基础">rem基础</h2><p>rem (root em)是一个相对单位，类似于em，em是父元素字体大小。</p><p>不同的是rem的基准是相对于html元素的字体大小。</p><p>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 根html 为 12px */</span><br><span class="line">html &#123;</span><br><span class="line">   font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">/* 此时 div 的字体大小就是 24px */       </span><br><span class="line">div &#123;</span><br><span class="line">    font-size: 2rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。</p><h2 id="媒体查询">媒体查询</h2><h3 id="什么是媒体查询">什么是媒体查询</h3><p>媒体查询（Media Query）是CSS3新语法。</p><ul><li>使用 @media查询，可以针对不同的媒体类型定义不同的样式</li><li>@media 可以针对不同的屏幕尺寸设置不同的样式</li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li><li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li></ul><h3 id="媒体查询语法规范">媒体查询语法规范</h3><ul><li>用 @media开头 注意@符号</li><li>mediatype  媒体类型</li><li>关键字 and  not  only</li><li>media feature 媒体特性必须有小括号包含</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media mediatype and|not|only (media feature) &#123;</span><br><span class="line">    CSS-Code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mediatype-查询类型">mediatype 查询类型</h4><p>​       将不同的终端设备划分成不同的类型，称为媒体类型</p><img src="https://gitee.com/panghutx/tuchuang/raw/master/rem1.jpg"><h4 id="关键字-2">关键字</h4><p>​       关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。</p><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li><li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li><li>only：指定某个特定的媒体类型，可以省略。</li></ul><h4 id="媒体特性">媒体特性</h4><p>每种媒体类型都具有各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。</p><p>注意他们要加小括号包含</p>   <img src="https://gitee.com/panghutx/tuchuang/raw/master/rem2.jpg"><h4 id="媒体查询书写规则">媒体查询书写规则</h4><p>注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁</p>   <img src="https://gitee.com/panghutx/tuchuang/raw/master/rem3.png"><h2 id="less-基础">less 基础</h2><h3 id="维护css弊端">维护css弊端</h3><p>CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。</p><ul><li>CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的。</li><li>不方便维护及扩展，不利于复用。</li><li>CSS 没有很好的计算能力</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目。</li></ul><h3 id="less-介绍">less 介绍</h3><p>Less（LeanerStyle Sheets 的缩写）是一门 CSS扩展语言，也成为CSS预处理器。<br>它在CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS的维护成本，就像它的名称所说的那样，Less可以让我们用更少的代码做更多的事情。</p><p>Less中文网址：<a href="http://lesscss.cn/">http://</a><a href="http://lesscss.cn/">less</a><a href="http://lesscss.cn/">css.cn/</a></p><p>常见的CSS预处理器：Sass、Less、Stylus</p><h3 id="less安装">less安装</h3><p>①安装nodejs，可选择版本(8.0)，网址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><p>②检查是否安装成功，使用cmd命令（win10是window+r 打开运行输入cmd）  —输入“node –v”查看版本即可</p><p>③基于nodejs在线安装Less，使用cmd命令“npm install -g less”即可</p><p>④检查是否安装成功，使用cmd命令“ lessc -v ”查看版本即可</p><h3 id="less使用">less使用</h3><h4 id="less变量">less变量</h4><p>变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@变量名:值;</span><br></pre></td></tr></table></figure><ul><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@color: pink;</span><br></pre></td></tr></table></figure><h4 id="less嵌套">less嵌套</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 将css改为less</span><br><span class="line">#header .logo &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#header &#123;</span><br><span class="line">    .logo &#123;</span><br><span class="line">       width: 300px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果遇见 （交集|伪类|伪元素选择器） ，利用&amp;进行连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a:hover&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">a&#123;</span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">      color:red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="less运算">less运算</h4><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*Less 里面写*/</span><br><span class="line">@witdh: 10px + 5;</span><br><span class="line">div &#123;</span><br><span class="line">    border: @witdh solid red;</span><br><span class="line">&#125;</span><br><span class="line">/*生成的css*/</span><br><span class="line">div &#123;</span><br><span class="line">  border: 15px solid red;</span><br><span class="line">&#125;</span><br><span class="line">/*Less 甚至还可以这样 */</span><br><span class="line">width: (@width + 5) * 2;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>乘号（*）和除号（/）的写法</li><li>运算符中间左右有个空格隔开 1px + 5</li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位</li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动web开发——flex布局</title>
      <link href="/2021/07/26/flex/"/>
      <url>/2021/07/26/flex/</url>
      
        <content type="html"><![CDATA[<ul><li>flex 是 flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li><li>给父盒子添加flex属性，来控制子盒子的位置和排列方式</li></ul><h2 id="父项常见属性">父项常见属性</h2><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行</li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h3 id="flex-direction">flex-direction</h3><p>设置主轴方向，在flex布局中分为主轴和侧轴（x、y轴），默认主轴是x轴，水平向右。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row; <span class="comment">/*主轴为x轴，从左到右*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>: row-reverse; <span class="comment">/*，主轴为x轴，从右到左*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>: column; <span class="comment">/*主轴为y轴，从上到下*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>: column-reverse; <span class="comment">/*，主轴为y轴，从下到上*/</span></span><br></pre></td></tr></table></figure><h3 id="justify-content">justify-content</h3><p>设置<strong>主轴</strong>上子元素的排列方式，使用该属性前要先定好主轴。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start;<span class="comment">/*从前开始*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-end;<span class="comment">/*从后开始*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: center;<span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-around;<span class="comment">/*平分剩余空间*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between;<span class="comment">/*★两边贴边后再平分剩余空间*/</span></span><br></pre></td></tr></table></figure><h3 id="flex-wrap">flex-wrap</h3><p>flex中项目默认都排列在一行，通过flex-wrap属性可换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap;<span class="comment">/*默认值，不换行*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;<span class="comment">/*换行*/</span></span><br></pre></td></tr></table></figure><h3 id="align-items">align-items</h3><p>设置<strong>侧轴</strong>上子元素的排列方式，在子项为<strong>单行</strong>时使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: flex-start;(<span class="attribute">flex</span>-end/center/streth)</span><br><span class="line"><span class="comment">/*flex-start 从头部开始</span></span><br><span class="line"><span class="comment">flex-end 从尾部开始</span></span><br><span class="line"><span class="comment">center 居中显示</span></span><br><span class="line"><span class="comment">stretch 拉伸*/</span></span><br></pre></td></tr></table></figure><h3 id="align-content">align-content</h3><p>设置<strong>侧轴</strong>上子元素的排列方式，在子项为<strong>多行</strong>时使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: flex-start;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/panghutx/tuchuang/raw/master/align-content.jpg"><ul><li>align-items  适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。</li><li>总结:单行用align-items，多行用 align-content</li></ul><h3 id="flex-flow">flex-flow</h3><p>flex-direction和flex-wrap的符合属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: row wrap;<span class="comment">/*主轴为x轴，换行*/</span></span><br></pre></td></tr></table></figure><h2 id="子项常见属性">子项常见属性</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="flex">flex</h3><p>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: &lt;number&gt;; <span class="comment">/* 默认值 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="align-self">align-self</h3><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</p><p>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">      <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="order">order</h3><p>order属性定义项目的排列顺序，数值越小，排列越靠前，默认为0。和 z-index 不同。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动web开发</title>
      <link href="/2021/07/25/viewport/"/>
      <url>/2021/07/25/viewport/</url>
      
        <content type="html"><![CDATA[<h2 id="meta标签">meta标签</h2><p>为使网站在移动端有理想的阅读宽度，需添加<code>meta</code>标签。</p><p>meta标签的目的：使布局视口的宽度与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, user-scalable=no,maximum-scale=1.0,minimum-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>width - viewport的宽度，width=device-width页面适应设备宽度</li><li>initial-scale - 初始的缩放比</li><li>minimum-scale - 允许用户缩放到的最小比例</li><li>maximum-scale - 允许用户缩放到的最大比例</li><li>user-scalable - 用户是否可以手动缩放，yes or no（1或0）</li></ul><h2 id="二倍图">二倍图</h2><h3 id="物理像素-物理像素比">物理像素&amp;物理像素比</h3><p><strong>CSS 像素</strong>：又称为虚拟像素、设备独立像素或逻辑像素，也可以理解为直觉像素。CSS 像素是 Web 编程的概念，指的是 CSS 样式代码中使用的逻辑像素。 iPhone 6 的 CSS 像素数为 375 x 667px。</p><p><strong>物理像素</strong>：指屏幕显示的最小颗粒从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了。 iPhone 6 的物理像素为 750 x 1334</p><p><strong>物理像素比</strong>：物理像素 / CSS 像素，这里的 CSS 像素其实是理想视口。iPhone 6 物理像素为 750 x 1334，理想视口 375 x 667 ，DPR = 2</p><p>对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，会造成图片模糊。在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题。</p><h3 id="背景缩放background-size">背景缩放background-size</h3><p>background-size 属性规定背景图像的尺寸</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: 背景图片宽度 背景图片高度;</span><br></pre></td></tr></table></figure><p>单位可以是 长度、百分比、cover、contain;</p><h2 id="移动端开发">移动端开发</h2><h3 id="常见布局">常见布局</h3><p>移动端单独制作</p><ul><li>流式布局（百分比布局）</li><li>flex 弹性布局</li><li>less+rem+媒体查询布局</li><li>混合布局</li></ul><p>响应式</p><ul><li>媒体查询</li><li>bootstarp</li></ul><h3 id="css3盒子模型">css3盒子模型</h3><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding</p><p>CSS3盒子模型：盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding</p><p><strong>CSS3中的盒子模型， padding 和 border 不会撑大盒子</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="comment">/*传统盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: content-box;</span><br></pre></td></tr></table></figure><h3 id="特殊样式">特殊样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"> <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"> -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"> <span class="comment">/*清除高亮,设置为transparent 完成透明*/</span></span><br><span class="line"> -webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line"> <span class="comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span></span><br><span class="line"> -webkit-appearance: none;</span><br><span class="line"> <span class="comment">/*禁用长按页面时的弹出菜单*/</span></span><br><span class="line"> <span class="selector-tag">img</span>,<span class="selector-tag">a</span> &#123; -webkit-touch-callout: none; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假，目的论，自卑情结</title>
      <link href="/2021/07/21/summer/"/>
      <url>/2021/07/21/summer/</url>
      
        <content type="html"><![CDATA[<p>7月7日回到家，8.26号返校，不知不觉已经在家呆14天了，还有一个月就大二了……</p><p>正如李宗盛《给自己的歌》中写道：“等你发现时间是贼了，它早已偷光你的选择”。想到第一次去学校的场景，现在还历历在目，一年的时间已经溜走，大学已完成了1/4，大学中能做的选择也已被偷走了1/4。</p><p>沉湎于过去毫无意义，过去已经不属于我了，我拥有的只有现在。我的人生就取决于当下。</p><p>《被讨厌的勇气》里有这样一段：</p><blockquote><p>我有一位年轻朋友，虽然梦想着成为小说家，但却总是写不出作品。他说是因为工作太忙、写小说的时间非常有限，所以才写不出来作品，也从未参加过任何比赛。但真是如此吗？实际上，他是想通过不去比赛这一方式来保留一种“如果做的话我也可以”的可能性，即不愿出去被人评价，更不愿去面对因作品拙劣而落选的现实。他只想活在“只要有时间我也可以、只要环境具备我也能写、自己有这种才能”之类的可能性中。或许再过5年或者10年，他又会开始使用“已经不再年轻”或者“也已经有了家庭”之类的借口。</p></blockquote><p>阿德勒心理学不同于弗洛伊德的“原因论”，ta主张的是“目的论”。一件事的结果不是由原因决定的，而是由目的决定的。上面的案例，那位梦想成为小说家的年轻人不能写出作品、没有参加过比赛并不是由时间太忙导致的，而是由他的目的决定的。他最直接的目的就是不想写小说、不想参加比赛。</p><p>我们做一件事也要以目的为导向，不能成为“原因论”的信徒。如果那位年轻人一直以“没有时间”为原因，他就永远写不出小说。如果一位有着心理创伤、恐惧出门的朋友一直以“受到过心理创伤”为原因就永远不能走出家门。</p><p>这就告诉我们过去怎样并不重要，决定我们人生的只有现在。所以做好手头的事、过好当下的每一天就够了。很流行的那句话“不念过去，不畏将来”不也是说的这个道理吗？</p><p>书中还有一部分提到了自卑感和自卑情结，这对我很有启发。</p><p>阿德勒认为，自卑感不是一件坏事。人是作为一种无力的存在活在这个世界上。并且，人希望摆脱这种无力状态，继而就有了普遍欲求。阿德勒称其为“追求优越性”。</p><blockquote><p>人都处于追求优越性这一“希望进步的状态”之中，树立某些理想或目标并努力为之奋斗。同时，对于无法达成理想的自己就会产生一种自卑感。例如，越是有远大志向的厨师也许就越会产生“还很不熟练”或者“必须做出更好的料理”之类的自卑感。</p></blockquote><p>所以说我们要正视自卑，利用自卑感，使之成为努力和成长的催化剂。</p><p>你也许会说，自卑感越强，人就会变得越消极，最终肯定会认为自己一无是处。这不是自卑感，而是自卑情结。</p><blockquote><p>这一点请注意。目前“自卑情结”这个词似乎在使用的时候与自卑感是一样的意思。就像“我为自己的单眼皮感到自卑”或者“他对自己的学历有自卑感”之类的描述中全都用“自卑情结”这个词来表示自卑感。其实，这完全是一种误用。自卑情结一词原本表示的是一种复杂而反常的心理状态，跟自卑感没有关系。例如，即使弗洛伊德提出的“俄狄浦斯情结”原本也是指一种对同性父母亲的反常对抗心理。</p></blockquote><p>我理解的是自卑感不是坏事，而有了自卑情结是坏事。自卑情结是把自己的自卑当作一种借口。“因为我没有时间所以我写不出文章”“因为我小时候受过心理创伤所以不敢走出家门”，这都是在以自卑为借口，这是一种自卑情结。</p><p>虽然写不出作品和没有时间有一定关系，不出门与心理创伤有关，但这都不是必然联系。阿德勒用“外部因果律”来说明，就是说将原本没有任何因果关系的事情解释成似乎有重大因果关系一样。就像哲学中的主次矛盾，你一直以没有时间，以心理创伤为由，但这只是次要矛盾，甚至连矛盾都不算。如果抱着“因为我没有时间所以我写不出文章”之类的想法，那就不是“没时间写文章”而是“不想写文章”了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我与姥姥</title>
      <link href="/2021/06/17/grandma/"/>
      <url>/2021/06/17/grandma/</url>
      
        <content type="html"><![CDATA[<p>姥姥很节俭，很疼我。</p><p>姥姥和我是一庄的，姥爷走后，妈妈让我去姥姥家睡觉。姥姥睡东屋，我睡西屋。从五年级开始，我就在姥姥家住。</p><p>六年级后，我就要骑车去镇里上学了，骑车到镇上要三四十分钟时间，印象中五点四十五就要起床。姥姥不放心，也要早早地起床，怕我上学迟到、怕我忘带什么东西。我骑上车出发，姥姥一个人站在门口，望着我消失在视线中。</p><p>姥姥虽不识字，但很精明，从没被骗过。我想不被骗的原因，除了精明，还有就是节俭。不舍得为自己花一分钱，什么都不舍得买，什么都不舍得吃，冰箱里的食物放到发霉了也不舍得扔。这么精明节俭的一个人，竟然被骗了。唯一的一次被骗，是因为我。一天放学回家，姥姥说花200元给我买了本书，这本书能提高成绩。你看看有用吗，你爸妈非说我被骗了。我拿过书来随便看看，书很简陋，甚至从没听过，书的内容是关于简便计算，声称是不用笔算，口算出结果。我知道这本书没什么用，但还是说有用。姥姥欣慰的笑着说：“有用就好”。</p><p>考上高中了，姥姥比我还要高兴，但姥姥也很伤心。高中就要住宿了，两周才能回一次家，两周才能见一次姥姥。姥姥说最初两周见不到我很想我，一个人睡有些空落落的。</p><p>高三疫情时期，在家上网课，妈妈不让我在姥姥家睡了。妈妈说我起得太早，就不让姥姥早起了，我在家住能更好的地照顾我。我知道，这只是原因之一，主要是怕我在姥姥家没人监督，不好好学习。</p><p>从这以后，我就一直在家住了，没有在去姥姥家住过。</p><p>考上大学了，姥姥还是最高兴的。上大学后由于封校，只有寒暑假才能回家，一走就是3个月。上大学后一直没给姥姥打过电话，姥姥也没给我打过。姥姥节俭一辈子了，没什么重要的事就不打电话，舍不得那几毛钱的电话费。</p><p>前几天，我与姥姥通了一次电话。姥姥听到是我打来的电话后很激动，聊了几句，但还没1分钟就挂电话了。我想，是姥姥舍不得电话钱吧。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>元素显示与隐藏</title>
      <link href="/2021/06/16/visibility/"/>
      <url>/2021/06/16/visibility/</url>
      
        <content type="html"><![CDATA[<p>类似网站中的广告，点击关闭时消失，重新刷新页面再出现。</p><p>本质：让一个元素在页面中隐藏或者显示出来。</p><h2 id="display">display</h2><p><code>display: none ；</code>隐藏对象</p><p><code>display：block ；</code>显示元素/转换为块元素</p><p><strong>display 隐藏元素后，不再占有原来的位置。</strong></p><h2 id="visibility">visibility</h2><p><code>visibility：visible;</code> 元素可视</p><p><code>visibility：hidden; </code>元素隐藏</p><p><strong>visibility 隐藏元素后，仍占有原来的位置。</strong></p><h2 id="overflow">overflow</h2><p>overflow 属性指定在元素的内容太大而无法放入指定区域时是剪裁内容还是添加滚动条。</p><p>overflow 属性可设置以下值：</p><ul><li><code>visible</code> - 默认。溢出没有被剪裁。内容在元素框外渲染</li><li><code>hidden</code> - 溢出被剪裁，其余内容将不可见</li><li><code>scroll</code> - 溢出被剪裁，同时添加滚动条以查看其余内容</li><li><code>auto</code> - 与 scroll 类似，但仅在必要时添加滚动条</li></ul><p><strong>注释</strong>：overflow属性仅适用于具有指定高度的块元素。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css定位</title>
      <link href="/2021/06/12/position/"/>
      <url>/2021/06/12/position/</url>
      
        <content type="html"><![CDATA[<h2 id="定位">定位</h2><ul><li>浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。</li><li>定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</li></ul><p><strong>定位=定位模式+边偏移</strong></p><p>定位模式用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。</p><h3 id="定位模式">定位模式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: static; <span class="comment">/*静态定位*/</span></span><br><span class="line"><span class="attribute">position</span>: relative; <span class="comment">/*相对定位*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/*绝对定位*/</span></span><br><span class="line"><span class="attribute">position</span>: fixed; <span class="comment">/*固定定位*/</span></span><br></pre></td></tr></table></figure><h3 id="边偏移">边偏移</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span>: <span class="number">20px</span>; <span class="comment">/*顶级偏移量，定义元素相对于父元素上边距的距离*/</span></span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">20px</span>; <span class="comment">/*底部偏移量，定义元素相对于父元素下边距的距离*/</span></span><br><span class="line"><span class="attribute">left</span>: <span class="number">20px</span>; <span class="comment">/*左侧偏移量，定义元素相对于父元素左边距的距离*/</span></span><br><span class="line"><span class="attribute">right</span>: <span class="number">20px</span>; <span class="comment">/*右侧偏移量，定义元素相对于父元素右边距的距离*/</span></span><br></pre></td></tr></table></figure><h2 id="static-2">static</h2><p>静态定位是元素的默认定位方式，无定位的意思。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span>: static; &#125;</span><br></pre></td></tr></table></figure><ul><li>静态定位按照标准流特性摆放位置，它没有边偏移</li><li>静态定位在布局时很少用到</li></ul><h2 id="relative">relative</h2><p>相对定位的偏移量相对于自身位置移动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;<span class="attribute">position</span>: relative&#125;;</span><br></pre></td></tr></table></figure><p>原来在标准流的位置继续占有，后面盒子仍以标准流方式对待它。</p><h2 id="absolute">absolute</h2><p>绝对定位的偏移量相对于父级元素移动。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span>: absolute; &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>当没有父级元素或父级元素没有定位时，以浏览器来偏移。</strong></li><li>绝对定位不占有原先位置（脱标）</li></ul><h2 id="子绝父相">子绝父相</h2><ul><li>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</li><li>父盒子需要加定位限制子盒子在父盒子内显示。</li><li>父盒子布局时，需要占有位置，因此父亲只能是相对定位。</li></ul><h2 id="fixed">fixed</h2><p>固定定位是元素固定于浏览器可视区的位置。在浏览器页面滚动时不改变元素位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">position</span>: fixed; &#125;</span><br></pre></td></tr></table></figure><p>固定定位不占有原先位置（脱标）</p><h3 id="小技巧：固定在版心右侧">小技巧：固定在版心右侧</h3><p>小算法：</p><ul><li><p>让固定定位的盒子 left: 50%. 走到浏览器可视区（版心） 的一半位置。</p></li><li><p>让固定定位的盒子 margin-left: 版心宽度的一半距离。 多走版心宽度的一半位置就可以让固定定位的盒子贴着版心右侧对齐了。</p></li></ul><h2 id="总结-4">总结</h2><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/%E5%AE%9A%E4%BD%8D.png" alt=""></p><h2 id="定位叠放次序-z-index">定位叠放次序 z-index</h2><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z-index 来控制盒子的前后次序 (z轴)。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: auto;</span><br></pre></td></tr></table></figure><ul><li>数值可以是正整数、负整数或 0, 默认是 auto，数值越大，盒子越靠上。</li><li>如果属性值相同，则按照书写顺序，后来居上。</li><li>数字后面不能加单位。</li><li>只有定位的盒子才有 z-index 属性。</li></ul><h2 id="拓展">拓展</h2><h3 id="绝对定位盒子居中">绝对定位盒子居中</h3><p>加了绝对定位的盒子不能通过 <code>margin:0 auto</code> 水平居中</p><p>居中方法与【小技巧：固定在版心右侧】相似</p><p>①<code> left: 50%;</code>：让盒子的左侧移动到父级元素的水平中心位置。</p><p>② <code>margin-left: -100px;</code>：让盒子向左移动自身宽度的一半</p><h3 id="定位特殊特性">定位特殊特性</h3><p>绝对定位和固定定位也和浮动类似。</p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</li></ol><h3 id="外边距塌陷">外边距塌陷</h3><p>脱标的盒子不会触发外边距塌陷。浮动元素、绝对定位(固定定位）元素的都不会触发外边距合并的问题。</p><h3 id="绝对定位（固定定位）会完全压住盒子">绝对定位（固定定位）会完全压住盒子</h3><ul><li><p>浮动元素只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）。</p></li><li><p>绝对定位（固定定位） 会压住下面标准流所有的内容。</p></li><li><p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css浮动</title>
      <link href="/2021/06/05/float/"/>
      <url>/2021/06/05/float/</url>
      
        <content type="html"><![CDATA[<h2 id="网页布局">网页布局</h2><ol><li>标准流</li></ol><ul><li>块级元素：独占一行，从上向下顺序排列。<br>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li><li>行内元素：按照顺序从左到右顺序排列，碰到父元素边缘则自动换行。<br>常用元素：span、a、i、em等<br>以上都是标准流布局，标准流是最基本的布局方式。</li></ul><ol start="2"><li>浮动</li><li>定位</li></ol><h2 id="浮动">浮动</h2><p>float属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float: left; /*right/none*/</span><br></pre></td></tr></table></figure><ol><li><p>浮动和标准流的父盒子搭配。<br><strong>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</strong></p></li><li><p>一个元素浮动了，理论上其余的兄弟元素也要浮动。<br>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题。<br><strong>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流。</strong></p></li></ol><h2 id="清除浮动">清除浮动</h2><h3 id="为什么要清除浮动">为什么要清除浮动</h3><p>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png" alt="image-20210606112104958"></p><h3 id="清除浮动本质">清除浮动本质</h3><ul><li><p>清除浮动的本质是清除浮动元素造成的影响</p></li><li><p>如果父盒子本身有高度，则不需要清除浮动</p></li><li><p><strong>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</strong></p></li></ul><h3 id="清除浮动-2">清除浮动</h3><h4 id="额外标签法">额外标签法</h4><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。 额外标签法会在浮动元素末尾添加一个空的标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>优点： 通俗易懂，书写方便</p></li><li><p>缺点： 添加许多无意义的标签，结构化较差</p><p><strong>注意： 要求这个新的空标签必须是块级元素。</strong></p></li></ul><h4 id="父级添加overflow">父级添加overflow</h4><p>给<strong>父级</strong>添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll</p><ul><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li></ul><h4 id="after伪元素法">:after伪元素法</h4><p>给<strong>父元素</strong>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after &#123; </span><br><span class="line"> content: &quot;&quot;; </span><br><span class="line"> display: block; </span><br><span class="line"> height: 0; </span><br><span class="line"> clear: both; </span><br><span class="line"> visibility: hidden; </span><br><span class="line">&#125; </span><br><span class="line">.clearfix &#123; /* IE6、7 专有 */ </span><br><span class="line"> *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：照顾低版本浏览器</li><li>代表网站： 百度、淘宝网、网易等</li></ul><h4 id="双伪元素法">双伪元素法</h4><p>给<strong>父元素</strong>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:before,.clearfix:after &#123;</span><br><span class="line"> content:&quot;&quot;;</span><br><span class="line"> display:table; </span><br><span class="line">&#125;</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line"> clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line"> *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：代码更简洁</li><li>缺点：照顾低版本浏览器</li><li>代表网站：小米、腾讯等</li></ul><h4 id="总结-3">总结</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E6%96%B9%E6%B3%95.png" alt="image-20210606113736087"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子边框</title>
      <link href="/2021/06/03/box/"/>
      <url>/2021/06/03/box/</url>
      
        <content type="html"><![CDATA[<h2 id="边框">边框</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">border-width/*定义边框粗细，单位px*/</span><br><span class="line">border-style /*边框样式 solid实先 dashed虚线 dotted点线 */</span><br><span class="line">border-color /*边框颜色*/</span><br><span class="line">border: 1px solid red; /*简写*/</span><br><span class="line">border-collapse:collapse; /*表示相邻边框合并*/</span><br></pre></td></tr></table></figure><h2 id="内边距">内边距</h2><p><code>padding</code>内边距，即边框和内容之间的距离</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">padding:5px; /*上下左右都有5像素内边距*/</span><br><span class="line"></span><br><span class="line">padding:5px 10px; /*上下5px，左右10px*/</span><br><span class="line"></span><br><span class="line">padding:5px 10px 20px; /*上内边距5px，左右10px，下20px*/</span><br><span class="line"></span><br><span class="line">padding:5px 10px 20px 30px; /*上5，右10，下20，左30*/</span><br></pre></td></tr></table></figure><h2 id="外边距">外边距</h2><p><code>margin</code>  用于设置外边距，即控制盒子和盒子之间的距离。</p><h3 id="块级盒子水平居中">块级盒子水平居中</h3><p>外边距可以让块级盒子水平居中，但是必须满足两个条件：</p><p>①盒子必须指定了宽度（width）。</p><p>②盒子左右的外边距都设置为auto 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.header&#123; width:960px; margin:0 auto;&#125;</span><br><span class="line"></span><br><span class="line">/*常见写法：*/</span><br><span class="line"></span><br><span class="line">margin-left: auto;margin-right: auto;</span><br><span class="line"></span><br><span class="line">margin: auto;</span><br><span class="line"></span><br><span class="line">margin: 0 auto;</span><br></pre></td></tr></table></figure><h2 id="清除内外边距">清除内外边距</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    padding:0;/*清除内边距*/</span><br><span class="line">    margin:0;/*清除外边距*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="圆角边框">圆角边框</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-radius: length; /*参数值可以为数值或百分比的形式*/</span><br></pre></td></tr></table></figure><h2 id="盒子阴影">盒子阴影</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure><p><img src="https://panghu-1256092140.cos.ap-beijing.myqcloud.com/%20tuchuang-master/box-shadow.png" alt="box-shadow1"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讲座，机会，关系</title>
      <link href="/2021/06/02/new/"/>
      <url>/2021/06/02/new/</url>
      
        <content type="html"><![CDATA[<p>换新电脑了，开心o(<em>￣▽￣</em>)ブ</p><p>旧电脑有些年头了，太卡了，打开个VS Code都要卡好久，严重影响心情……趁着618在京东入手了<code>荣耀Magicbook pro 2020</code>，我的要求不高，能满足日常学习娱乐就行。新电脑体验不错，激活电脑后就在新电脑上部署了Hexo博客，参考了这篇教程。</p><p><a href="https://www.cnblogs.com/study-everyday/p/8902136.html">在新电脑上部署Hexo</a></p><h2 id="讲座">讲座</h2><p>前不久听了一位学长的讲座，学长现在在字节跳动实习，做着我憧憬的工作👨‍💻。</p><p>学长是我们学院信科专业的，考上了北京理工大学的研究生。他讲了大学、考研、实习经历，听后我很佩服，也很羡慕。想起了薛兆丰的话，大意是：**看见别人打到鱼你也要打鱼，你有网吗？打鱼只要一天，织网呢？**是啊，我只看到了他收获的果实，却没看到他为此付出的努力。即使天资聪颖的人想要成功，都要付出努力，何况平庸的我呢！他做的是前端岗位，我也对前端很感兴趣。讲座后他展示了他的微信，我加了，但一直没敢聊天，内向+不知道说些什么……</p><h2 id="机会">机会</h2><p>在日常生活中，我们会得到很多机会，但我大都没把握住。</p><p>军训休息时，我们连和十二连一起做游戏。1v1蒙眼pk，最先碰到头的人胜。十二连的人都很积极，我们连仅有几个人参与，我也一直没敢参与，到最后没有人参与了。然后我们被教官罚了，全体蹲了5分钟。</p><p>电工学最后一堂课，老师给我们一些回答问题的机会，帮我们加下平时成绩。很多问题我都会，但没有回答，到最后没有机会再回答了。</p><p><strong>人们后悔的往往不是做错了什么，而是错过了什么。</strong></p><h2 id="关系">关系</h2><p>我们每天都在面对各种各样的关系。人与世界的关系，人与人之间的关系，最重要的是人和自己内心的关系。我现在处理最多的就是我与室友的关系。同学、室友都不是我们主动选择的，能相遇仅仅是缘分。三观不合、兴趣不同是正常的事，能遇到合得来的室友才是意外的惊喜。室友，毕竟是舍友；舍友，不就是个舍友吗。《千与千寻》中写道：</p><blockquote><p>人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以自始至终陪着走完。当陪你的人要下车时，即使不舍也该心存感激，然后挥手道别。</p></blockquote><p>没有长久的关系，只有短暂的相遇。想想小学、初中和高中的同学，能来往的又有几人。有些事必须是一个人也只能是一个人做的。与人与自己内心的关系相比，人与人的关系显得不那么重要。<strong>处理好人与自己内心的关系，人和人的关系便没有关系，没有关系是最稳定的关系。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typora+picgo+Gitee实现图片上传</title>
      <link href="/2021/05/12/picgo/"/>
      <url>/2021/05/12/picgo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Typora 设置上传图片功能，图片可以自动提交到图床，大大提高了工作效率。如何将Typora编辑器中的图片上传到自己的图床，我们将用Typora+PicGo+Gitee实现图片上传。</p></blockquote><h2 id="Gitee">Gitee</h2><h3 id="1-注册、登录码云">1.注册、登录码云</h3><p>Gitee网址：<a href="https://gitee.com">https://gitee.com</a> （注册登录操作不再介绍）</p><h3 id="2-创建一个仓库当做图床">2.创建一个仓库当做图床</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/tuchuang1.png" alt="img"></p><p>注意我标红的地方，然后选择创建就ok了。</p><h3 id="3-创建私人令牌">3.创建私人令牌</h3><p>找到设置——安全设置——生成新令牌</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210312173452.png" alt="image-20210312173450614"></p><p>描述私人令牌，选择projects，提交。<strong>==复制令牌，可以记录在text等地方，稍后会用到。==</strong></p><h2 id="PicGo">PicGo</h2><p>一款可以上传、管理图床的工具，支持腾讯图床、七牛图床等多种图床，可以自己探索。本篇用的是GItee图床。</p><h3 id="1-下载、安装PicGo">1.下载、安装PicGo</h3><p>下载地址：<a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210312174714.png" alt="image-20210312174713865"></p><p>选择自己的版本，下载安装即可。</p><h3 id="2-安装Gitee插件">2.安装Gitee插件</h3><p>注：若没有 node.js ，无法安装Gitee插件。官网：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a> 下载安装即可。</p><p>一切顺利，打开PicGO——插件设置——搜索gitee</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210312175357.png" alt="image-20210312175356906"></p><p>有两个插件，任选其一安装即可。==当插件安装不了，一直显示安装中，请执行下面操作。安装成功的可以忽略。==</p><p>在搜索中输入<code>cmd</code>，以管理员身份运行命令行提示符（右键–&gt;以管理员身份运行）。</p><p>输入：<code>cd &quot;C:\Users\用户名\AppData\Roaming\picgo&quot;</code>，进入picgo目录，输入：<code>npm install picgo-plugin-插件名称</code>安装插件。安装gitee插件可直接输入：<code>npm install picgo-plugin-gitee-uploader</code>。</p><h3 id="3-配置Gitee插件">3.配置Gitee插件</h3><p>在PicGo设置中选择Gitee图床</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210312181014.png" alt="image-20200420204908684"></p><p>配置图床</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210312181526.png" alt="image-20210312181525489"></p><p>后三个配置可以默认，之后点确定就大功告成了。可以手动上传图片了。</p><h2 id="Typora">Typora</h2><h3 id="1-下载、安装Typora">1.下载、安装Typora</h3><p>官网地址：<a href="https://www.typora.io">https://www.typora.io</a></p><h3 id="2-配置Typora">2.配置Typora</h3><p>文件——偏好设置——图形</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210312182426.png" alt="image-20210312182425861"></p><h3 id="3-上传验证">3.上传验证</h3><p>点击验证图片上传选项验证是否配置成功</p><h2 id="常见错误">常见错误</h2><h3 id="1-Failed-to-fetch">1. Failed to fetch</h3><p>PicGo的端口设置错误，打开 <code>PicGo设置 &gt; 设置Service</code>，将端口设置为36677。</p><h3 id="2-“success”-false">2. {“success”,false}</h3><p>文件名重复错误，<code>PicGo设置``中开启</code>时间戳重命名`</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一道c语言</title>
      <link href="/2021/05/08/c-100/"/>
      <url>/2021/05/08/c-100/</url>
      
        <content type="html"><![CDATA[<p>我又来给自己挖坑了，定个小目标。<del>从今天起每天一道c语言，争取做够100道。<del></p><h2 id="5-8">5.8</h2><p><strong>题目</strong>：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</p><p><strong>程序分析</strong>：可填在百位、十位、个位的数字都是1、2、3、4。组成所有的排列后再去 掉不满足条件的排列。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) <span class="comment">// 以下为三重循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; <span class="number">5</span>; k++)  <span class="comment">// 确保i、j、k三位互不相同</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != k &amp;&amp; i != j &amp;&amp; j != k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d%d%d\n&quot;</span>, i, j, k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>百位有4种选择，为使十位与百位不重复，十位有3种选择，同理，个位有2中选择，总共有4x3x2=24种选择。</p><h2 id="5-9">5.9</h2><p><strong>题目</strong>：企业发放的奖金根据利润提成。</p><p>利润(I)低于或等于10万元时，奖金可提10%；<br>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；<br>20万到40万之间时，高于20万元的部分，可提成5%；<br>40万到60万之间时高于40万元的部分，可提成3%；<br>60万到100万之间时，高于60万元的部分，可提成1.5%；<br>高于100万元时，超过100万元的部分按1%提成。<br>从键盘输入当月利润I，求应发放奖金总数？</p><p><strong>程序分析</strong>：请利用数轴来分界，定位。注意定义时需把奖金定义成长整型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入你的利润&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt;= <span class="number">100000</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">0.1</span> * i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">200000</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">0.1</span> * <span class="number">100000</span> + <span class="number">0.075</span> * (i - <span class="number">100000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">400000</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = (i - <span class="number">200000</span>) * <span class="number">0.05</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">600000</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = (i - <span class="number">400000</span>) * <span class="number">0.03</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">1000000</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = (i - <span class="number">600000</span>) * <span class="number">0.015</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">1000000</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = (i - <span class="number">1000000</span>) * <span class="number">0.01</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你的净利润为%lf\n&quot;</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你的提成为%lf&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为hexo内的文章加密</title>
      <link href="/2021/05/07/password/"/>
      <url>/2021/05/07/password/</url>
      
        <content type="html"><![CDATA[<p>最近，我的博客地址被朋友知道了。这使我有些顾虑，写什么也变得不自在。每个人都有秘密，或许藏在心里，或许告诉亲密的人，或许分享给陌生人。</p><p>每个人都很难精神裸体，至少我很难。如果我写什么都要被朋友看到，那和发朋友圈有什么区别。于是决定给一些文章加密，密码统一为我<strong>全球最大的同性交友网站</strong>的用户名（你懂的，手动狗头）。</p><p>下面分享一下为hexo内文章加密的一种方法。</p><h2 id="安装">安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><h2 id="快速开始">快速开始</h2><p>在 <code>站点配置文件</code> 中启用该插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure><p>然后在文章头部添加上对应的字段，如 <code>password</code>, <code>abstract</code>, <code>message</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: bugaosuni</span><br><span class="line">abstract: 这是一篇加密的文章</span><br><span class="line">message:  输入密码，查看文章</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>password: 博客文章加密使用的密码<br>abstract: 文章摘要，会显示在博客的列表页<br>message: 博客查看时，密码输入框上面的描述性文字</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux磁盘管理</title>
      <link href="/2021/05/01/filesystem/"/>
      <url>/2021/05/01/filesystem/</url>
      
        <content type="html"><![CDATA[<p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux磁盘管理常用命令为 df、du。</p><ul><li>df ：列出文件系统的整体磁盘使用量</li><li>du：检查磁盘空间使用量</li></ul><h2 id="df">df</h2><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># 将系统内所有的文件系统列出来！</span><br><span class="line"># 在 Linux 底下如果 df 没有加任何选项</span><br><span class="line"># 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</span><br><span class="line">[root@kuangshen /]# df</span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">devtmpfs          889100       0    889100   0% /dev</span><br><span class="line">tmpfs             899460     704    898756   1% /dev/shm</span><br><span class="line">tmpfs             899460     496    898964   1% /run</span><br><span class="line">tmpfs             899460       0    899460   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1       41152812 6586736  32662368  17% /</span><br><span class="line">tmpfs             179896       0    179896   0% /run/user/0</span><br><span class="line"># 将容量结果以易读的容量格式显示出来</span><br><span class="line">[root@kuangshen /]# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        869M     0  869M   0% /dev</span><br><span class="line">tmpfs           879M  708K  878M   1% /dev/shm</span><br><span class="line">tmpfs           879M  496K  878M   1% /run</span><br><span class="line">tmpfs           879M     0  879M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1        40G  6.3G   32G  17% /</span><br><span class="line">tmpfs           176M     0  176M   0% /run/user/0</span><br><span class="line"># 将系统内的所有特殊文件格式及名称都列出来</span><br><span class="line">[root@kuangshen /]# df -aT</span><br><span class="line">Filesystem     Type        1K-blocks    Used Available Use% Mounted on</span><br><span class="line">sysfs          sysfs               0       0         0    - /sys</span><br><span class="line">proc           proc                0       0         0    - /proc</span><br><span class="line">devtmpfs       devtmpfs       889100       0    889100   0% /dev</span><br><span class="line">securityfs     securityfs          0       0         0    - /sys/kernel/security</span><br><span class="line">tmpfs          tmpfs          899460     708    898752   1% /dev/shm</span><br><span class="line">devpts         devpts              0       0         0    - /dev/pts</span><br><span class="line">tmpfs          tmpfs          899460     496    898964   1% /run</span><br><span class="line">tmpfs          tmpfs          899460       0    899460   0% /sys/fs/cgroup</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/systemd</span><br><span class="line">pstore         pstore              0       0         0    - /sys/fs/pstore</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/freezer</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpuset</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/hugetlb</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/blkio</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/net_cls,net_prio</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/memory</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/pids</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpu,cpuacct</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/devices</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/perf_event</span><br><span class="line">configfs       configfs            0       0         0    - /sys/kernel/config</span><br><span class="line">/dev/vda1      ext4         41152812 6586748  32662356  17% /</span><br><span class="line">systemd-1      -                   -       -         -    - /proc/sys/fs/binfmt_misc</span><br><span class="line">mqueue         mqueue              0       0         0    - /dev/mqueue</span><br><span class="line">debugfs        debugfs             0       0         0    - /sys/kernel/debug</span><br><span class="line">hugetlbfs      hugetlbfs           0       0         0    - /dev/hugepages</span><br><span class="line">tmpfs          tmpfs          179896       0    179896   0% /run/user/0</span><br><span class="line">binfmt_misc    binfmt_misc         0       0         0    - /proc/sys/fs/binfmt_misc</span><br><span class="line"># 将 /etc 底下的可用的磁盘容量以易读的容量格式显示</span><br><span class="line"></span><br><span class="line">[root@kuangshen /]# df -h /etc</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G  6.3G   32G  17% /</span><br></pre></td></tr></table></figure><h2 id="du">du</h2><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G/M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</span><br><span class="line"># 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</span><br><span class="line">[root@kuangshen home]# du</span><br><span class="line">16  ./redis</span><br><span class="line">8   ./www/.oracle_jre_usage  # 包括隐藏文件的目录</span><br><span class="line">24  ./www</span><br><span class="line">48  .                        # 这个目录(.)所占用的总量</span><br><span class="line"># 将文件的容量也列出来</span><br><span class="line">[root@kuangshen home]# du -a</span><br><span class="line">4   ./redis/.bash_profile</span><br><span class="line">4   ./redis/.bash_logout    </span><br><span class="line">....中间省略....</span><br><span class="line">4   ./kuangstudy.txt # 有文件的列表了</span><br><span class="line">48  .</span><br><span class="line"># 检查根目录底下每个目录所占用的容量</span><br><span class="line">[root@kuangshen home]# du -sm /*</span><br><span class="line">0   /bin</span><br><span class="line">146 /boot</span><br><span class="line">.....中间省略....</span><br><span class="line">0   /proc</span><br><span class="line">.....中间省略....</span><br><span class="line">1   /tmp</span><br><span class="line">3026    /usr  # 系统初期最大就是他了啦！</span><br><span class="line">513 /var</span><br><span class="line">2666    /www</span><br></pre></td></tr></table></figure><p>通配符 * 来代表每个目录。</p><p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p><h2 id="磁盘挂载与卸除">磁盘挂载与卸除</h2><p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p><p>Linux 的磁盘挂载使用mount命令，卸载使用umount命令。</p><p>磁盘挂载语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将 /dev/hdc6 挂载到 /mnt/hdc6 上面！</span><br><span class="line">[root@www ~]# mkdir /mnt/hdc6</span><br><span class="line">[root@www ~]# mount /dev/hdc6 /mnt/hdc6</span><br><span class="line">[root@www ~]# df</span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6</span><br></pre></td></tr></table></figure><p>磁盘卸载命令 umount 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 /etc/mtab 情况下卸除。</li></ul><p>卸载/dev/hdc6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]# umount /dev/hdc6</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户和用户组的管理</title>
      <link href="/2021/04/30/useradd/"/>
      <url>/2021/04/30/useradd/</url>
      
        <content type="html"><![CDATA[<p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、删除与修改。</li><li>用户口令的管理。</li><li>用户组的管理。</li></ul><hr><h2 id="一、用户账号管理">一、用户账号管理</h2><h3 id="1、添加账户">1、添加账户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></table></figure><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># useradd –d  /home/sam -m sam</span><br></pre></td></tr></table></figure><p>此命令创建了一个用户sam，其中-d和-m选项用来为登录名sam产生一个主目录  /home/sam（/home为默认的用户主目录所在的父目录）。</p><h3 id="2、删除帐号">2、删除帐号</h3><p>如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用<code>userdel</code>命令，其格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项是 -r，它的作用是把用户的主目录一起删除。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># userdel -r sam</span><br></pre></td></tr></table></figure><p>此命令删除用户sam在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p><h3 id="3、切换账号">3、切换账号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su 用户名</span><br></pre></td></tr></table></figure><p>$表示普通用户；#表示超级用户</p><h3 id="4、修改帐号">4、修改帐号</h3><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>修改已有用户的信息使用usermod命令，其格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># usermod -s /bin/ksh -d /home/z –g developer kuangshen</span><br></pre></td></tr></table></figure><p>此命令将用户kuangshen的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p><h3 id="5、用户口令的管理">5、用户口令的管理</h3><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p><p>命令的格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><p>例如，假设当前用户是kuangshen，则下面的命令修改该用户自己的口令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ passwd </span><br><span class="line">Old password:******</span><br><span class="line">New password:*******</span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure><p>如果是超级用户，可以用下列形式指定任何用户的口令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># passwd kuangshen</span><br><span class="line">New password:*******</span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p><p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p><p>为用户指定空口令时，执行下列形式的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># passwd -d kuangshen</span><br></pre></td></tr></table></figure><p>此命令将用户 kuangshen的口令删除，这样用户 kuangshen下一次登录时，系统就不再允许该用户登录了。</p><p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># passwd -l kuangshen</span><br></pre></td></tr></table></figure><h2 id="二、用户组的管理">二、用户组的管理</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><h3 id="1、增加用户组">1、增加用户组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># groupadd group1</span><br></pre></td></tr></table></figure><p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># groupadd -g 101 group2</span><br></pre></td></tr></table></figure><p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p><h3 id="2、删除用户组">2、删除用户组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></table></figure><h3 id="3、修改用户组">3、修改用户组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># groupmod -g 102 group2</span><br></pre></td></tr></table></figure><p>此命令将组group2的组标识号修改为102。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># groupmod –g 10000 -n group3 group2</span><br></pre></td></tr></table></figure><p>此命令将组group2的标识号改为10000，组名修改为group3。</p><h3 id="4、切换用户组">4、切换用户组</h3><p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p><p>用户可以在登录后，使用命令<code>newgrp</code>切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ newgrp root</span><br></pre></td></tr></table></figure><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p><p>来源：<a href="https://www.runoob.com/linux/linux-user-manage.html">https://www.runoob.com/linux/linux-user-manage.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim的使用</title>
      <link href="/2021/04/29/vim/"/>
      <url>/2021/04/29/vim/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-vim？">什么是 vim？</h2><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 vim 是一个程序开发工具而不是文字处理软件。</p><p>vim 键盘图：</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="img"></p><hr><h2 id="vi-vim-的使用">vi/vim 的使用</h2><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）<strong>和</strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p><h3 id="命令模式：">命令模式：</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h3 id="输入模式">输入模式</h3><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li><li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h3 id="底线命令模式">底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/vim-vi-workmodel.png" alt="img"></p><hr><h2 id="vi-vim-按键说明">vi/vim 按键说明</h2><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h3 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等">第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h3><table><thead><tr><th style="text-align:left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td style="text-align:left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td style="text-align:left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td style="text-align:left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td style="text-align:left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td style="text-align:left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td style="text-align:left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td style="text-align:left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td style="text-align:left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td style="text-align:left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td style="text-align:left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td style="text-align:left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td style="text-align:left">n<space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td></tr><tr><td style="text-align:left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td style="text-align:left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td style="text-align:left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td style="text-align:left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td style="text-align:left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td style="text-align:left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td style="text-align:left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td style="text-align:left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td style="text-align:left">n<Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr><tr><td style="text-align:left"><strong>搜索替换</strong></td><td></td></tr><tr><td style="text-align:left">/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td></tr><tr><td style="text-align:left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td style="text-align:left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td style="text-align:left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td style="text-align:left">使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td style="text-align:left">:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td></tr><tr><td style="text-align:left"><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td style="text-align:left"><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td style="text-align:left">删除、复制与贴上</td><td></td></tr><tr><td style="text-align:left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td style="text-align:left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td style="text-align:left">dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td style="text-align:left">ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td style="text-align:left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td style="text-align:left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td style="text-align:left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td style="text-align:left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td style="text-align:left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td style="text-align:left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td style="text-align:left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td style="text-align:left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td style="text-align:left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td style="text-align:left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td style="text-align:left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td style="text-align:left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td style="text-align:left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td style="text-align:left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td style="text-align:left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td style="text-align:left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td style="text-align:left">.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h3 id="第二部分：一般模式切换到编辑模式的可用的按钮说明">第二部分：一般模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th style="text-align:left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td style="text-align:left">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td style="text-align:left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td style="text-align:left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td style="text-align:left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td style="text-align:left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td style="text-align:left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h3 id="第三部分：一般模式切换到指令行模式的可用的按钮说明">第三部分：一般模式切换到指令行模式的可用的按钮说明</h3><table><thead><tr><th style="text-align:left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td style="text-align:left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td style="text-align:left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td style="text-align:left">:q</td><td>离开 vi (常用)</td></tr><tr><td style="text-align:left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td style="text-align:left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td style="text-align:left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td style="text-align:left">ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td style="text-align:left">ZQ</td><td>不保存，强制退出。效果等同于 <strong>:q!</strong>。</td></tr><tr><td style="text-align:left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td style="text-align:left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td style="text-align:left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td style="text-align:left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td style="text-align:left"><strong>vim 环境的变更</strong></td><td></td></tr><tr><td style="text-align:left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td style="text-align:left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p><p>来源：<a href="https://www.runoob.com/linux/linux-vim.html">https://www.runoob.com/linux/linux-vim.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令(2)</title>
      <link href="/2021/04/22/linux2/"/>
      <url>/2021/04/22/linux2/</url>
      
        <content type="html"><![CDATA[<h2 id="看懂文件属性">看懂文件属性</h2><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210422204033.webp" alt="图片"></p><p>实例中，boot文件的第一个属性用&quot;d&quot;表示。&quot;d&quot;在Linux中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件；</li><li>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210422204020.webp" alt="图片"></p><p>从左至右用0-9这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中：</p><p>第1、4、7位表示读权限，如果用&quot;r&quot;字符表示，则有读权限，如果用&quot;-&quot;字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用&quot;w&quot;字符表示，则有写权限，如果用&quot;-&quot;字符表示没有写权限；</p><p>第3、6、9位表示可执行权限，如果用&quot;x&quot;字符表示，则有执行权限，如果用&quot;-&quot;字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><h2 id="修改文件属性">修改文件属性</h2><h3 id="chgrp">chgrp</h3><p><strong>更改文件属组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><h3 id="chown">chown</h3><p><strong>更改文件属主，也可以同时更改文件属组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown [–R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><h3 id="chmod">chmod</h3><p><strong>更改文件9个属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r:4      w:2         x:1</span><br></pre></td></tr></table></figure><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= — = 0+0+0 = 0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 770 filename</span><br></pre></td></tr></table></figure><h2 id="查看文件内容">查看文件内容</h2><p><strong>概述</strong></p><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl  显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p><h3 id="cat">cat</h3><p><strong>由第一行开始显示文件内容</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [-AbEnTv]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/</span><br><span class="line">[root@kuangshen ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure><h3 id="tac">tac</h3><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEVICE=eth0</span><br></pre></td></tr></table></figure><h3 id="nl">nl</h3><p><strong>显示行号</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen ~]# nl /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">1   DEVICE=eth0</span><br><span class="line">2   BOOTPROTO=dhcp</span><br><span class="line">3   ONBOOT=yes</span><br></pre></td></tr></table></figure><h3 id="more">more</h3><p><strong>一页一页翻动</strong></p><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter   ：代表向下翻『一行』；</li><li>/字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f    ：立刻显示出档名以及目前显示的行数；</li><li>q    ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen etc]# more /etc/csh.login</span><br><span class="line">....(中间省略)....</span><br><span class="line">--More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令</span><br></pre></td></tr></table></figure><h3 id="less">less</h3><p><strong>一页一页翻动</strong></p><p>以下实例输出/etc/man.config文件的内容：</p><p>less运行时可以输入的命令有：</p><ul><li>空白键  ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>/字串  ：向下搜寻『字串』的功能；</li><li>?字串  ：向上搜寻『字串』的功能；</li><li>n   ：重复前一个搜寻 (与 / 或 ? 有关！)</li><li>N   ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li><li>q   ：离开 less 这个程序；</li></ul><h3 id="head">head</h3><p><strong>取出文件前面几行</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：<strong>-n</strong> 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen etc]# head -n 20 /etc/csh.login</span><br></pre></td></tr></table></figure><h3 id="tail">tail</h3><p><strong>取出文件后面几行</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen etc]# tail -n 20 /etc/csh.login</span><br></pre></td></tr></table></figure><h2 id="拓展：Linux-链接概念">拓展：Linux 链接概念</h2><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，<code>ln</code> 命令产生硬链接。</p><h3 id="硬连接">硬连接</h3><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><h3 id="软连接">软连接</h3><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><p><strong>测试：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen /]# cd /home</span><br><span class="line">[root@kuangshen home]# touch f1  # 创建一个测试文件f1</span><br><span class="line">[root@kuangshen home]# ls</span><br><span class="line">f1</span><br><span class="line">[root@kuangshen home]# ln f1 f2      # 创建f1的一个硬连接文件f2</span><br><span class="line">[root@kuangshen home]# ln -s f1 f3   # 创建f1的一个符号连接文件f3</span><br><span class="line">[root@kuangshen home]# ls -li        # -i参数显示文件的inode节点信息</span><br><span class="line">397247 -rw-r--r-- 2 root  root     0 Mar 13 00:50 f1</span><br><span class="line">397247 -rw-r--r-- 2 root  root     0 Mar 13 00:50 f2</span><br><span class="line">397248 lrwxrwxrwx 1 root  root     2 Mar 13 00:50 f3 -&gt; f1</span><br></pre></td></tr></table></figure><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># echo 字符串输出  &gt;&gt; f1 输出到 f1文件</span><br><span class="line">[root@kuangshen home]# echo &quot;I am f1 file&quot; &gt;&gt;f1</span><br><span class="line">[root@kuangshen home]# cat f1</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# cat f2</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# cat f3</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# rm -f f1</span><br><span class="line">[root@kuangshen home]# cat f2</span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]# cat f3</span><br><span class="line">cat: f3: No such file or directory</span><br></pre></td></tr></table></figure><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><ul><li>删除符号连接f3,对f1,f2无影响；</li><li>删除硬连接f2，对f1,f3也无影响；</li><li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li><li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li></ul><hr><p>作者：<strong>狂神说</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令(1)</title>
      <link href="/2021/04/21/linux1/"/>
      <url>/2021/04/21/linux1/</url>
      
        <content type="html"><![CDATA[<h2 id="ls">ls</h2><p>列出目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-16-9-centos /]<span class="comment"># ls [-aAdfFhilnrRSt]目录文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>-a：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-16-9-centos www]<span class="comment"># ls -al</span></span><br></pre></td></tr></table></figure><p>将目录下的所有文件列出来(含属性与隐藏档)</p><h2 id="cd">cd</h2><p>切换目录 Change Directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#回到自己的家目录，即/root</span></span><br><span class="line">[root@VM-16-9-centos /]<span class="comment"># cd ~</span></span><br><span class="line"><span class="comment">#回到根目录</span></span><br><span class="line">[root@VM-16-9-centos ~]<span class="comment"># cd /</span></span><br><span class="line"><span class="comment">#回到上一级</span></span><br><span class="line">[root@VM-16-9-centos /]<span class="comment"># cd ..</span></span><br></pre></td></tr></table></figure><h2 id="pwd">pwd</h2><p>显示目前所在目录 <strong>Print Working Directory</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-16-9-centos ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure><ul><li>-P：显示出确实的路径，而非使用连接(link) 路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单纯显示出目前的工作目录</span></span><br><span class="line">[root@VM-16-9-centos bin]<span class="comment"># pwd</span></span><br><span class="line">/bin</span><br><span class="line"><span class="comment"># 如果是链接，要显示真实地址，可以使用 -P参数</span></span><br><span class="line">[root@VM-16-9-centos bin]<span class="comment"># pwd -P</span></span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure><h2 id="mkdir">mkdir</h2><p>创建新目录 make directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure><ul><li>-m ：配置文件的权限。直接配置，不需要看默认权限 (umask) 的脸色</li><li>-p ：直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建多层目录</span></span><br><span class="line">[root@VM-16-9-centos /]<span class="comment"># mkdir -p zhang/zhang/zhang</span></span><br><span class="line"><span class="comment"># 创建权限为 rwx--x--x目录</span></span><br><span class="line">[root@VM-16-9-centos home]<span class="comment"># mkdir -m 711 test2</span></span><br><span class="line">[root@VM-16-9-centos home]<span class="comment"># ls -l</span></span><br><span class="line">drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span><br></pre></td></tr></table></figure><h2 id="rmdir">rmdir</h2><p>删除空目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br></pre></td></tr></table></figure><ul><li>-p：连同上一级空目录一起删除</li></ul><h2 id="cp">cp</h2><p>复制文件或目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># cp [-adfilprsu] 来源档(source) 目标档(destination)</span></span><br><span class="line">[root@www ~]<span class="comment"># cp [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure><p>**-i：**若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</p><h2 id="rm">rm</h2><p>移除文件或目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [-fir] 文件或目录</span><br></pre></td></tr></table></figure><ul><li>-f ：force，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除,<strong>非常危险</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># rm -i install.sh</span></span><br><span class="line">rm: remove regular file ‘install.sh’? y</span><br><span class="line"><span class="comment"># 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</span></span><br><span class="line"><span class="comment"># 尽量不要在服务器上使用 rm -rf /</span></span><br></pre></td></tr></table></figure><h2 id="mv">mv</h2><p>移动文件或目录，或修改名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]# mv [-fiu] source destination</span><br><span class="line">[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制一个文件到当前目录</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cp /root/install.sh /home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个文件夹 test</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mkdir test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将复制过来的文件移动到我们创建的目录，并查看</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mv install.sh test</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># ls</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cd test</span></span><br><span class="line">[root@kuangshen <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件夹重命名，然后再次查看！</span></span><br><span class="line">[root@kuangshen <span class="built_in">test</span>]<span class="comment"># cd ..</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mv test mvtest</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># ls</span></span><br><span class="line">mvtest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css三大特性：层叠性、继承性、优先级</title>
      <link href="/2021/04/12/css-inherit/"/>
      <url>/2021/04/12/css-inherit/</url>
      
        <content type="html"><![CDATA[<h2 id="层叠性">层叠性</h2><p>层叠性指当标签被设置了多个重复的样式时，一个属性会被覆盖。</p><p>不考虑优先级，层叠性遵循“就近原则”。如下，最终颜色为绿色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">div&#123;</span><br><span class="line">    color:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承性">继承性</h2><p>继承性是指子标签没有设置样式时，继承父标签样式。</p><p>继承性只适用于字体的颜色，大小、行间距等文本类属性，边框、外边距、内边距、定位、元素高度等与块级相关属性不能继承。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:green;<span class="attribute">font-size</span>:<span class="number">20px</span>;&#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            我是绿色的</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="优先级">优先级</h2><p>!important &gt; 行内样式 &gt; ID 选择器 &gt; 类(伪元素、伪类、属性)选择器 &gt; 元素选择器</p><p>权重相同时，遵循“就近原则”；权重不同时，权重大的生效。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210412185437.png" alt="image-20210412185424611"></p><p><code>注意</code>：<br>继承的权重为0</p><p>权重叠加：<br>div ul li     ----&gt;  0,0,0,3<br>.nav ul li    ----&gt;  0,0,1,2<br>a:hover       ----&gt;  0,0,1,1<br>#first .nav   ----&gt;  0,1,1,0</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css背景</title>
      <link href="/2021/04/10/background/"/>
      <url>/2021/04/10/background/</url>
      
        <content type="html"><![CDATA[<p>通过CSS 背景属性，可以给页面元素添加背景样式。<br>背景属性可以设置背景颜色、背景图片、背景平铺、<code>背景图片位置</code>、背景图像固定等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">background-color: 颜色值;    /*背景颜色*/</span><br><span class="line">background-image: url();    /*背景图片*/</span><br><span class="line">background-repeat: repeat |no-repeat |repeat-x |repeat-y ;    /*背景平铺*/</span><br><span class="line">background-position: x y;    /*背景位置*/</span><br><span class="line">background-attachment: fixed|scroll;    /*背景附着*/</span><br><span class="line">background: rgba(0,0,0,0.3)    /*背景色半透明*/</span><br></pre></td></tr></table></figure><h2 id="背景图片位置">背景图片位置</h2><ol><li>参数是方位名词</li></ol><ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如left  top和top  left效果一致</li><li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li></ul><ol start="2"><li>参数是精确单位</li></ol><ul><li>如果参数值是精确坐标，那么第一个肯定是x 坐标，第二个一定是y坐标</li><li>如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</li></ul><ol start="3"><li>参数是混合单位</li></ol><ul><li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</li></ul><h2 id="背景复合写法">背景复合写法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: transparent url(image.jpg) repeat-y  fixed  top ;</span><br></pre></td></tr></table></figure><p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性background 中。从而节约代码量.当使用简写属性时，没有特定的书写顺序,一般习惯约定顺序为：<code>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元素显示模式及转换</title>
      <link href="/2021/04/09/display/"/>
      <url>/2021/04/09/display/</url>
      
        <content type="html"><![CDATA[<p>元素显示模式就是元素（标签）以什么方式进行显示。比如<code>&lt;div&gt;</code>自己占一行，比如一行可以放多个<code>&lt;span&gt;</code>。<strong>HTML元素一般分为块元素和行内元素两种类型</strong></p><h2 id="块元素">块元素</h2><p><code>常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</code></p><p>特点：</p><ul><li>自己独占一行。</li><li>高度，宽度、外边距以及内边距都可以控制。</li><li>宽度默认是容器（父级宽度）的100%。</li><li>是一个容器及盒子，里面可以放行内或者块级元素。</li></ul><p>注意：</p><p><strong>文字类的元素内不能使用块级元素</strong></p><ul><li><code>&lt;p&gt;</code>标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></li><li><code>&lt;h1&gt;~&lt;h6&gt;</code>等都是文字类块级标签，里面也不能放其他块级元素</li></ul><h2 id="行内元素">行内元素</h2><p><code>常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt; 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</code></p><p>特点：</p><ul><li>相邻行内元素在一行上，一行可以显示多个。</li><li>高、宽直接设置是无效的。</li><li>默认宽度就是它本身内容的宽度。</li><li>行内元素只能容纳文本或其他行内元素。</li></ul><p>注意：</p><ul><li>链接里面不能再放链接</li><li>特殊情况链接<code>&lt;a&gt;</code> 里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下块级模式最安全</li></ul><h2 id="行内块元素">行内块元素</h2><p><code>在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。</code></p><p>特点：</p><ul><li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）。</li><li>默认宽度就是它本身内容的宽度（行内元素特点）。</li><li>高度，行高、外边距以及内边距都可以控制（块级元素特点）</li></ul><h2 id="元素转换">元素转换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: block;    /*转换为块元素*/</span><br><span class="line">display: inline;    /*转换为行内元素*/</span><br><span class="line">display: inline-block;    /*转换为行内块*/</span><br></pre></td></tr></table></figure><h2 id="实例">实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#55585a</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#ff6700</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>手机 电话卡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>电视<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>笔记本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>穿戴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210409130014.png" alt="小米商城简易导航栏"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css伪类选择器</title>
      <link href="/2021/04/08/css-hover/"/>
      <url>/2021/04/08/css-hover/</url>
      
        <content type="html"><![CDATA[<p>伪类选择器用于向某些选择器添加特殊的效果，伪类选择器有链接伪类、结构伪类等。</p><h2 id="链接伪类">链接伪类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a: link   /*未访问的链接*/</span><br><span class="line">a: visited    /*已访问的链接*/</span><br><span class="line">a: hover    /*鼠标悬停的链接*/</span><br><span class="line">a: active    /*已选择的链接*/</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* unvisited link */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* visited link */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* mouse over link */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: hotpink;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* selected link */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS 链接<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>注释：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>在 CSS 定义中，a:hover 必须位于 a:link 和 a:visited 之后才能生效。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>注释：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>在 CSS 定义中，a:active 必须位于 a:hover 之后才能生效。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="focus伪类">focus伪类</h2><p><code>:focus</code>伪类选择器用于选取获得焦点的表单元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emmet语法</title>
      <link href="/2021/04/07/emmet/"/>
      <url>/2021/04/07/emmet/</url>
      
        <content type="html"><![CDATA[<p>Emmet语法的前身是Zen coding,它使用缩写,来提高html/css的编写速度, Vscode内部已经集成该语法。</p><h2 id="快速生成HTML结构语法">快速生成HTML结构语法</h2><h3 id="标签">标签</h3><p>div 然后tab 键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="多个相同标签">多个相同标签</h3><p>div*3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="父子级标签">父子级标签</h3><p>可以用 &gt; ，比如 ul &gt; li</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="兄弟标签">兄弟标签</h3><p>用 + ,比如 div+p</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="有类名或者id名字">有类名或者id名字</h3><p>直接写 .demo 或者 #two, tab 键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="有顺序的div类名">有顺序的div类名</h3><p>自增符号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">‘</mi><mi>d</mi><mi>i</mi><mi>v</mi></mrow><annotation encoding="application/x-tex"> `div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">‘</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>*5`</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div1&gt;&lt;/div1&gt;</span><br><span class="line">&lt;div2&gt;&lt;/div2&gt;</span><br><span class="line">&lt;div3&gt;&lt;/div3&gt;</span><br><span class="line">&lt;div4&gt;&lt;/div4&gt;</span><br><span class="line">&lt;div5&gt;&lt;/div5&gt;</span><br></pre></td></tr></table></figure><h3 id="标签内部写内容">标签内部写内容</h3><p>{ }<br>div{胖虎同学}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;胖虎同学&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="快速生成CSS样式语法">快速生成CSS样式语法</h2><p>w200 按tab 可以 生成 <code>width: 200px;</code><br>lh26px 按tab 可以生成 <code>line-height: 26px;</code></p><p>参考资料：</p><a href="https://www.cnblogs.com/moyuling/category/752372.html," title="https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets@master&#x2F;logo&#x2F;256&#x2F;safari.png" target="">emmet语法,</a>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html表单元素</title>
      <link href="/2021/04/06/html-form/"/>
      <url>/2021/04/06/html-form/</url>
      
        <content type="html"><![CDATA[<p>HTML 表单用于搜集不同类型的用户输入。</p><h2 id="input元素"><code>input</code>元素</h2><p><code>&lt;input type=&quot; &quot;&gt;</code></p><p><code>radio</code> 单选按钮<br><code>text</code> 单行文本输入<br><code>submit</code> 提交按钮<br><code>checkbox</code> 多选按钮<br><code>password</code> 定义密码字段</p><h2 id="select元素"><code>select</code>元素</h2><p>下拉列表， <code>option</code> 元素定义待选择的选项,<code>selected</code> 属性定义预定义选项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=&quot;language&quot;&gt;</span><br><span class="line">&lt;option value=&quot;Chinese&quot; selected&gt;Chinese&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;English&quot;&gt;Saab&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;Japanese&quot;&gt;Fiat&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="textarea元素"><code>textarea</code>元素</h2><p>多行文本输入</p><h2 id="综合实例">综合实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html表单练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">&quot;20px&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/man.png&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">&quot;20px&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/woman.png&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第二行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>月薪<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> &gt;</span>请选择月薪范围<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> &gt;</span>低于5k<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">option</span> &gt;</span>5k-1w<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">option</span> &gt;</span>1w-1.5w<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">option</span> &gt;</span>1.5w-2w<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">option</span> &gt;</span>2w+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第三行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>地区：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入工作地区&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第四行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>婚姻状况：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;marry&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">id</span>=<span class="string">&quot;marry&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;marry&quot;</span>&gt;</span>已婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;marry&quot;</span>&gt;</span>已婚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第五行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>学历：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入学历&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第六行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性格：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xingge&quot;</span>&gt;</span>活泼开朗 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xingge&quot;</span>&gt;</span>沉闷呆板 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xingge&quot;</span>&gt;</span>严肃稳重</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第七行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>个人介绍：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">                 个人简介</span><br><span class="line">                <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第八行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 第九行 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>我承诺信息准确<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210406225558.png" alt="image-20210406225555721"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css基础选择器和组合选择器</title>
      <link href="/2021/04/02/css/"/>
      <url>/2021/04/02/css/</url>
      
        <content type="html"><![CDATA[<p>css选择器用于选取要设置样式的HTML元素。</p><h2 id="基础选择器">基础选择器</h2><h3 id="id选择器">id选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-id">#para1</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;para1&quot;</span>&gt;</span>胖虎同学<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>www.wangyouwu.cn<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表现：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210401163335.png" alt="image-20210401163324189"></p><h3 id="元素选择器">元素选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125; </span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>胖虎同学<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>只有h1才会变红<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表现：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210401165505.png" alt="image-20210401165505363"></p><h3 id="类选择器">类选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>我被绿了<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你被绿了。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表现：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210401170222.png" alt="image-20210401170221921"></p><h3 id="tips">tips</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210401185514.png" alt="image-20210401185453268"></p><h2 id="组合器选择器">组合器选择器</h2><h3 id="后代选择器（空格）">后代选择器（空格）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>后代选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>后代选择器匹配作为指定元素后代的所有元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 1。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 2。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 3。<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 4。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 5。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表现：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210402163910.png" alt="image-20210402163857173"></p><h3 id="子选择器（">子选择器（<code>&gt;</code>)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>子选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>子选择器 (&gt;) 选择属于指定元素子元素的所有元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 1。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 2。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 3。<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span> <span class="comment">&lt;!-- 非子但属后代 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 4。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 5。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 6。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表现：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210402164234.png" alt="image-20210402164233703"></p><h3 id="相邻兄弟选择器（-）">相邻兄弟选择器（+）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> + <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>相邻兄弟选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>相邻的同胞选择器（+）选择所有作为指定元素的相邻的同级元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 1。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 2。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 3。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 4。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表现：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210402164426.png" alt="image-20210402164426529"></p><h3 id="通用兄弟选择器（-）">通用兄弟选择器（~）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>通用兄弟选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>通用的兄弟选择器（~）选择指定元素的所有同级元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 1。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 2。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 3。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>一些代码。<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 4。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表现：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210402164610.png" alt="image-20210402164610520"></p><h3 id="Tips">Tips</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210402164735.png" alt="image-20210402164735344"></p><blockquote><p>除此之外，还有伪类选择器（根据特定状态选取元素）、伪元素选择器（根据元素的一部分并设置其样式）、属性选择器（根据属性或属性值来选取元素）。随着以后遇到再深入学习。</p></blockquote><a href="https://www.w3school.com.cn/css/css_selectors.asp/," title="https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets@master&#x2F;logo&#x2F;256&#x2F;safari.png" target="">css选择器,</a>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML速查手册</title>
      <link href="/2021/03/31/html/"/>
      <url>/2021/03/31/html/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-Basic-Document">HTML Basic Document</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Document name goes here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Visible text goes here</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Text-Elements">Text Elements</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This is a paragraph&lt;/p&gt;</span><br><span class="line">&lt;br&gt; (line break)</span><br><span class="line">&lt;hr&gt; (horizontal rule)</span><br><span class="line">&lt;pre&gt;This text is preformatted&lt;/pre&gt;</span><br></pre></td></tr></table></figure><h2 id="Logical-Styles">Logical Styles</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;em&gt;This text is emphasized&lt;/em&gt;</span><br><span class="line">&lt;strong&gt;This text is strong&lt;/strong&gt;</span><br><span class="line">&lt;code&gt;This is some computer code&lt;/code&gt;</span><br></pre></td></tr></table></figure><h2 id="Physical-Styles">Physical Styles</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;This text is bold&lt;/b&gt;</span><br><span class="line">&lt;i&gt;This text is italic&lt;/i&gt;</span><br></pre></td></tr></table></figure><h2 id="Links-Anchors-and-Image-Elements">Links, Anchors, and Image Elements</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.example.com/&quot;&gt;This is a Link&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;http://www.example.com/&quot;&gt;&lt;img src=&quot;URL&quot; alt=&quot;Alternate Text&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;mailto:webmaster@example.com&quot;&gt;Send e-mail&lt;/a&gt;A named anchor:</span><br><span class="line">&lt;a name=&quot;tips&quot;&gt;Useful Tips Section&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#tips&quot;&gt;Jump to the Useful Tips Section&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="Unordered-list">Unordered list</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;First item&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Next item&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="Ordered-list">Ordered list</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;First item&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Next item&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><h2 id="Definition-list">Definition list</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;First term&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;Definition&lt;/dd&gt;</span><br><span class="line">&lt;dt&gt;Next term&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;Definition&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><h2 id="Tables">Tables</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;th&gt;someheader&lt;/th&gt;</span><br><span class="line">  &lt;th&gt;someheader&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;sometext&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;sometext&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h2 id="Frames">Frames</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;frameset cols=&quot;25%,75%&quot;&gt;</span><br><span class="line">  &lt;frame src=&quot;page1.htm&quot;&gt;</span><br><span class="line">  &lt;frame src=&quot;page2.htm&quot;&gt;</span><br><span class="line">&lt;/frameset&gt;</span><br></pre></td></tr></table></figure><h2 id="Forms">Forms</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.example.com/test.asp&quot; method=&quot;post/get&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;lastname&quot;</span><br><span class="line">value=&quot;Nixon&quot; size=&quot;30&quot; maxlength=&quot;50&quot;&gt;</span><br><span class="line">&lt;input type=&quot;password&quot;&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; checked=&quot;checked&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;input type=&quot;reset&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot;&gt;</span><br><span class="line">&lt;select&gt;</span><br><span class="line">&lt;option&gt;Apples</span><br><span class="line">&lt;option selected&gt;Bananas</span><br><span class="line">&lt;option&gt;Cherries</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;textarea name=&quot;Comment&quot; rows=&quot;60&quot;</span><br><span class="line">cols=&quot;20&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="Entities">Entities</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt; is the same as &lt;</span><br><span class="line">&amp;gt; is the same as &gt;</span><br><span class="line">&amp;#169; is the same as ©</span><br></pre></td></tr></table></figure><h2 id="Other-Elements">Other Elements</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- This is a comment --&gt;</span><br><span class="line">&lt;blockquote&gt;</span><br><span class="line">Text quoted from some source.</span><br><span class="line">&lt;/blockquote&gt;</span><br><span class="line">&lt;address&gt;</span><br><span class="line">Address 1&lt;br&gt;</span><br><span class="line">Address 2&lt;br&gt;</span><br><span class="line">City&lt;br&gt;</span><br><span class="line">&lt;/address&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yaml基础语法</title>
      <link href="/2021/03/29/yaml/"/>
      <url>/2021/03/29/yaml/</url>
      
        <content type="html"><![CDATA[<h2 id="yaml简介">yaml简介</h2><p>YAML 是 “YAML Ain’t a Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：“Yet Another Markup Language”（仍是一种标记语言）。yaml是能够被电脑识别的数据序列化格式。</p><h2 id="基本语法">基本语法</h2><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进禁止用<code>Tab</code>，只允许用空格</li><li>空格数不重要，只要相同层级元素左对齐即可</li><li>用#表示注释</li></ul><h2 id="数据类型-3">数据类型</h2><ul><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li><li>纯量（scalars）：单个的、不可再分的值</li></ul><h2 id="对象">对象</h2><p>对象键值对用冒号表示，冒号后加一个空格<br><code>key: value</code>，也可以使用<code>key: &#123;key1: value1, key2: value2, ...&#125;</code></p><h2 id="数组">数组</h2><p>以 <code>-</code> 开头的行表示构成一个数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- A</span><br><span class="line">- B</span><br><span class="line">- C</span><br></pre></td></tr></table></figure><p>多维数组的行内表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key: [value1, value2, ...]</span><br></pre></td></tr></table></figure><h2 id="纯量">纯量</h2><ul><li>字符串</li><li>布尔值</li><li>整数</li><li>浮点数</li><li>Null</li><li>时间</li><li>日期</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">boolean:</span><br><span class="line">    - TRUE  #true,True都可以</span><br><span class="line">    - FALSE  #false，False都可以</span><br><span class="line">float:</span><br><span class="line">    - 3.14</span><br><span class="line">    - 6.8523015e+5  #可以使用科学计数法</span><br><span class="line">int:</span><br><span class="line">    - 123</span><br><span class="line">    - 0b1010_0111_0100_1010_1110    #二进制表示</span><br><span class="line">null:</span><br><span class="line">    nodeName: &#x27;node&#x27;</span><br><span class="line">    parent: ~  #使用~表示null</span><br><span class="line">string:</span><br><span class="line">    - 哈哈</span><br><span class="line">    - &#x27;Hello world&#x27;  #可以使用双引号或者单引号包裹特殊字符</span><br><span class="line">    - newline</span><br><span class="line">      newline2    #字符串可以拆成多行，每一行会被转化成一个空格</span><br><span class="line">date:</span><br><span class="line">    - 2018-02-17    #日期必须使用ISO 8601格式，即yyyy-MM-dd</span><br><span class="line">datetime:</span><br><span class="line">    -  2018-02-17T15:02:31+08:00    #时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span><br></pre></td></tr></table></figure><h2 id="引用">引用</h2><p><code>&amp;</code> 锚点和 <code>*</code> 别名，可以用来引用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">defaults: &amp;defaults</span><br><span class="line">  adapter:  postgres</span><br><span class="line">  host:     localhost</span><br><span class="line"></span><br><span class="line">development:</span><br><span class="line">  database: myapp_development</span><br><span class="line">  &lt;&lt;: *defaults</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">  database: myapp_test</span><br><span class="line">  &lt;&lt;: *defaults</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">defaults:</span><br><span class="line">  adapter:  postgres</span><br><span class="line">  host:     localhost</span><br><span class="line"></span><br><span class="line">development:</span><br><span class="line">  database: myapp_development</span><br><span class="line">  adapter:  postgres</span><br><span class="line">  host:     localhost</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">  database: myapp_test</span><br><span class="line">  adapter:  postgres</span><br><span class="line">  host:     localhost</span><br></pre></td></tr></table></figure><p>参考资料：<br><a href="https://www.runoob.com/w3cnote/yaml-intro.html">YAML入门教程</a><br><a href="https://daihainidewo.github.io/blog/yaml%E6%95%99%E7%A8%8B/">yaml教程</a><br><a href="https://www.jianshu.com/p/cea930923f3d">YML简介</a><br><a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML语言教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新学期，新博客，新开始！</title>
      <link href="/2021/03/29/go-school/"/>
      <url>/2021/03/29/go-school/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>新学期要开始了，把旧站关了，建个新站。本站用<code>Hexo</code>搭建，部署在<code>github</code>和<code>vercel</code>。</p><p>改用Hexo缘起<a href="https://yzyyz.top/">幼稚园园长</a>的博客，陷进去了（沈腾语气）。搭建博客出了些问题，感谢<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html">小茗同学</a>的教程和<a href="https://xtikas.com/">小T同学</a>的帮助。</p><h2 id="博客内容">博客内容</h2><p>博客主要记录我的学习笔记、日常生活和想要分享的内容。</p><p>一直对编程感兴趣，尤其是前端。我想学的是计算机相关专业，憧憬的职业是程序员👨‍💻，无奈被调剂到了应用物理学。没关系，兴趣在，希望就在。我建该站的目的之一是<strong>记录自己的学习编程之路</strong>，所以博客的大部分内容是我的学习笔记。</p><p>时光稍纵即逝，记忆也会随时间冲淡。<strong>记录想要留存的记忆</strong>，1个月后，1年后，10年后回看，会有不同的感受。多年之后，我是否变成了自己讨厌的样子，曾经的豪言壮志是否都已实现，曾经的百思不解是否有的答案。年长的自己能够坐着时光机重识年轻的自己，这是件有趣的事。</p><p>万物皆有圈，生物圈、朋友圈、电竞圈……博客也有圈，博客圈的博主们遍布世界各地，从事各种领域，有着相同或不同的兴趣，认真地运营着自己的博客。世上的人遍地都是，说的着的千里难寻。<strong>浏览不同的博客，发现不同的世界，结交不同的朋友。</strong></p><h2 id="博客事件">博客事件</h2><p><code>2021.03.29</code> 旧站关闭，新博客建成。起名“胖虎同学”，博客域名为<code>blog.wangyouwu.cn</code>。<br><code>2021.04.02</code> 博客的第一条评论：来自<code>琛苏设计</code><br><code>2021.04.18</code> 博客的第一个友链：<code>幼稚园园长</code></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
